
Smart_Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000266  00800060  000062c8  0000635c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008002c6  008002c6  000065c2  2**0
                  ALLOC
  3 .stab         00004410  00000000  00000000  000065c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001413  00000000  00000000  0000a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000bde7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020f  00000000  00000000  0000bfa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b43  00000000  00000000  0000c1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d7  00000000  00000000  0000ecf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013dc  00000000  00000000  000101d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000115ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000375  00000000  00000000  0001178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001530  00000000  00000000  00011b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00013031  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 5a 2a 	jmp	0x54b4	; 0x54b4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3e       	cpi	r26, 0xE1	; 225
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <main>
      8a:	0c 94 62 31 	jmp	0x62c4	; 0x62c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ashldi3>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	60 97       	sbiw	r28, 0x10	; 16
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	a8 2f       	mov	r26, r24
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
     1b2:	7e 01       	movw	r14, r28
     1b4:	08 94       	sec
     1b6:	e1 1c       	adc	r14, r1
     1b8:	f1 1c       	adc	r15, r1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	f7 01       	movw	r30, r14
     1be:	11 92       	st	Z+, r1
     1c0:	8a 95       	dec	r24
     1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
     1c4:	29 83       	std	Y+1, r18	; 0x01
     1c6:	3a 83       	std	Y+2, r19	; 0x02
     1c8:	4b 83       	std	Y+3, r20	; 0x03
     1ca:	5c 83       	std	Y+4, r21	; 0x04
     1cc:	6d 83       	std	Y+5, r22	; 0x05
     1ce:	7e 83       	std	Y+6, r23	; 0x06
     1d0:	af 83       	std	Y+7, r26	; 0x07
     1d2:	98 87       	std	Y+8, r25	; 0x08
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 1b       	sub	r24, r16
     1d8:	e8 2f       	mov	r30, r24
     1da:	ff 27       	eor	r31, r31
     1dc:	e7 fd       	sbrc	r30, 7
     1de:	f0 95       	com	r31
     1e0:	49 81       	ldd	r20, Y+1	; 0x01
     1e2:	5a 81       	ldd	r21, Y+2	; 0x02
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	18 16       	cp	r1, r24
     1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
     1ec:	19 86       	std	Y+9, r1	; 0x09
     1ee:	1a 86       	std	Y+10, r1	; 0x0a
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 86       	std	Y+12, r1	; 0x0c
     1f4:	88 27       	eor	r24, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	8e 1b       	sub	r24, r30
     1fa:	9f 0b       	sbc	r25, r31
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	66 1f       	adc	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
     20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
     20c:	20 2f       	mov	r18, r16
     20e:	33 27       	eor	r19, r19
     210:	27 fd       	sbrc	r18, 7
     212:	30 95       	com	r19
     214:	db 01       	movw	r26, r22
     216:	ca 01       	movw	r24, r20
     218:	02 2e       	mov	r0, r18
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	aa 1f       	adc	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	ab 87       	std	Y+11, r26	; 0x0b
     22e:	bc 87       	std	Y+12, r27	; 0x0c
     230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	57 95       	ror	r21
     238:	47 95       	ror	r20
     23a:	ea 95       	dec	r30
     23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	af 81       	ldd	r26, Y+7	; 0x07
     244:	b8 85       	ldd	r27, Y+8	; 0x08
     246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	4d 87       	std	Y+13, r20	; 0x0d
     25e:	5e 87       	std	Y+14, r21	; 0x0e
     260:	6f 87       	std	Y+15, r22	; 0x0f
     262:	78 8b       	std	Y+16, r23	; 0x10
     264:	29 85       	ldd	r18, Y+9	; 0x09
     266:	3a 85       	ldd	r19, Y+10	; 0x0a
     268:	4b 85       	ldd	r20, Y+11	; 0x0b
     26a:	5c 85       	ldd	r21, Y+12	; 0x0c
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	af 85       	ldd	r26, Y+15	; 0x0f
     272:	98 89       	ldd	r25, Y+16	; 0x10
     274:	8a 2f       	mov	r24, r26
     276:	60 96       	adiw	r28, 0x10	; 16
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <__fixunssfsi>:
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	7b 01       	movw	r14, r22
     298:	8c 01       	movw	r16, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e4       	ldi	r21, 0x4F	; 79
     2a2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__gesf2>
     2a6:	88 23       	and	r24, r24
     2a8:	8c f0       	brlt	.+34     	; 0x2cc <__fixunssfsi+0x3e>
     2aa:	c8 01       	movw	r24, r16
     2ac:	b7 01       	movw	r22, r14
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	5f e4       	ldi	r21, 0x4F	; 79
     2b6:	0e 94 2f 09 	call	0x125e	; 0x125e <__subsf3>
     2ba:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__fixsfsi>
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
     2c2:	20 50       	subi	r18, 0x00	; 0
     2c4:	30 40       	sbci	r19, 0x00	; 0
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	50 48       	sbci	r21, 0x80	; 128
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__fixunssfsi+0x4a>
     2cc:	c8 01       	movw	r24, r16
     2ce:	b7 01       	movw	r22, r14
     2d0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__fixsfsi>
     2d4:	9b 01       	movw	r18, r22
     2d6:	ac 01       	movw	r20, r24
     2d8:	b9 01       	movw	r22, r18
     2da:	ca 01       	movw	r24, r20
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <__umoddi3>:
     2e6:	ab e5       	ldi	r26, 0x5B	; 91
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e7       	ldi	r30, 0x79	; 121
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	0c 94 2b 31 	jmp	0x6256	; 0x6256 <__prologue_saves__>
     2f2:	a8 e0       	ldi	r26, 0x08	; 8
     2f4:	4e 01       	movw	r8, r28
     2f6:	08 94       	sec
     2f8:	81 1c       	adc	r8, r1
     2fa:	91 1c       	adc	r9, r1
     2fc:	f4 01       	movw	r30, r8
     2fe:	6a 2e       	mov	r6, r26
     300:	11 92       	st	Z+, r1
     302:	6a 94       	dec	r6
     304:	e9 f7       	brne	.-6      	; 0x300 <__umoddi3+0x1a>
     306:	29 83       	std	Y+1, r18	; 0x01
     308:	3a 83       	std	Y+2, r19	; 0x02
     30a:	4b 83       	std	Y+3, r20	; 0x03
     30c:	5c 83       	std	Y+4, r21	; 0x04
     30e:	6d 83       	std	Y+5, r22	; 0x05
     310:	7e 83       	std	Y+6, r23	; 0x06
     312:	8f 83       	std	Y+7, r24	; 0x07
     314:	98 87       	std	Y+8, r25	; 0x08
     316:	ce 01       	movw	r24, r28
     318:	09 96       	adiw	r24, 0x09	; 9
     31a:	fc 01       	movw	r30, r24
     31c:	11 92       	st	Z+, r1
     31e:	aa 95       	dec	r26
     320:	e9 f7       	brne	.-6      	; 0x31c <__umoddi3+0x36>
     322:	a9 86       	std	Y+9, r10	; 0x09
     324:	ba 86       	std	Y+10, r11	; 0x0a
     326:	cb 86       	std	Y+11, r12	; 0x0b
     328:	dc 86       	std	Y+12, r13	; 0x0c
     32a:	ed 86       	std	Y+13, r14	; 0x0d
     32c:	fe 86       	std	Y+14, r15	; 0x0e
     32e:	0f 87       	std	Y+15, r16	; 0x0f
     330:	18 8b       	std	Y+16, r17	; 0x10
     332:	29 84       	ldd	r2, Y+9	; 0x09
     334:	3a 84       	ldd	r3, Y+10	; 0x0a
     336:	4b 84       	ldd	r4, Y+11	; 0x0b
     338:	5c 84       	ldd	r5, Y+12	; 0x0c
     33a:	ad 84       	ldd	r10, Y+13	; 0x0d
     33c:	be 84       	ldd	r11, Y+14	; 0x0e
     33e:	cf 84       	ldd	r12, Y+15	; 0x0f
     340:	d8 88       	ldd	r13, Y+16	; 0x10
     342:	29 81       	ldd	r18, Y+1	; 0x01
     344:	3a 81       	ldd	r19, Y+2	; 0x02
     346:	4b 81       	ldd	r20, Y+3	; 0x03
     348:	5c 81       	ldd	r21, Y+4	; 0x04
     34a:	69 96       	adiw	r28, 0x19	; 25
     34c:	2f af       	std	Y+63, r18	; 0x3f
     34e:	69 97       	sbiw	r28, 0x19	; 25
     350:	6a 96       	adiw	r28, 0x1a	; 26
     352:	3f af       	std	Y+63, r19	; 0x3f
     354:	6a 97       	sbiw	r28, 0x1a	; 26
     356:	6b 96       	adiw	r28, 0x1b	; 27
     358:	4f af       	std	Y+63, r20	; 0x3f
     35a:	6b 97       	sbiw	r28, 0x1b	; 27
     35c:	6c 96       	adiw	r28, 0x1c	; 28
     35e:	5f af       	std	Y+63, r21	; 0x3f
     360:	6c 97       	sbiw	r28, 0x1c	; 28
     362:	6c 96       	adiw	r28, 0x1c	; 28
     364:	6c ac       	ldd	r6, Y+60	; 0x3c
     366:	7d ac       	ldd	r7, Y+61	; 0x3d
     368:	8e ac       	ldd	r8, Y+62	; 0x3e
     36a:	9f ac       	ldd	r9, Y+63	; 0x3f
     36c:	6c 97       	sbiw	r28, 0x1c	; 28
     36e:	69 aa       	std	Y+49, r6	; 0x31
     370:	7a aa       	std	Y+50, r7	; 0x32
     372:	8b aa       	std	Y+51, r8	; 0x33
     374:	9c aa       	std	Y+52, r9	; 0x34
     376:	6d 81       	ldd	r22, Y+5	; 0x05
     378:	7e 81       	ldd	r23, Y+6	; 0x06
     37a:	8f 81       	ldd	r24, Y+7	; 0x07
     37c:	98 85       	ldd	r25, Y+8	; 0x08
     37e:	3b 01       	movw	r6, r22
     380:	4c 01       	movw	r8, r24
     382:	6d aa       	std	Y+53, r6	; 0x35
     384:	7e aa       	std	Y+54, r7	; 0x36
     386:	8f aa       	std	Y+55, r8	; 0x37
     388:	98 ae       	std	Y+56, r9	; 0x38
     38a:	a1 14       	cp	r10, r1
     38c:	b1 04       	cpc	r11, r1
     38e:	c1 04       	cpc	r12, r1
     390:	d1 04       	cpc	r13, r1
     392:	09 f0       	breq	.+2      	; 0x396 <__umoddi3+0xb0>
     394:	04 c3       	rjmp	.+1544   	; 0x99e <__stack+0x13f>
     396:	62 14       	cp	r6, r2
     398:	73 04       	cpc	r7, r3
     39a:	84 04       	cpc	r8, r4
     39c:	95 04       	cpc	r9, r5
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <__umoddi3+0xbc>
     3a0:	00 c1       	rjmp	.+512    	; 0x5a2 <__umoddi3+0x2bc>
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	20 16       	cp	r2, r16
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	30 06       	cpc	r3, r16
     3aa:	01 e0       	ldi	r16, 0x01	; 1
     3ac:	40 06       	cpc	r4, r16
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	50 06       	cpc	r5, r16
     3b2:	88 f4       	brcc	.+34     	; 0x3d6 <__umoddi3+0xf0>
     3b4:	1f ef       	ldi	r17, 0xFF	; 255
     3b6:	21 16       	cp	r2, r17
     3b8:	31 04       	cpc	r3, r1
     3ba:	41 04       	cpc	r4, r1
     3bc:	51 04       	cpc	r5, r1
     3be:	39 f0       	breq	.+14     	; 0x3ce <__umoddi3+0xe8>
     3c0:	30 f0       	brcs	.+12     	; 0x3ce <__umoddi3+0xe8>
     3c2:	88 e0       	ldi	r24, 0x08	; 8
     3c4:	e8 2e       	mov	r14, r24
     3c6:	f1 2c       	mov	r15, r1
     3c8:	01 2d       	mov	r16, r1
     3ca:	11 2d       	mov	r17, r1
     3cc:	18 c0       	rjmp	.+48     	; 0x3fe <__umoddi3+0x118>
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__umoddi3+0x118>
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	24 16       	cp	r2, r20
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	34 06       	cpc	r3, r20
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	44 06       	cpc	r4, r20
     3e2:	41 e0       	ldi	r20, 0x01	; 1
     3e4:	54 06       	cpc	r5, r20
     3e6:	30 f0       	brcs	.+12     	; 0x3f4 <__umoddi3+0x10e>
     3e8:	b8 e1       	ldi	r27, 0x18	; 24
     3ea:	eb 2e       	mov	r14, r27
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 2d       	mov	r16, r1
     3f0:	11 2d       	mov	r17, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__umoddi3+0x118>
     3f4:	a0 e1       	ldi	r26, 0x10	; 16
     3f6:	ea 2e       	mov	r14, r26
     3f8:	f1 2c       	mov	r15, r1
     3fa:	01 2d       	mov	r16, r1
     3fc:	11 2d       	mov	r17, r1
     3fe:	d2 01       	movw	r26, r4
     400:	c1 01       	movw	r24, r2
     402:	0e 2c       	mov	r0, r14
     404:	04 c0       	rjmp	.+8      	; 0x40e <__umoddi3+0x128>
     406:	b6 95       	lsr	r27
     408:	a7 95       	ror	r26
     40a:	97 95       	ror	r25
     40c:	87 95       	ror	r24
     40e:	0a 94       	dec	r0
     410:	d2 f7       	brpl	.-12     	; 0x406 <__umoddi3+0x120>
     412:	81 56       	subi	r24, 0x61	; 97
     414:	9e 4f       	sbci	r25, 0xFE	; 254
     416:	dc 01       	movw	r26, r24
     418:	2c 91       	ld	r18, X
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	8e 19       	sub	r24, r14
     424:	9f 09       	sbc	r25, r15
     426:	a0 0b       	sbc	r26, r16
     428:	b1 0b       	sbc	r27, r17
     42a:	5c 01       	movw	r10, r24
     42c:	6d 01       	movw	r12, r26
     42e:	a2 1a       	sub	r10, r18
     430:	b1 08       	sbc	r11, r1
     432:	c1 08       	sbc	r12, r1
     434:	d1 08       	sbc	r13, r1
     436:	a9 ae       	std	Y+57, r10	; 0x39
     438:	ba ae       	std	Y+58, r11	; 0x3a
     43a:	cb ae       	std	Y+59, r12	; 0x3b
     43c:	dc ae       	std	Y+60, r13	; 0x3c
     43e:	a1 14       	cp	r10, r1
     440:	b1 04       	cpc	r11, r1
     442:	c1 04       	cpc	r12, r1
     444:	d1 04       	cpc	r13, r1
     446:	09 f4       	brne	.+2      	; 0x44a <__umoddi3+0x164>
     448:	3f c0       	rjmp	.+126    	; 0x4c8 <__umoddi3+0x1e2>
     44a:	69 ad       	ldd	r22, Y+57	; 0x39
     44c:	06 2e       	mov	r0, r22
     44e:	04 c0       	rjmp	.+8      	; 0x458 <__umoddi3+0x172>
     450:	22 0c       	add	r2, r2
     452:	33 1c       	adc	r3, r3
     454:	44 1c       	adc	r4, r4
     456:	55 1c       	adc	r5, r5
     458:	0a 94       	dec	r0
     45a:	d2 f7       	brpl	.-12     	; 0x450 <__umoddi3+0x16a>
     45c:	a4 01       	movw	r20, r8
     45e:	93 01       	movw	r18, r6
     460:	06 2e       	mov	r0, r22
     462:	04 c0       	rjmp	.+8      	; 0x46c <__umoddi3+0x186>
     464:	22 0f       	add	r18, r18
     466:	33 1f       	adc	r19, r19
     468:	44 1f       	adc	r20, r20
     46a:	55 1f       	adc	r21, r21
     46c:	0a 94       	dec	r0
     46e:	d2 f7       	brpl	.-12     	; 0x464 <__umoddi3+0x17e>
     470:	80 e2       	ldi	r24, 0x20	; 32
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	8a 19       	sub	r24, r10
     476:	9b 09       	sbc	r25, r11
     478:	6c 96       	adiw	r28, 0x1c	; 28
     47a:	cc ac       	ldd	r12, Y+60	; 0x3c
     47c:	dd ac       	ldd	r13, Y+61	; 0x3d
     47e:	ee ac       	ldd	r14, Y+62	; 0x3e
     480:	ff ac       	ldd	r15, Y+63	; 0x3f
     482:	6c 97       	sbiw	r28, 0x1c	; 28
     484:	04 c0       	rjmp	.+8      	; 0x48e <__umoddi3+0x1a8>
     486:	f6 94       	lsr	r15
     488:	e7 94       	ror	r14
     48a:	d7 94       	ror	r13
     48c:	c7 94       	ror	r12
     48e:	8a 95       	dec	r24
     490:	d2 f7       	brpl	.-12     	; 0x486 <__umoddi3+0x1a0>
     492:	87 01       	movw	r16, r14
     494:	76 01       	movw	r14, r12
     496:	e2 2a       	or	r14, r18
     498:	f3 2a       	or	r15, r19
     49a:	04 2b       	or	r16, r20
     49c:	15 2b       	or	r17, r21
     49e:	ed aa       	std	Y+53, r14	; 0x35
     4a0:	fe aa       	std	Y+54, r15	; 0x36
     4a2:	0f ab       	std	Y+55, r16	; 0x37
     4a4:	18 af       	std	Y+56, r17	; 0x38
     4a6:	6c 96       	adiw	r28, 0x1c	; 28
     4a8:	8c ad       	ldd	r24, Y+60	; 0x3c
     4aa:	9d ad       	ldd	r25, Y+61	; 0x3d
     4ac:	ae ad       	ldd	r26, Y+62	; 0x3e
     4ae:	bf ad       	ldd	r27, Y+63	; 0x3f
     4b0:	6c 97       	sbiw	r28, 0x1c	; 28
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <__umoddi3+0x1d6>
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	aa 1f       	adc	r26, r26
     4ba:	bb 1f       	adc	r27, r27
     4bc:	6a 95       	dec	r22
     4be:	d2 f7       	brpl	.-12     	; 0x4b4 <__umoddi3+0x1ce>
     4c0:	89 ab       	std	Y+49, r24	; 0x31
     4c2:	9a ab       	std	Y+50, r25	; 0x32
     4c4:	ab ab       	std	Y+51, r26	; 0x33
     4c6:	bc ab       	std	Y+52, r27	; 0x34
     4c8:	32 01       	movw	r6, r4
     4ca:	88 24       	eor	r8, r8
     4cc:	99 24       	eor	r9, r9
     4ce:	b2 01       	movw	r22, r4
     4d0:	a1 01       	movw	r20, r2
     4d2:	60 70       	andi	r22, 0x00	; 0
     4d4:	70 70       	andi	r23, 0x00	; 0
     4d6:	21 96       	adiw	r28, 0x01	; 1
     4d8:	4c af       	std	Y+60, r20	; 0x3c
     4da:	5d af       	std	Y+61, r21	; 0x3d
     4dc:	6e af       	std	Y+62, r22	; 0x3e
     4de:	7f af       	std	Y+63, r23	; 0x3f
     4e0:	21 97       	sbiw	r28, 0x01	; 1
     4e2:	6d a9       	ldd	r22, Y+53	; 0x35
     4e4:	7e a9       	ldd	r23, Y+54	; 0x36
     4e6:	8f a9       	ldd	r24, Y+55	; 0x37
     4e8:	98 ad       	ldd	r25, Y+56	; 0x38
     4ea:	a4 01       	movw	r20, r8
     4ec:	93 01       	movw	r18, r6
     4ee:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     4f2:	7b 01       	movw	r14, r22
     4f4:	8c 01       	movw	r16, r24
     4f6:	6d a9       	ldd	r22, Y+53	; 0x35
     4f8:	7e a9       	ldd	r23, Y+54	; 0x36
     4fa:	8f a9       	ldd	r24, Y+55	; 0x37
     4fc:	98 ad       	ldd	r25, Y+56	; 0x38
     4fe:	a4 01       	movw	r20, r8
     500:	93 01       	movw	r18, r6
     502:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     506:	ca 01       	movw	r24, r20
     508:	b9 01       	movw	r22, r18
     50a:	21 96       	adiw	r28, 0x01	; 1
     50c:	2c ad       	ldd	r18, Y+60	; 0x3c
     50e:	3d ad       	ldd	r19, Y+61	; 0x3d
     510:	4e ad       	ldd	r20, Y+62	; 0x3e
     512:	5f ad       	ldd	r21, Y+63	; 0x3f
     514:	21 97       	sbiw	r28, 0x01	; 1
     516:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	87 01       	movw	r16, r14
     520:	ff 24       	eor	r15, r15
     522:	ee 24       	eor	r14, r14
     524:	a9 a8       	ldd	r10, Y+49	; 0x31
     526:	ba a8       	ldd	r11, Y+50	; 0x32
     528:	cb a8       	ldd	r12, Y+51	; 0x33
     52a:	dc a8       	ldd	r13, Y+52	; 0x34
     52c:	c6 01       	movw	r24, r12
     52e:	aa 27       	eor	r26, r26
     530:	bb 27       	eor	r27, r27
     532:	57 01       	movw	r10, r14
     534:	68 01       	movw	r12, r16
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	a2 16       	cp	r10, r18
     540:	b3 06       	cpc	r11, r19
     542:	c4 06       	cpc	r12, r20
     544:	d5 06       	cpc	r13, r21
     546:	90 f4       	brcc	.+36     	; 0x56c <__umoddi3+0x286>
     548:	a2 0c       	add	r10, r2
     54a:	b3 1c       	adc	r11, r3
     54c:	c4 1c       	adc	r12, r4
     54e:	d5 1c       	adc	r13, r5
     550:	a2 14       	cp	r10, r2
     552:	b3 04       	cpc	r11, r3
     554:	c4 04       	cpc	r12, r4
     556:	d5 04       	cpc	r13, r5
     558:	48 f0       	brcs	.+18     	; 0x56c <__umoddi3+0x286>
     55a:	a2 16       	cp	r10, r18
     55c:	b3 06       	cpc	r11, r19
     55e:	c4 06       	cpc	r12, r20
     560:	d5 06       	cpc	r13, r21
     562:	20 f4       	brcc	.+8      	; 0x56c <__umoddi3+0x286>
     564:	a2 0c       	add	r10, r2
     566:	b3 1c       	adc	r11, r3
     568:	c4 1c       	adc	r12, r4
     56a:	d5 1c       	adc	r13, r5
     56c:	a2 1a       	sub	r10, r18
     56e:	b3 0a       	sbc	r11, r19
     570:	c4 0a       	sbc	r12, r20
     572:	d5 0a       	sbc	r13, r21
     574:	c6 01       	movw	r24, r12
     576:	b5 01       	movw	r22, r10
     578:	a4 01       	movw	r20, r8
     57a:	93 01       	movw	r18, r6
     57c:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     580:	7b 01       	movw	r14, r22
     582:	8c 01       	movw	r16, r24
     584:	c6 01       	movw	r24, r12
     586:	b5 01       	movw	r22, r10
     588:	a4 01       	movw	r20, r8
     58a:	93 01       	movw	r18, r6
     58c:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     590:	ca 01       	movw	r24, r20
     592:	b9 01       	movw	r22, r18
     594:	21 96       	adiw	r28, 0x01	; 1
     596:	2c ad       	ldd	r18, Y+60	; 0x3c
     598:	3d ad       	ldd	r19, Y+61	; 0x3d
     59a:	4e ad       	ldd	r20, Y+62	; 0x3e
     59c:	5f ad       	ldd	r21, Y+63	; 0x3f
     59e:	21 97       	sbiw	r28, 0x01	; 1
     5a0:	ba c1       	rjmp	.+884    	; 0x916 <__stack+0xb7>
     5a2:	21 14       	cp	r2, r1
     5a4:	31 04       	cpc	r3, r1
     5a6:	41 04       	cpc	r4, r1
     5a8:	51 04       	cpc	r5, r1
     5aa:	71 f4       	brne	.+28     	; 0x5c8 <__umoddi3+0x2e2>
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     5c0:	c9 01       	movw	r24, r18
     5c2:	da 01       	movw	r26, r20
     5c4:	1c 01       	movw	r2, r24
     5c6:	2d 01       	movw	r4, r26
     5c8:	00 e0       	ldi	r16, 0x00	; 0
     5ca:	20 16       	cp	r2, r16
     5cc:	00 e0       	ldi	r16, 0x00	; 0
     5ce:	30 06       	cpc	r3, r16
     5d0:	01 e0       	ldi	r16, 0x01	; 1
     5d2:	40 06       	cpc	r4, r16
     5d4:	00 e0       	ldi	r16, 0x00	; 0
     5d6:	50 06       	cpc	r5, r16
     5d8:	88 f4       	brcc	.+34     	; 0x5fc <__umoddi3+0x316>
     5da:	1f ef       	ldi	r17, 0xFF	; 255
     5dc:	21 16       	cp	r2, r17
     5de:	31 04       	cpc	r3, r1
     5e0:	41 04       	cpc	r4, r1
     5e2:	51 04       	cpc	r5, r1
     5e4:	39 f0       	breq	.+14     	; 0x5f4 <__umoddi3+0x30e>
     5e6:	30 f0       	brcs	.+12     	; 0x5f4 <__umoddi3+0x30e>
     5e8:	68 e0       	ldi	r22, 0x08	; 8
     5ea:	e6 2e       	mov	r14, r22
     5ec:	f1 2c       	mov	r15, r1
     5ee:	01 2d       	mov	r16, r1
     5f0:	11 2d       	mov	r17, r1
     5f2:	18 c0       	rjmp	.+48     	; 0x624 <__umoddi3+0x33e>
     5f4:	ee 24       	eor	r14, r14
     5f6:	ff 24       	eor	r15, r15
     5f8:	87 01       	movw	r16, r14
     5fa:	14 c0       	rjmp	.+40     	; 0x624 <__umoddi3+0x33e>
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	24 16       	cp	r2, r20
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	34 06       	cpc	r3, r20
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	44 06       	cpc	r4, r20
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	54 06       	cpc	r5, r20
     60c:	30 f0       	brcs	.+12     	; 0x61a <__umoddi3+0x334>
     60e:	58 e1       	ldi	r21, 0x18	; 24
     610:	e5 2e       	mov	r14, r21
     612:	f1 2c       	mov	r15, r1
     614:	01 2d       	mov	r16, r1
     616:	11 2d       	mov	r17, r1
     618:	05 c0       	rjmp	.+10     	; 0x624 <__umoddi3+0x33e>
     61a:	40 e1       	ldi	r20, 0x10	; 16
     61c:	e4 2e       	mov	r14, r20
     61e:	f1 2c       	mov	r15, r1
     620:	01 2d       	mov	r16, r1
     622:	11 2d       	mov	r17, r1
     624:	d2 01       	movw	r26, r4
     626:	c1 01       	movw	r24, r2
     628:	0e 2c       	mov	r0, r14
     62a:	04 c0       	rjmp	.+8      	; 0x634 <__umoddi3+0x34e>
     62c:	b6 95       	lsr	r27
     62e:	a7 95       	ror	r26
     630:	97 95       	ror	r25
     632:	87 95       	ror	r24
     634:	0a 94       	dec	r0
     636:	d2 f7       	brpl	.-12     	; 0x62c <__umoddi3+0x346>
     638:	81 56       	subi	r24, 0x61	; 97
     63a:	9e 4f       	sbci	r25, 0xFE	; 254
     63c:	dc 01       	movw	r26, r24
     63e:	2c 91       	ld	r18, X
     640:	30 e2       	ldi	r19, 0x20	; 32
     642:	a3 2e       	mov	r10, r19
     644:	b1 2c       	mov	r11, r1
     646:	c1 2c       	mov	r12, r1
     648:	d1 2c       	mov	r13, r1
     64a:	d6 01       	movw	r26, r12
     64c:	c5 01       	movw	r24, r10
     64e:	8e 19       	sub	r24, r14
     650:	9f 09       	sbc	r25, r15
     652:	a0 0b       	sbc	r26, r16
     654:	b1 0b       	sbc	r27, r17
     656:	7c 01       	movw	r14, r24
     658:	8d 01       	movw	r16, r26
     65a:	e2 1a       	sub	r14, r18
     65c:	f1 08       	sbc	r15, r1
     65e:	01 09       	sbc	r16, r1
     660:	11 09       	sbc	r17, r1
     662:	e9 ae       	std	Y+57, r14	; 0x39
     664:	fa ae       	std	Y+58, r15	; 0x3a
     666:	0b af       	std	Y+59, r16	; 0x3b
     668:	1c af       	std	Y+60, r17	; 0x3c
     66a:	e1 14       	cp	r14, r1
     66c:	f1 04       	cpc	r15, r1
     66e:	01 05       	cpc	r16, r1
     670:	11 05       	cpc	r17, r1
     672:	39 f4       	brne	.+14     	; 0x682 <__umoddi3+0x39c>
     674:	64 01       	movw	r12, r8
     676:	53 01       	movw	r10, r6
     678:	a2 18       	sub	r10, r2
     67a:	b3 08       	sbc	r11, r3
     67c:	c4 08       	sbc	r12, r4
     67e:	d5 08       	sbc	r13, r5
     680:	e2 c0       	rjmp	.+452    	; 0x846 <__umoddi3+0x560>
     682:	f9 ac       	ldd	r15, Y+57	; 0x39
     684:	68 96       	adiw	r28, 0x18	; 24
     686:	ff ae       	std	Y+63, r15	; 0x3f
     688:	68 97       	sbiw	r28, 0x18	; 24
     68a:	0f 2c       	mov	r0, r15
     68c:	04 c0       	rjmp	.+8      	; 0x696 <__umoddi3+0x3b0>
     68e:	22 0c       	add	r2, r2
     690:	33 1c       	adc	r3, r3
     692:	44 1c       	adc	r4, r4
     694:	55 1c       	adc	r5, r5
     696:	0a 94       	dec	r0
     698:	d2 f7       	brpl	.-12     	; 0x68e <__umoddi3+0x3a8>
     69a:	8a 2d       	mov	r24, r10
     69c:	8f 19       	sub	r24, r15
     69e:	64 01       	movw	r12, r8
     6a0:	53 01       	movw	r10, r6
     6a2:	08 2e       	mov	r0, r24
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <__umoddi3+0x3c8>
     6a6:	d6 94       	lsr	r13
     6a8:	c7 94       	ror	r12
     6aa:	b7 94       	ror	r11
     6ac:	a7 94       	ror	r10
     6ae:	0a 94       	dec	r0
     6b0:	d2 f7       	brpl	.-12     	; 0x6a6 <__umoddi3+0x3c0>
     6b2:	a4 01       	movw	r20, r8
     6b4:	93 01       	movw	r18, r6
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__umoddi3+0x3da>
     6b8:	22 0f       	add	r18, r18
     6ba:	33 1f       	adc	r19, r19
     6bc:	44 1f       	adc	r20, r20
     6be:	55 1f       	adc	r21, r21
     6c0:	fa 94       	dec	r15
     6c2:	d2 f7       	brpl	.-12     	; 0x6b8 <__umoddi3+0x3d2>
     6c4:	6c 96       	adiw	r28, 0x1c	; 28
     6c6:	6c ac       	ldd	r6, Y+60	; 0x3c
     6c8:	7d ac       	ldd	r7, Y+61	; 0x3d
     6ca:	8e ac       	ldd	r8, Y+62	; 0x3e
     6cc:	9f ac       	ldd	r9, Y+63	; 0x3f
     6ce:	6c 97       	sbiw	r28, 0x1c	; 28
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <__umoddi3+0x3f4>
     6d2:	96 94       	lsr	r9
     6d4:	87 94       	ror	r8
     6d6:	77 94       	ror	r7
     6d8:	67 94       	ror	r6
     6da:	8a 95       	dec	r24
     6dc:	d2 f7       	brpl	.-12     	; 0x6d2 <__umoddi3+0x3ec>
     6de:	84 01       	movw	r16, r8
     6e0:	73 01       	movw	r14, r6
     6e2:	e2 2a       	or	r14, r18
     6e4:	f3 2a       	or	r15, r19
     6e6:	04 2b       	or	r16, r20
     6e8:	15 2b       	or	r17, r21
     6ea:	ed a6       	std	Y+45, r14	; 0x2d
     6ec:	fe a6       	std	Y+46, r15	; 0x2e
     6ee:	0f a7       	std	Y+47, r16	; 0x2f
     6f0:	18 ab       	std	Y+48, r17	; 0x30
     6f2:	32 01       	movw	r6, r4
     6f4:	88 24       	eor	r8, r8
     6f6:	99 24       	eor	r9, r9
     6f8:	b2 01       	movw	r22, r4
     6fa:	a1 01       	movw	r20, r2
     6fc:	60 70       	andi	r22, 0x00	; 0
     6fe:	70 70       	andi	r23, 0x00	; 0
     700:	25 96       	adiw	r28, 0x05	; 5
     702:	4c af       	std	Y+60, r20	; 0x3c
     704:	5d af       	std	Y+61, r21	; 0x3d
     706:	6e af       	std	Y+62, r22	; 0x3e
     708:	7f af       	std	Y+63, r23	; 0x3f
     70a:	25 97       	sbiw	r28, 0x05	; 5
     70c:	c6 01       	movw	r24, r12
     70e:	b5 01       	movw	r22, r10
     710:	a4 01       	movw	r20, r8
     712:	93 01       	movw	r18, r6
     714:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     718:	7b 01       	movw	r14, r22
     71a:	8c 01       	movw	r16, r24
     71c:	c6 01       	movw	r24, r12
     71e:	b5 01       	movw	r22, r10
     720:	a4 01       	movw	r20, r8
     722:	93 01       	movw	r18, r6
     724:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     728:	ca 01       	movw	r24, r20
     72a:	b9 01       	movw	r22, r18
     72c:	25 96       	adiw	r28, 0x05	; 5
     72e:	2c ad       	ldd	r18, Y+60	; 0x3c
     730:	3d ad       	ldd	r19, Y+61	; 0x3d
     732:	4e ad       	ldd	r20, Y+62	; 0x3e
     734:	5f ad       	ldd	r21, Y+63	; 0x3f
     736:	25 97       	sbiw	r28, 0x05	; 5
     738:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	87 01       	movw	r16, r14
     742:	ff 24       	eor	r15, r15
     744:	ee 24       	eor	r14, r14
     746:	ad a4       	ldd	r10, Y+45	; 0x2d
     748:	be a4       	ldd	r11, Y+46	; 0x2e
     74a:	cf a4       	ldd	r12, Y+47	; 0x2f
     74c:	d8 a8       	ldd	r13, Y+48	; 0x30
     74e:	c6 01       	movw	r24, r12
     750:	aa 27       	eor	r26, r26
     752:	bb 27       	eor	r27, r27
     754:	5c 01       	movw	r10, r24
     756:	6d 01       	movw	r12, r26
     758:	ae 28       	or	r10, r14
     75a:	bf 28       	or	r11, r15
     75c:	c0 2a       	or	r12, r16
     75e:	d1 2a       	or	r13, r17
     760:	a2 16       	cp	r10, r18
     762:	b3 06       	cpc	r11, r19
     764:	c4 06       	cpc	r12, r20
     766:	d5 06       	cpc	r13, r21
     768:	90 f4       	brcc	.+36     	; 0x78e <__umoddi3+0x4a8>
     76a:	a2 0c       	add	r10, r2
     76c:	b3 1c       	adc	r11, r3
     76e:	c4 1c       	adc	r12, r4
     770:	d5 1c       	adc	r13, r5
     772:	a2 14       	cp	r10, r2
     774:	b3 04       	cpc	r11, r3
     776:	c4 04       	cpc	r12, r4
     778:	d5 04       	cpc	r13, r5
     77a:	48 f0       	brcs	.+18     	; 0x78e <__umoddi3+0x4a8>
     77c:	a2 16       	cp	r10, r18
     77e:	b3 06       	cpc	r11, r19
     780:	c4 06       	cpc	r12, r20
     782:	d5 06       	cpc	r13, r21
     784:	20 f4       	brcc	.+8      	; 0x78e <__umoddi3+0x4a8>
     786:	a2 0c       	add	r10, r2
     788:	b3 1c       	adc	r11, r3
     78a:	c4 1c       	adc	r12, r4
     78c:	d5 1c       	adc	r13, r5
     78e:	a2 1a       	sub	r10, r18
     790:	b3 0a       	sbc	r11, r19
     792:	c4 0a       	sbc	r12, r20
     794:	d5 0a       	sbc	r13, r21
     796:	c6 01       	movw	r24, r12
     798:	b5 01       	movw	r22, r10
     79a:	a4 01       	movw	r20, r8
     79c:	93 01       	movw	r18, r6
     79e:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     7a2:	7b 01       	movw	r14, r22
     7a4:	8c 01       	movw	r16, r24
     7a6:	c6 01       	movw	r24, r12
     7a8:	b5 01       	movw	r22, r10
     7aa:	a4 01       	movw	r20, r8
     7ac:	93 01       	movw	r18, r6
     7ae:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     7b2:	ca 01       	movw	r24, r20
     7b4:	b9 01       	movw	r22, r18
     7b6:	25 96       	adiw	r28, 0x05	; 5
     7b8:	2c ad       	ldd	r18, Y+60	; 0x3c
     7ba:	3d ad       	ldd	r19, Y+61	; 0x3d
     7bc:	4e ad       	ldd	r20, Y+62	; 0x3e
     7be:	5f ad       	ldd	r21, Y+63	; 0x3f
     7c0:	25 97       	sbiw	r28, 0x05	; 5
     7c2:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     7c6:	9b 01       	movw	r18, r22
     7c8:	ac 01       	movw	r20, r24
     7ca:	87 01       	movw	r16, r14
     7cc:	ff 24       	eor	r15, r15
     7ce:	ee 24       	eor	r14, r14
     7d0:	8d a5       	ldd	r24, Y+45	; 0x2d
     7d2:	9e a5       	ldd	r25, Y+46	; 0x2e
     7d4:	af a5       	ldd	r26, Y+47	; 0x2f
     7d6:	b8 a9       	ldd	r27, Y+48	; 0x30
     7d8:	a0 70       	andi	r26, 0x00	; 0
     7da:	b0 70       	andi	r27, 0x00	; 0
     7dc:	57 01       	movw	r10, r14
     7de:	68 01       	movw	r12, r16
     7e0:	a8 2a       	or	r10, r24
     7e2:	b9 2a       	or	r11, r25
     7e4:	ca 2a       	or	r12, r26
     7e6:	db 2a       	or	r13, r27
     7e8:	a2 16       	cp	r10, r18
     7ea:	b3 06       	cpc	r11, r19
     7ec:	c4 06       	cpc	r12, r20
     7ee:	d5 06       	cpc	r13, r21
     7f0:	90 f4       	brcc	.+36     	; 0x816 <__umoddi3+0x530>
     7f2:	a2 0c       	add	r10, r2
     7f4:	b3 1c       	adc	r11, r3
     7f6:	c4 1c       	adc	r12, r4
     7f8:	d5 1c       	adc	r13, r5
     7fa:	a2 14       	cp	r10, r2
     7fc:	b3 04       	cpc	r11, r3
     7fe:	c4 04       	cpc	r12, r4
     800:	d5 04       	cpc	r13, r5
     802:	48 f0       	brcs	.+18     	; 0x816 <__umoddi3+0x530>
     804:	a2 16       	cp	r10, r18
     806:	b3 06       	cpc	r11, r19
     808:	c4 06       	cpc	r12, r20
     80a:	d5 06       	cpc	r13, r21
     80c:	20 f4       	brcc	.+8      	; 0x816 <__umoddi3+0x530>
     80e:	a2 0c       	add	r10, r2
     810:	b3 1c       	adc	r11, r3
     812:	c4 1c       	adc	r12, r4
     814:	d5 1c       	adc	r13, r5
     816:	6c 96       	adiw	r28, 0x1c	; 28
     818:	ec ac       	ldd	r14, Y+60	; 0x3c
     81a:	fd ac       	ldd	r15, Y+61	; 0x3d
     81c:	0e ad       	ldd	r16, Y+62	; 0x3e
     81e:	1f ad       	ldd	r17, Y+63	; 0x3f
     820:	6c 97       	sbiw	r28, 0x1c	; 28
     822:	68 96       	adiw	r28, 0x18	; 24
     824:	0f ac       	ldd	r0, Y+63	; 0x3f
     826:	68 97       	sbiw	r28, 0x18	; 24
     828:	04 c0       	rjmp	.+8      	; 0x832 <__umoddi3+0x54c>
     82a:	ee 0c       	add	r14, r14
     82c:	ff 1c       	adc	r15, r15
     82e:	00 1f       	adc	r16, r16
     830:	11 1f       	adc	r17, r17
     832:	0a 94       	dec	r0
     834:	d2 f7       	brpl	.-12     	; 0x82a <__umoddi3+0x544>
     836:	e9 aa       	std	Y+49, r14	; 0x31
     838:	fa aa       	std	Y+50, r15	; 0x32
     83a:	0b ab       	std	Y+51, r16	; 0x33
     83c:	1c ab       	std	Y+52, r17	; 0x34
     83e:	a2 1a       	sub	r10, r18
     840:	b3 0a       	sbc	r11, r19
     842:	c4 0a       	sbc	r12, r20
     844:	d5 0a       	sbc	r13, r21
     846:	32 01       	movw	r6, r4
     848:	88 24       	eor	r8, r8
     84a:	99 24       	eor	r9, r9
     84c:	b2 01       	movw	r22, r4
     84e:	a1 01       	movw	r20, r2
     850:	60 70       	andi	r22, 0x00	; 0
     852:	70 70       	andi	r23, 0x00	; 0
     854:	29 96       	adiw	r28, 0x09	; 9
     856:	4c af       	std	Y+60, r20	; 0x3c
     858:	5d af       	std	Y+61, r21	; 0x3d
     85a:	6e af       	std	Y+62, r22	; 0x3e
     85c:	7f af       	std	Y+63, r23	; 0x3f
     85e:	29 97       	sbiw	r28, 0x09	; 9
     860:	c6 01       	movw	r24, r12
     862:	b5 01       	movw	r22, r10
     864:	a4 01       	movw	r20, r8
     866:	93 01       	movw	r18, r6
     868:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     86c:	7b 01       	movw	r14, r22
     86e:	8c 01       	movw	r16, r24
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a4 01       	movw	r20, r8
     876:	93 01       	movw	r18, r6
     878:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     87c:	ca 01       	movw	r24, r20
     87e:	b9 01       	movw	r22, r18
     880:	29 96       	adiw	r28, 0x09	; 9
     882:	2c ad       	ldd	r18, Y+60	; 0x3c
     884:	3d ad       	ldd	r19, Y+61	; 0x3d
     886:	4e ad       	ldd	r20, Y+62	; 0x3e
     888:	5f ad       	ldd	r21, Y+63	; 0x3f
     88a:	29 97       	sbiw	r28, 0x09	; 9
     88c:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	87 01       	movw	r16, r14
     896:	ff 24       	eor	r15, r15
     898:	ee 24       	eor	r14, r14
     89a:	a9 a8       	ldd	r10, Y+49	; 0x31
     89c:	ba a8       	ldd	r11, Y+50	; 0x32
     89e:	cb a8       	ldd	r12, Y+51	; 0x33
     8a0:	dc a8       	ldd	r13, Y+52	; 0x34
     8a2:	c6 01       	movw	r24, r12
     8a4:	aa 27       	eor	r26, r26
     8a6:	bb 27       	eor	r27, r27
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	a8 2a       	or	r10, r24
     8ae:	b9 2a       	or	r11, r25
     8b0:	ca 2a       	or	r12, r26
     8b2:	db 2a       	or	r13, r27
     8b4:	a2 16       	cp	r10, r18
     8b6:	b3 06       	cpc	r11, r19
     8b8:	c4 06       	cpc	r12, r20
     8ba:	d5 06       	cpc	r13, r21
     8bc:	90 f4       	brcc	.+36     	; 0x8e2 <__stack+0x83>
     8be:	a2 0c       	add	r10, r2
     8c0:	b3 1c       	adc	r11, r3
     8c2:	c4 1c       	adc	r12, r4
     8c4:	d5 1c       	adc	r13, r5
     8c6:	a2 14       	cp	r10, r2
     8c8:	b3 04       	cpc	r11, r3
     8ca:	c4 04       	cpc	r12, r4
     8cc:	d5 04       	cpc	r13, r5
     8ce:	48 f0       	brcs	.+18     	; 0x8e2 <__stack+0x83>
     8d0:	a2 16       	cp	r10, r18
     8d2:	b3 06       	cpc	r11, r19
     8d4:	c4 06       	cpc	r12, r20
     8d6:	d5 06       	cpc	r13, r21
     8d8:	20 f4       	brcc	.+8      	; 0x8e2 <__stack+0x83>
     8da:	a2 0c       	add	r10, r2
     8dc:	b3 1c       	adc	r11, r3
     8de:	c4 1c       	adc	r12, r4
     8e0:	d5 1c       	adc	r13, r5
     8e2:	a2 1a       	sub	r10, r18
     8e4:	b3 0a       	sbc	r11, r19
     8e6:	c4 0a       	sbc	r12, r20
     8e8:	d5 0a       	sbc	r13, r21
     8ea:	c6 01       	movw	r24, r12
     8ec:	b5 01       	movw	r22, r10
     8ee:	a4 01       	movw	r20, r8
     8f0:	93 01       	movw	r18, r6
     8f2:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     8f6:	7b 01       	movw	r14, r22
     8f8:	8c 01       	movw	r16, r24
     8fa:	c6 01       	movw	r24, r12
     8fc:	b5 01       	movw	r22, r10
     8fe:	a4 01       	movw	r20, r8
     900:	93 01       	movw	r18, r6
     902:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     906:	ca 01       	movw	r24, r20
     908:	b9 01       	movw	r22, r18
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	87 01       	movw	r16, r14
     920:	ff 24       	eor	r15, r15
     922:	ee 24       	eor	r14, r14
     924:	89 a9       	ldd	r24, Y+49	; 0x31
     926:	9a a9       	ldd	r25, Y+50	; 0x32
     928:	ab a9       	ldd	r26, Y+51	; 0x33
     92a:	bc a9       	ldd	r27, Y+52	; 0x34
     92c:	a0 70       	andi	r26, 0x00	; 0
     92e:	b0 70       	andi	r27, 0x00	; 0
     930:	e8 2a       	or	r14, r24
     932:	f9 2a       	or	r15, r25
     934:	0a 2b       	or	r16, r26
     936:	1b 2b       	or	r17, r27
     938:	e2 16       	cp	r14, r18
     93a:	f3 06       	cpc	r15, r19
     93c:	04 07       	cpc	r16, r20
     93e:	15 07       	cpc	r17, r21
     940:	90 f4       	brcc	.+36     	; 0x966 <__stack+0x107>
     942:	e2 0c       	add	r14, r2
     944:	f3 1c       	adc	r15, r3
     946:	04 1d       	adc	r16, r4
     948:	15 1d       	adc	r17, r5
     94a:	e2 14       	cp	r14, r2
     94c:	f3 04       	cpc	r15, r3
     94e:	04 05       	cpc	r16, r4
     950:	15 05       	cpc	r17, r5
     952:	48 f0       	brcs	.+18     	; 0x966 <__stack+0x107>
     954:	e2 16       	cp	r14, r18
     956:	f3 06       	cpc	r15, r19
     958:	04 07       	cpc	r16, r20
     95a:	15 07       	cpc	r17, r21
     95c:	20 f4       	brcc	.+8      	; 0x966 <__stack+0x107>
     95e:	e2 0c       	add	r14, r2
     960:	f3 1c       	adc	r15, r3
     962:	04 1d       	adc	r16, r4
     964:	15 1d       	adc	r17, r5
     966:	e2 1a       	sub	r14, r18
     968:	f3 0a       	sbc	r15, r19
     96a:	04 0b       	sbc	r16, r20
     96c:	15 0b       	sbc	r17, r21
     96e:	d8 01       	movw	r26, r16
     970:	c7 01       	movw	r24, r14
     972:	09 ac       	ldd	r0, Y+57	; 0x39
     974:	04 c0       	rjmp	.+8      	; 0x97e <__stack+0x11f>
     976:	b6 95       	lsr	r27
     978:	a7 95       	ror	r26
     97a:	97 95       	ror	r25
     97c:	87 95       	ror	r24
     97e:	0a 94       	dec	r0
     980:	d2 f7       	brpl	.-12     	; 0x976 <__stack+0x117>
     982:	89 8b       	std	Y+17, r24	; 0x11
     984:	9a 8b       	std	Y+18, r25	; 0x12
     986:	ab 8b       	std	Y+19, r26	; 0x13
     988:	bc 8b       	std	Y+20, r27	; 0x14
     98a:	1d 8a       	std	Y+21, r1	; 0x15
     98c:	1e 8a       	std	Y+22, r1	; 0x16
     98e:	1f 8a       	std	Y+23, r1	; 0x17
     990:	18 8e       	std	Y+24, r1	; 0x18
     992:	28 2f       	mov	r18, r24
     994:	3a 89       	ldd	r19, Y+18	; 0x12
     996:	4b 89       	ldd	r20, Y+19	; 0x13
     998:	5c 89       	ldd	r21, Y+20	; 0x14
     99a:	6d 89       	ldd	r22, Y+21	; 0x15
     99c:	0c c3       	rjmp	.+1560   	; 0xfb6 <__stack+0x757>
     99e:	6a 14       	cp	r6, r10
     9a0:	7b 04       	cpc	r7, r11
     9a2:	8c 04       	cpc	r8, r12
     9a4:	9d 04       	cpc	r9, r13
     9a6:	08 f4       	brcc	.+2      	; 0x9aa <__stack+0x14b>
     9a8:	09 c3       	rjmp	.+1554   	; 0xfbc <__stack+0x75d>
     9aa:	00 e0       	ldi	r16, 0x00	; 0
     9ac:	a0 16       	cp	r10, r16
     9ae:	00 e0       	ldi	r16, 0x00	; 0
     9b0:	b0 06       	cpc	r11, r16
     9b2:	01 e0       	ldi	r16, 0x01	; 1
     9b4:	c0 06       	cpc	r12, r16
     9b6:	00 e0       	ldi	r16, 0x00	; 0
     9b8:	d0 06       	cpc	r13, r16
     9ba:	88 f4       	brcc	.+34     	; 0x9de <__stack+0x17f>
     9bc:	1f ef       	ldi	r17, 0xFF	; 255
     9be:	a1 16       	cp	r10, r17
     9c0:	b1 04       	cpc	r11, r1
     9c2:	c1 04       	cpc	r12, r1
     9c4:	d1 04       	cpc	r13, r1
     9c6:	39 f0       	breq	.+14     	; 0x9d6 <__stack+0x177>
     9c8:	30 f0       	brcs	.+12     	; 0x9d6 <__stack+0x177>
     9ca:	28 e0       	ldi	r18, 0x08	; 8
     9cc:	e2 2e       	mov	r14, r18
     9ce:	f1 2c       	mov	r15, r1
     9d0:	01 2d       	mov	r16, r1
     9d2:	11 2d       	mov	r17, r1
     9d4:	18 c0       	rjmp	.+48     	; 0xa06 <__stack+0x1a7>
     9d6:	ee 24       	eor	r14, r14
     9d8:	ff 24       	eor	r15, r15
     9da:	87 01       	movw	r16, r14
     9dc:	14 c0       	rjmp	.+40     	; 0xa06 <__stack+0x1a7>
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	a4 16       	cp	r10, r20
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	b4 06       	cpc	r11, r20
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	c4 06       	cpc	r12, r20
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	d4 06       	cpc	r13, r20
     9ee:	30 f0       	brcs	.+12     	; 0x9fc <__stack+0x19d>
     9f0:	98 e1       	ldi	r25, 0x18	; 24
     9f2:	e9 2e       	mov	r14, r25
     9f4:	f1 2c       	mov	r15, r1
     9f6:	01 2d       	mov	r16, r1
     9f8:	11 2d       	mov	r17, r1
     9fa:	05 c0       	rjmp	.+10     	; 0xa06 <__stack+0x1a7>
     9fc:	80 e1       	ldi	r24, 0x10	; 16
     9fe:	e8 2e       	mov	r14, r24
     a00:	f1 2c       	mov	r15, r1
     a02:	01 2d       	mov	r16, r1
     a04:	11 2d       	mov	r17, r1
     a06:	d6 01       	movw	r26, r12
     a08:	c5 01       	movw	r24, r10
     a0a:	0e 2c       	mov	r0, r14
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__stack+0x1b7>
     a0e:	b6 95       	lsr	r27
     a10:	a7 95       	ror	r26
     a12:	97 95       	ror	r25
     a14:	87 95       	ror	r24
     a16:	0a 94       	dec	r0
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__stack+0x1af>
     a1a:	81 56       	subi	r24, 0x61	; 97
     a1c:	9e 4f       	sbci	r25, 0xFE	; 254
     a1e:	dc 01       	movw	r26, r24
     a20:	2c 91       	ld	r18, X
     a22:	80 e2       	ldi	r24, 0x20	; 32
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	a0 e0       	ldi	r26, 0x00	; 0
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	8e 19       	sub	r24, r14
     a2c:	9f 09       	sbc	r25, r15
     a2e:	a0 0b       	sbc	r26, r16
     a30:	b1 0b       	sbc	r27, r17
     a32:	82 1b       	sub	r24, r18
     a34:	91 09       	sbc	r25, r1
     a36:	a1 09       	sbc	r26, r1
     a38:	b1 09       	sbc	r27, r1
     a3a:	00 97       	sbiw	r24, 0x00	; 0
     a3c:	a1 05       	cpc	r26, r1
     a3e:	b1 05       	cpc	r27, r1
     a40:	09 f0       	breq	.+2      	; 0xa44 <__stack+0x1e5>
     a42:	4f c0       	rjmp	.+158    	; 0xae2 <__stack+0x283>
     a44:	a6 14       	cp	r10, r6
     a46:	b7 04       	cpc	r11, r7
     a48:	c8 04       	cpc	r12, r8
     a4a:	d9 04       	cpc	r13, r9
     a4c:	58 f0       	brcs	.+22     	; 0xa64 <__stack+0x205>
     a4e:	6c 96       	adiw	r28, 0x1c	; 28
     a50:	ec ac       	ldd	r14, Y+60	; 0x3c
     a52:	fd ac       	ldd	r15, Y+61	; 0x3d
     a54:	0e ad       	ldd	r16, Y+62	; 0x3e
     a56:	1f ad       	ldd	r17, Y+63	; 0x3f
     a58:	6c 97       	sbiw	r28, 0x1c	; 28
     a5a:	e2 14       	cp	r14, r2
     a5c:	f3 04       	cpc	r15, r3
     a5e:	04 05       	cpc	r16, r4
     a60:	15 05       	cpc	r17, r5
     a62:	68 f1       	brcs	.+90     	; 0xabe <__stack+0x25f>
     a64:	6c 96       	adiw	r28, 0x1c	; 28
     a66:	ec ac       	ldd	r14, Y+60	; 0x3c
     a68:	fd ac       	ldd	r15, Y+61	; 0x3d
     a6a:	0e ad       	ldd	r16, Y+62	; 0x3e
     a6c:	1f ad       	ldd	r17, Y+63	; 0x3f
     a6e:	6c 97       	sbiw	r28, 0x1c	; 28
     a70:	e2 18       	sub	r14, r2
     a72:	f3 08       	sbc	r15, r3
     a74:	04 09       	sbc	r16, r4
     a76:	15 09       	sbc	r17, r5
     a78:	a4 01       	movw	r20, r8
     a7a:	93 01       	movw	r18, r6
     a7c:	2a 19       	sub	r18, r10
     a7e:	3b 09       	sbc	r19, r11
     a80:	4c 09       	sbc	r20, r12
     a82:	5d 09       	sbc	r21, r13
     a84:	aa 24       	eor	r10, r10
     a86:	bb 24       	eor	r11, r11
     a88:	65 01       	movw	r12, r10
     a8a:	6c 96       	adiw	r28, 0x1c	; 28
     a8c:	6c ad       	ldd	r22, Y+60	; 0x3c
     a8e:	7d ad       	ldd	r23, Y+61	; 0x3d
     a90:	8e ad       	ldd	r24, Y+62	; 0x3e
     a92:	9f ad       	ldd	r25, Y+63	; 0x3f
     a94:	6c 97       	sbiw	r28, 0x1c	; 28
     a96:	6e 15       	cp	r22, r14
     a98:	7f 05       	cpc	r23, r15
     a9a:	80 07       	cpc	r24, r16
     a9c:	91 07       	cpc	r25, r17
     a9e:	28 f4       	brcc	.+10     	; 0xaaa <__stack+0x24b>
     aa0:	b1 e0       	ldi	r27, 0x01	; 1
     aa2:	ab 2e       	mov	r10, r27
     aa4:	b1 2c       	mov	r11, r1
     aa6:	c1 2c       	mov	r12, r1
     aa8:	d1 2c       	mov	r13, r1
     aaa:	da 01       	movw	r26, r20
     aac:	c9 01       	movw	r24, r18
     aae:	8a 19       	sub	r24, r10
     ab0:	9b 09       	sbc	r25, r11
     ab2:	ac 09       	sbc	r26, r12
     ab4:	bd 09       	sbc	r27, r13
     ab6:	8d ab       	std	Y+53, r24	; 0x35
     ab8:	9e ab       	std	Y+54, r25	; 0x36
     aba:	af ab       	std	Y+55, r26	; 0x37
     abc:	b8 af       	std	Y+56, r27	; 0x38
     abe:	e9 8a       	std	Y+17, r14	; 0x11
     ac0:	fa 8a       	std	Y+18, r15	; 0x12
     ac2:	0b 8b       	std	Y+19, r16	; 0x13
     ac4:	1c 8b       	std	Y+20, r17	; 0x14
     ac6:	6d a8       	ldd	r6, Y+53	; 0x35
     ac8:	7e a8       	ldd	r7, Y+54	; 0x36
     aca:	8f a8       	ldd	r8, Y+55	; 0x37
     acc:	98 ac       	ldd	r9, Y+56	; 0x38
     ace:	6d 8a       	std	Y+21, r6	; 0x15
     ad0:	7e 8a       	std	Y+22, r7	; 0x16
     ad2:	8f 8a       	std	Y+23, r8	; 0x17
     ad4:	98 8e       	std	Y+24, r9	; 0x18
     ad6:	2e 2d       	mov	r18, r14
     ad8:	3a 89       	ldd	r19, Y+18	; 0x12
     ada:	4b 89       	ldd	r20, Y+19	; 0x13
     adc:	5c 89       	ldd	r21, Y+20	; 0x14
     ade:	6d a9       	ldd	r22, Y+53	; 0x35
     ae0:	6a c2       	rjmp	.+1236   	; 0xfb6 <__stack+0x757>
     ae2:	67 96       	adiw	r28, 0x17	; 23
     ae4:	8f af       	std	Y+63, r24	; 0x3f
     ae6:	67 97       	sbiw	r28, 0x17	; 23
     ae8:	a6 01       	movw	r20, r12
     aea:	95 01       	movw	r18, r10
     aec:	08 2e       	mov	r0, r24
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__stack+0x299>
     af0:	22 0f       	add	r18, r18
     af2:	33 1f       	adc	r19, r19
     af4:	44 1f       	adc	r20, r20
     af6:	55 1f       	adc	r21, r21
     af8:	0a 94       	dec	r0
     afa:	d2 f7       	brpl	.-12     	; 0xaf0 <__stack+0x291>
     afc:	a0 e2       	ldi	r26, 0x20	; 32
     afe:	aa 2e       	mov	r10, r26
     b00:	a8 1a       	sub	r10, r24
     b02:	66 96       	adiw	r28, 0x16	; 22
     b04:	af ae       	std	Y+63, r10	; 0x3f
     b06:	66 97       	sbiw	r28, 0x16	; 22
     b08:	d2 01       	movw	r26, r4
     b0a:	c1 01       	movw	r24, r2
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <__stack+0x2b7>
     b0e:	b6 95       	lsr	r27
     b10:	a7 95       	ror	r26
     b12:	97 95       	ror	r25
     b14:	87 95       	ror	r24
     b16:	aa 94       	dec	r10
     b18:	d2 f7       	brpl	.-12     	; 0xb0e <__stack+0x2af>
     b1a:	6c 01       	movw	r12, r24
     b1c:	7d 01       	movw	r14, r26
     b1e:	c2 2a       	or	r12, r18
     b20:	d3 2a       	or	r13, r19
     b22:	e4 2a       	or	r14, r20
     b24:	f5 2a       	or	r15, r21
     b26:	c9 a6       	std	Y+41, r12	; 0x29
     b28:	da a6       	std	Y+42, r13	; 0x2a
     b2a:	eb a6       	std	Y+43, r14	; 0x2b
     b2c:	fc a6       	std	Y+44, r15	; 0x2c
     b2e:	82 01       	movw	r16, r4
     b30:	71 01       	movw	r14, r2
     b32:	67 96       	adiw	r28, 0x17	; 23
     b34:	0f ac       	ldd	r0, Y+63	; 0x3f
     b36:	67 97       	sbiw	r28, 0x17	; 23
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__stack+0x2e3>
     b3a:	ee 0c       	add	r14, r14
     b3c:	ff 1c       	adc	r15, r15
     b3e:	00 1f       	adc	r16, r16
     b40:	11 1f       	adc	r17, r17
     b42:	0a 94       	dec	r0
     b44:	d2 f7       	brpl	.-12     	; 0xb3a <__stack+0x2db>
     b46:	ed a2       	std	Y+37, r14	; 0x25
     b48:	fe a2       	std	Y+38, r15	; 0x26
     b4a:	0f a3       	std	Y+39, r16	; 0x27
     b4c:	18 a7       	std	Y+40, r17	; 0x28
     b4e:	64 01       	movw	r12, r8
     b50:	53 01       	movw	r10, r6
     b52:	66 96       	adiw	r28, 0x16	; 22
     b54:	0f ac       	ldd	r0, Y+63	; 0x3f
     b56:	66 97       	sbiw	r28, 0x16	; 22
     b58:	04 c0       	rjmp	.+8      	; 0xb62 <__stack+0x303>
     b5a:	d6 94       	lsr	r13
     b5c:	c7 94       	ror	r12
     b5e:	b7 94       	ror	r11
     b60:	a7 94       	ror	r10
     b62:	0a 94       	dec	r0
     b64:	d2 f7       	brpl	.-12     	; 0xb5a <__stack+0x2fb>
     b66:	a4 01       	movw	r20, r8
     b68:	93 01       	movw	r18, r6
     b6a:	67 96       	adiw	r28, 0x17	; 23
     b6c:	0f ac       	ldd	r0, Y+63	; 0x3f
     b6e:	67 97       	sbiw	r28, 0x17	; 23
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__stack+0x31b>
     b72:	22 0f       	add	r18, r18
     b74:	33 1f       	adc	r19, r19
     b76:	44 1f       	adc	r20, r20
     b78:	55 1f       	adc	r21, r21
     b7a:	0a 94       	dec	r0
     b7c:	d2 f7       	brpl	.-12     	; 0xb72 <__stack+0x313>
     b7e:	6c 96       	adiw	r28, 0x1c	; 28
     b80:	8c ad       	ldd	r24, Y+60	; 0x3c
     b82:	9d ad       	ldd	r25, Y+61	; 0x3d
     b84:	ae ad       	ldd	r26, Y+62	; 0x3e
     b86:	bf ad       	ldd	r27, Y+63	; 0x3f
     b88:	6c 97       	sbiw	r28, 0x1c	; 28
     b8a:	66 96       	adiw	r28, 0x16	; 22
     b8c:	0f ac       	ldd	r0, Y+63	; 0x3f
     b8e:	66 97       	sbiw	r28, 0x16	; 22
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <__stack+0x33b>
     b92:	b6 95       	lsr	r27
     b94:	a7 95       	ror	r26
     b96:	97 95       	ror	r25
     b98:	87 95       	ror	r24
     b9a:	0a 94       	dec	r0
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <__stack+0x333>
     b9e:	3c 01       	movw	r6, r24
     ba0:	4d 01       	movw	r8, r26
     ba2:	62 2a       	or	r6, r18
     ba4:	73 2a       	or	r7, r19
     ba6:	84 2a       	or	r8, r20
     ba8:	95 2a       	or	r9, r21
     baa:	69 a2       	std	Y+33, r6	; 0x21
     bac:	7a a2       	std	Y+34, r7	; 0x22
     bae:	8b a2       	std	Y+35, r8	; 0x23
     bb0:	9c a2       	std	Y+36, r9	; 0x24
     bb2:	6c 96       	adiw	r28, 0x1c	; 28
     bb4:	ec ac       	ldd	r14, Y+60	; 0x3c
     bb6:	fd ac       	ldd	r15, Y+61	; 0x3d
     bb8:	0e ad       	ldd	r16, Y+62	; 0x3e
     bba:	1f ad       	ldd	r17, Y+63	; 0x3f
     bbc:	6c 97       	sbiw	r28, 0x1c	; 28
     bbe:	67 96       	adiw	r28, 0x17	; 23
     bc0:	0f ac       	ldd	r0, Y+63	; 0x3f
     bc2:	67 97       	sbiw	r28, 0x17	; 23
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__stack+0x36f>
     bc6:	ee 0c       	add	r14, r14
     bc8:	ff 1c       	adc	r15, r15
     bca:	00 1f       	adc	r16, r16
     bcc:	11 1f       	adc	r17, r17
     bce:	0a 94       	dec	r0
     bd0:	d2 f7       	brpl	.-12     	; 0xbc6 <__stack+0x367>
     bd2:	ed 8e       	std	Y+29, r14	; 0x1d
     bd4:	fe 8e       	std	Y+30, r15	; 0x1e
     bd6:	0f 8f       	std	Y+31, r16	; 0x1f
     bd8:	18 a3       	std	Y+32, r17	; 0x20
     bda:	49 a5       	ldd	r20, Y+41	; 0x29
     bdc:	5a a5       	ldd	r21, Y+42	; 0x2a
     bde:	6b a5       	ldd	r22, Y+43	; 0x2b
     be0:	7c a5       	ldd	r23, Y+44	; 0x2c
     be2:	3b 01       	movw	r6, r22
     be4:	88 24       	eor	r8, r8
     be6:	99 24       	eor	r9, r9
     be8:	60 70       	andi	r22, 0x00	; 0
     bea:	70 70       	andi	r23, 0x00	; 0
     bec:	2d 96       	adiw	r28, 0x0d	; 13
     bee:	4c af       	std	Y+60, r20	; 0x3c
     bf0:	5d af       	std	Y+61, r21	; 0x3d
     bf2:	6e af       	std	Y+62, r22	; 0x3e
     bf4:	7f af       	std	Y+63, r23	; 0x3f
     bf6:	2d 97       	sbiw	r28, 0x0d	; 13
     bf8:	c6 01       	movw	r24, r12
     bfa:	b5 01       	movw	r22, r10
     bfc:	a4 01       	movw	r20, r8
     bfe:	93 01       	movw	r18, r6
     c00:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     c04:	7b 01       	movw	r14, r22
     c06:	8c 01       	movw	r16, r24
     c08:	c6 01       	movw	r24, r12
     c0a:	b5 01       	movw	r22, r10
     c0c:	a4 01       	movw	r20, r8
     c0e:	93 01       	movw	r18, r6
     c10:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     c14:	c9 01       	movw	r24, r18
     c16:	da 01       	movw	r26, r20
     c18:	1c 01       	movw	r2, r24
     c1a:	2d 01       	movw	r4, r26
     c1c:	c2 01       	movw	r24, r4
     c1e:	b1 01       	movw	r22, r2
     c20:	2d 96       	adiw	r28, 0x0d	; 13
     c22:	2c ad       	ldd	r18, Y+60	; 0x3c
     c24:	3d ad       	ldd	r19, Y+61	; 0x3d
     c26:	4e ad       	ldd	r20, Y+62	; 0x3e
     c28:	5f ad       	ldd	r21, Y+63	; 0x3f
     c2a:	2d 97       	sbiw	r28, 0x0d	; 13
     c2c:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	87 01       	movw	r16, r14
     c36:	ff 24       	eor	r15, r15
     c38:	ee 24       	eor	r14, r14
     c3a:	a9 a0       	ldd	r10, Y+33	; 0x21
     c3c:	ba a0       	ldd	r11, Y+34	; 0x22
     c3e:	cb a0       	ldd	r12, Y+35	; 0x23
     c40:	dc a0       	ldd	r13, Y+36	; 0x24
     c42:	c6 01       	movw	r24, r12
     c44:	aa 27       	eor	r26, r26
     c46:	bb 27       	eor	r27, r27
     c48:	57 01       	movw	r10, r14
     c4a:	68 01       	movw	r12, r16
     c4c:	a8 2a       	or	r10, r24
     c4e:	b9 2a       	or	r11, r25
     c50:	ca 2a       	or	r12, r26
     c52:	db 2a       	or	r13, r27
     c54:	a2 16       	cp	r10, r18
     c56:	b3 06       	cpc	r11, r19
     c58:	c4 06       	cpc	r12, r20
     c5a:	d5 06       	cpc	r13, r21
     c5c:	00 f5       	brcc	.+64     	; 0xc9e <__stack+0x43f>
     c5e:	08 94       	sec
     c60:	21 08       	sbc	r2, r1
     c62:	31 08       	sbc	r3, r1
     c64:	41 08       	sbc	r4, r1
     c66:	51 08       	sbc	r5, r1
     c68:	e9 a4       	ldd	r14, Y+41	; 0x29
     c6a:	fa a4       	ldd	r15, Y+42	; 0x2a
     c6c:	0b a5       	ldd	r16, Y+43	; 0x2b
     c6e:	1c a5       	ldd	r17, Y+44	; 0x2c
     c70:	ae 0c       	add	r10, r14
     c72:	bf 1c       	adc	r11, r15
     c74:	c0 1e       	adc	r12, r16
     c76:	d1 1e       	adc	r13, r17
     c78:	ae 14       	cp	r10, r14
     c7a:	bf 04       	cpc	r11, r15
     c7c:	c0 06       	cpc	r12, r16
     c7e:	d1 06       	cpc	r13, r17
     c80:	70 f0       	brcs	.+28     	; 0xc9e <__stack+0x43f>
     c82:	a2 16       	cp	r10, r18
     c84:	b3 06       	cpc	r11, r19
     c86:	c4 06       	cpc	r12, r20
     c88:	d5 06       	cpc	r13, r21
     c8a:	48 f4       	brcc	.+18     	; 0xc9e <__stack+0x43f>
     c8c:	08 94       	sec
     c8e:	21 08       	sbc	r2, r1
     c90:	31 08       	sbc	r3, r1
     c92:	41 08       	sbc	r4, r1
     c94:	51 08       	sbc	r5, r1
     c96:	ae 0c       	add	r10, r14
     c98:	bf 1c       	adc	r11, r15
     c9a:	c0 1e       	adc	r12, r16
     c9c:	d1 1e       	adc	r13, r17
     c9e:	a2 1a       	sub	r10, r18
     ca0:	b3 0a       	sbc	r11, r19
     ca2:	c4 0a       	sbc	r12, r20
     ca4:	d5 0a       	sbc	r13, r21
     ca6:	c6 01       	movw	r24, r12
     ca8:	b5 01       	movw	r22, r10
     caa:	a4 01       	movw	r20, r8
     cac:	93 01       	movw	r18, r6
     cae:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     cb2:	7b 01       	movw	r14, r22
     cb4:	8c 01       	movw	r16, r24
     cb6:	c6 01       	movw	r24, r12
     cb8:	b5 01       	movw	r22, r10
     cba:	a4 01       	movw	r20, r8
     cbc:	93 01       	movw	r18, r6
     cbe:	0e 94 09 31 	call	0x6212	; 0x6212 <__udivmodsi4>
     cc2:	c9 01       	movw	r24, r18
     cc4:	da 01       	movw	r26, r20
     cc6:	3c 01       	movw	r6, r24
     cc8:	4d 01       	movw	r8, r26
     cca:	c4 01       	movw	r24, r8
     ccc:	b3 01       	movw	r22, r6
     cce:	2d 96       	adiw	r28, 0x0d	; 13
     cd0:	2c ad       	ldd	r18, Y+60	; 0x3c
     cd2:	3d ad       	ldd	r19, Y+61	; 0x3d
     cd4:	4e ad       	ldd	r20, Y+62	; 0x3e
     cd6:	5f ad       	ldd	r21, Y+63	; 0x3f
     cd8:	2d 97       	sbiw	r28, 0x0d	; 13
     cda:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     cde:	9b 01       	movw	r18, r22
     ce0:	ac 01       	movw	r20, r24
     ce2:	87 01       	movw	r16, r14
     ce4:	ff 24       	eor	r15, r15
     ce6:	ee 24       	eor	r14, r14
     ce8:	89 a1       	ldd	r24, Y+33	; 0x21
     cea:	9a a1       	ldd	r25, Y+34	; 0x22
     cec:	ab a1       	ldd	r26, Y+35	; 0x23
     cee:	bc a1       	ldd	r27, Y+36	; 0x24
     cf0:	a0 70       	andi	r26, 0x00	; 0
     cf2:	b0 70       	andi	r27, 0x00	; 0
     cf4:	57 01       	movw	r10, r14
     cf6:	68 01       	movw	r12, r16
     cf8:	a8 2a       	or	r10, r24
     cfa:	b9 2a       	or	r11, r25
     cfc:	ca 2a       	or	r12, r26
     cfe:	db 2a       	or	r13, r27
     d00:	a2 16       	cp	r10, r18
     d02:	b3 06       	cpc	r11, r19
     d04:	c4 06       	cpc	r12, r20
     d06:	d5 06       	cpc	r13, r21
     d08:	00 f5       	brcc	.+64     	; 0xd4a <__stack+0x4eb>
     d0a:	08 94       	sec
     d0c:	61 08       	sbc	r6, r1
     d0e:	71 08       	sbc	r7, r1
     d10:	81 08       	sbc	r8, r1
     d12:	91 08       	sbc	r9, r1
     d14:	69 a5       	ldd	r22, Y+41	; 0x29
     d16:	7a a5       	ldd	r23, Y+42	; 0x2a
     d18:	8b a5       	ldd	r24, Y+43	; 0x2b
     d1a:	9c a5       	ldd	r25, Y+44	; 0x2c
     d1c:	a6 0e       	add	r10, r22
     d1e:	b7 1e       	adc	r11, r23
     d20:	c8 1e       	adc	r12, r24
     d22:	d9 1e       	adc	r13, r25
     d24:	a6 16       	cp	r10, r22
     d26:	b7 06       	cpc	r11, r23
     d28:	c8 06       	cpc	r12, r24
     d2a:	d9 06       	cpc	r13, r25
     d2c:	70 f0       	brcs	.+28     	; 0xd4a <__stack+0x4eb>
     d2e:	a2 16       	cp	r10, r18
     d30:	b3 06       	cpc	r11, r19
     d32:	c4 06       	cpc	r12, r20
     d34:	d5 06       	cpc	r13, r21
     d36:	48 f4       	brcc	.+18     	; 0xd4a <__stack+0x4eb>
     d38:	08 94       	sec
     d3a:	61 08       	sbc	r6, r1
     d3c:	71 08       	sbc	r7, r1
     d3e:	81 08       	sbc	r8, r1
     d40:	91 08       	sbc	r9, r1
     d42:	a6 0e       	add	r10, r22
     d44:	b7 1e       	adc	r11, r23
     d46:	c8 1e       	adc	r12, r24
     d48:	d9 1e       	adc	r13, r25
     d4a:	d6 01       	movw	r26, r12
     d4c:	c5 01       	movw	r24, r10
     d4e:	82 1b       	sub	r24, r18
     d50:	93 0b       	sbc	r25, r19
     d52:	a4 0b       	sbc	r26, r20
     d54:	b5 0b       	sbc	r27, r21
     d56:	89 8f       	std	Y+25, r24	; 0x19
     d58:	9a 8f       	std	Y+26, r25	; 0x1a
     d5a:	ab 8f       	std	Y+27, r26	; 0x1b
     d5c:	bc 8f       	std	Y+28, r27	; 0x1c
     d5e:	d1 01       	movw	r26, r2
     d60:	99 27       	eor	r25, r25
     d62:	88 27       	eor	r24, r24
     d64:	84 01       	movw	r16, r8
     d66:	73 01       	movw	r14, r6
     d68:	e8 2a       	or	r14, r24
     d6a:	f9 2a       	or	r15, r25
     d6c:	0a 2b       	or	r16, r26
     d6e:	1b 2b       	or	r17, r27
     d70:	4f ef       	ldi	r20, 0xFF	; 255
     d72:	a4 2e       	mov	r10, r20
     d74:	4f ef       	ldi	r20, 0xFF	; 255
     d76:	b4 2e       	mov	r11, r20
     d78:	c1 2c       	mov	r12, r1
     d7a:	d1 2c       	mov	r13, r1
     d7c:	ae 20       	and	r10, r14
     d7e:	bf 20       	and	r11, r15
     d80:	c0 22       	and	r12, r16
     d82:	d1 22       	and	r13, r17
     d84:	78 01       	movw	r14, r16
     d86:	00 27       	eor	r16, r16
     d88:	11 27       	eor	r17, r17
     d8a:	6d a0       	ldd	r6, Y+37	; 0x25
     d8c:	7e a0       	ldd	r7, Y+38	; 0x26
     d8e:	8f a0       	ldd	r8, Y+39	; 0x27
     d90:	98 a4       	ldd	r9, Y+40	; 0x28
     d92:	4f ef       	ldi	r20, 0xFF	; 255
     d94:	5f ef       	ldi	r21, 0xFF	; 255
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	64 22       	and	r6, r20
     d9c:	75 22       	and	r7, r21
     d9e:	86 22       	and	r8, r22
     da0:	97 22       	and	r9, r23
     da2:	8d a1       	ldd	r24, Y+37	; 0x25
     da4:	9e a1       	ldd	r25, Y+38	; 0x26
     da6:	af a1       	ldd	r26, Y+39	; 0x27
     da8:	b8 a5       	ldd	r27, Y+40	; 0x28
     daa:	bd 01       	movw	r22, r26
     dac:	88 27       	eor	r24, r24
     dae:	99 27       	eor	r25, r25
     db0:	65 96       	adiw	r28, 0x15	; 21
     db2:	6c af       	std	Y+60, r22	; 0x3c
     db4:	7d af       	std	Y+61, r23	; 0x3d
     db6:	8e af       	std	Y+62, r24	; 0x3e
     db8:	9f af       	std	Y+63, r25	; 0x3f
     dba:	65 97       	sbiw	r28, 0x15	; 21
     dbc:	c6 01       	movw	r24, r12
     dbe:	b5 01       	movw	r22, r10
     dc0:	a4 01       	movw	r20, r8
     dc2:	93 01       	movw	r18, r6
     dc4:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     dc8:	61 96       	adiw	r28, 0x11	; 17
     dca:	6c af       	std	Y+60, r22	; 0x3c
     dcc:	7d af       	std	Y+61, r23	; 0x3d
     dce:	8e af       	std	Y+62, r24	; 0x3e
     dd0:	9f af       	std	Y+63, r25	; 0x3f
     dd2:	61 97       	sbiw	r28, 0x11	; 17
     dd4:	c6 01       	movw	r24, r12
     dd6:	b5 01       	movw	r22, r10
     dd8:	65 96       	adiw	r28, 0x15	; 21
     dda:	2c ad       	ldd	r18, Y+60	; 0x3c
     ddc:	3d ad       	ldd	r19, Y+61	; 0x3d
     dde:	4e ad       	ldd	r20, Y+62	; 0x3e
     de0:	5f ad       	ldd	r21, Y+63	; 0x3f
     de2:	65 97       	sbiw	r28, 0x15	; 21
     de4:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     de8:	1b 01       	movw	r2, r22
     dea:	2c 01       	movw	r4, r24
     dec:	c8 01       	movw	r24, r16
     dee:	b7 01       	movw	r22, r14
     df0:	a4 01       	movw	r20, r8
     df2:	93 01       	movw	r18, r6
     df4:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     df8:	5b 01       	movw	r10, r22
     dfa:	6c 01       	movw	r12, r24
     dfc:	c8 01       	movw	r24, r16
     dfe:	b7 01       	movw	r22, r14
     e00:	65 96       	adiw	r28, 0x15	; 21
     e02:	2c ad       	ldd	r18, Y+60	; 0x3c
     e04:	3d ad       	ldd	r19, Y+61	; 0x3d
     e06:	4e ad       	ldd	r20, Y+62	; 0x3e
     e08:	5f ad       	ldd	r21, Y+63	; 0x3f
     e0a:	65 97       	sbiw	r28, 0x15	; 21
     e0c:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
     e10:	7b 01       	movw	r14, r22
     e12:	8c 01       	movw	r16, r24
     e14:	a6 01       	movw	r20, r12
     e16:	95 01       	movw	r18, r10
     e18:	22 0d       	add	r18, r2
     e1a:	33 1d       	adc	r19, r3
     e1c:	44 1d       	adc	r20, r4
     e1e:	55 1d       	adc	r21, r5
     e20:	61 96       	adiw	r28, 0x11	; 17
     e22:	6c ac       	ldd	r6, Y+60	; 0x3c
     e24:	7d ac       	ldd	r7, Y+61	; 0x3d
     e26:	8e ac       	ldd	r8, Y+62	; 0x3e
     e28:	9f ac       	ldd	r9, Y+63	; 0x3f
     e2a:	61 97       	sbiw	r28, 0x11	; 17
     e2c:	c4 01       	movw	r24, r8
     e2e:	aa 27       	eor	r26, r26
     e30:	bb 27       	eor	r27, r27
     e32:	28 0f       	add	r18, r24
     e34:	39 1f       	adc	r19, r25
     e36:	4a 1f       	adc	r20, r26
     e38:	5b 1f       	adc	r21, r27
     e3a:	2a 15       	cp	r18, r10
     e3c:	3b 05       	cpc	r19, r11
     e3e:	4c 05       	cpc	r20, r12
     e40:	5d 05       	cpc	r21, r13
     e42:	48 f4       	brcc	.+18     	; 0xe56 <__stack+0x5f7>
     e44:	81 2c       	mov	r8, r1
     e46:	91 2c       	mov	r9, r1
     e48:	e1 e0       	ldi	r30, 0x01	; 1
     e4a:	ae 2e       	mov	r10, r30
     e4c:	b1 2c       	mov	r11, r1
     e4e:	e8 0c       	add	r14, r8
     e50:	f9 1c       	adc	r15, r9
     e52:	0a 1d       	adc	r16, r10
     e54:	1b 1d       	adc	r17, r11
     e56:	ca 01       	movw	r24, r20
     e58:	aa 27       	eor	r26, r26
     e5a:	bb 27       	eor	r27, r27
     e5c:	57 01       	movw	r10, r14
     e5e:	68 01       	movw	r12, r16
     e60:	a8 0e       	add	r10, r24
     e62:	b9 1e       	adc	r11, r25
     e64:	ca 1e       	adc	r12, r26
     e66:	db 1e       	adc	r13, r27
     e68:	a9 01       	movw	r20, r18
     e6a:	33 27       	eor	r19, r19
     e6c:	22 27       	eor	r18, r18
     e6e:	61 96       	adiw	r28, 0x11	; 17
     e70:	8c ad       	ldd	r24, Y+60	; 0x3c
     e72:	9d ad       	ldd	r25, Y+61	; 0x3d
     e74:	ae ad       	ldd	r26, Y+62	; 0x3e
     e76:	bf ad       	ldd	r27, Y+63	; 0x3f
     e78:	61 97       	sbiw	r28, 0x11	; 17
     e7a:	a0 70       	andi	r26, 0x00	; 0
     e7c:	b0 70       	andi	r27, 0x00	; 0
     e7e:	28 0f       	add	r18, r24
     e80:	39 1f       	adc	r19, r25
     e82:	4a 1f       	adc	r20, r26
     e84:	5b 1f       	adc	r21, r27
     e86:	e9 8c       	ldd	r14, Y+25	; 0x19
     e88:	fa 8c       	ldd	r15, Y+26	; 0x1a
     e8a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     e8c:	1c 8d       	ldd	r17, Y+28	; 0x1c
     e8e:	ea 14       	cp	r14, r10
     e90:	fb 04       	cpc	r15, r11
     e92:	0c 05       	cpc	r16, r12
     e94:	1d 05       	cpc	r17, r13
     e96:	70 f0       	brcs	.+28     	; 0xeb4 <__stack+0x655>
     e98:	ae 14       	cp	r10, r14
     e9a:	bf 04       	cpc	r11, r15
     e9c:	c0 06       	cpc	r12, r16
     e9e:	d1 06       	cpc	r13, r17
     ea0:	69 f5       	brne	.+90     	; 0xefc <__stack+0x69d>
     ea2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ea4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ea6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ea8:	98 a1       	ldd	r25, Y+32	; 0x20
     eaa:	62 17       	cp	r22, r18
     eac:	73 07       	cpc	r23, r19
     eae:	84 07       	cpc	r24, r20
     eb0:	95 07       	cpc	r25, r21
     eb2:	20 f5       	brcc	.+72     	; 0xefc <__stack+0x69d>
     eb4:	da 01       	movw	r26, r20
     eb6:	c9 01       	movw	r24, r18
     eb8:	6d a0       	ldd	r6, Y+37	; 0x25
     eba:	7e a0       	ldd	r7, Y+38	; 0x26
     ebc:	8f a0       	ldd	r8, Y+39	; 0x27
     ebe:	98 a4       	ldd	r9, Y+40	; 0x28
     ec0:	86 19       	sub	r24, r6
     ec2:	97 09       	sbc	r25, r7
     ec4:	a8 09       	sbc	r26, r8
     ec6:	b9 09       	sbc	r27, r9
     ec8:	e9 a4       	ldd	r14, Y+41	; 0x29
     eca:	fa a4       	ldd	r15, Y+42	; 0x2a
     ecc:	0b a5       	ldd	r16, Y+43	; 0x2b
     ece:	1c a5       	ldd	r17, Y+44	; 0x2c
     ed0:	ae 18       	sub	r10, r14
     ed2:	bf 08       	sbc	r11, r15
     ed4:	c0 0a       	sbc	r12, r16
     ed6:	d1 0a       	sbc	r13, r17
     ed8:	ee 24       	eor	r14, r14
     eda:	ff 24       	eor	r15, r15
     edc:	87 01       	movw	r16, r14
     ede:	28 17       	cp	r18, r24
     ee0:	39 07       	cpc	r19, r25
     ee2:	4a 07       	cpc	r20, r26
     ee4:	5b 07       	cpc	r21, r27
     ee6:	28 f4       	brcc	.+10     	; 0xef2 <__stack+0x693>
     ee8:	21 e0       	ldi	r18, 0x01	; 1
     eea:	e2 2e       	mov	r14, r18
     eec:	f1 2c       	mov	r15, r1
     eee:	01 2d       	mov	r16, r1
     ef0:	11 2d       	mov	r17, r1
     ef2:	ae 18       	sub	r10, r14
     ef4:	bf 08       	sbc	r11, r15
     ef6:	c0 0a       	sbc	r12, r16
     ef8:	d1 0a       	sbc	r13, r17
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <__stack+0x6a1>
     efc:	da 01       	movw	r26, r20
     efe:	c9 01       	movw	r24, r18
     f00:	6d 8c       	ldd	r6, Y+29	; 0x1d
     f02:	7e 8c       	ldd	r7, Y+30	; 0x1e
     f04:	8f 8c       	ldd	r8, Y+31	; 0x1f
     f06:	98 a0       	ldd	r9, Y+32	; 0x20
     f08:	68 1a       	sub	r6, r24
     f0a:	79 0a       	sbc	r7, r25
     f0c:	8a 0a       	sbc	r8, r26
     f0e:	9b 0a       	sbc	r9, r27
     f10:	49 8d       	ldd	r20, Y+25	; 0x19
     f12:	5a 8d       	ldd	r21, Y+26	; 0x1a
     f14:	6b 8d       	ldd	r22, Y+27	; 0x1b
     f16:	7c 8d       	ldd	r23, Y+28	; 0x1c
     f18:	4a 19       	sub	r20, r10
     f1a:	5b 09       	sbc	r21, r11
     f1c:	6c 09       	sbc	r22, r12
     f1e:	7d 09       	sbc	r23, r13
     f20:	5a 01       	movw	r10, r20
     f22:	6b 01       	movw	r12, r22
     f24:	22 24       	eor	r2, r2
     f26:	33 24       	eor	r3, r3
     f28:	21 01       	movw	r4, r2
     f2a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f2c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     f2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f30:	98 a1       	ldd	r25, Y+32	; 0x20
     f32:	66 15       	cp	r22, r6
     f34:	77 05       	cpc	r23, r7
     f36:	88 05       	cpc	r24, r8
     f38:	99 05       	cpc	r25, r9
     f3a:	28 f4       	brcc	.+10     	; 0xf46 <__stack+0x6e7>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	28 2e       	mov	r2, r24
     f40:	31 2c       	mov	r3, r1
     f42:	41 2c       	mov	r4, r1
     f44:	51 2c       	mov	r5, r1
     f46:	86 01       	movw	r16, r12
     f48:	75 01       	movw	r14, r10
     f4a:	e2 18       	sub	r14, r2
     f4c:	f3 08       	sbc	r15, r3
     f4e:	04 09       	sbc	r16, r4
     f50:	15 09       	sbc	r17, r5
     f52:	a8 01       	movw	r20, r16
     f54:	97 01       	movw	r18, r14
     f56:	66 96       	adiw	r28, 0x16	; 22
     f58:	0f ac       	ldd	r0, Y+63	; 0x3f
     f5a:	66 97       	sbiw	r28, 0x16	; 22
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <__stack+0x707>
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	44 1f       	adc	r20, r20
     f64:	55 1f       	adc	r21, r21
     f66:	0a 94       	dec	r0
     f68:	d2 f7       	brpl	.-12     	; 0xf5e <__stack+0x6ff>
     f6a:	d4 01       	movw	r26, r8
     f6c:	c3 01       	movw	r24, r6
     f6e:	67 96       	adiw	r28, 0x17	; 23
     f70:	0f ac       	ldd	r0, Y+63	; 0x3f
     f72:	67 97       	sbiw	r28, 0x17	; 23
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <__stack+0x71f>
     f76:	b6 95       	lsr	r27
     f78:	a7 95       	ror	r26
     f7a:	97 95       	ror	r25
     f7c:	87 95       	ror	r24
     f7e:	0a 94       	dec	r0
     f80:	d2 f7       	brpl	.-12     	; 0xf76 <__stack+0x717>
     f82:	28 2b       	or	r18, r24
     f84:	39 2b       	or	r19, r25
     f86:	4a 2b       	or	r20, r26
     f88:	5b 2b       	or	r21, r27
     f8a:	29 8b       	std	Y+17, r18	; 0x11
     f8c:	3a 8b       	std	Y+18, r19	; 0x12
     f8e:	4b 8b       	std	Y+19, r20	; 0x13
     f90:	5c 8b       	std	Y+20, r21	; 0x14
     f92:	67 96       	adiw	r28, 0x17	; 23
     f94:	0f ac       	ldd	r0, Y+63	; 0x3f
     f96:	67 97       	sbiw	r28, 0x17	; 23
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__stack+0x743>
     f9a:	16 95       	lsr	r17
     f9c:	07 95       	ror	r16
     f9e:	f7 94       	ror	r15
     fa0:	e7 94       	ror	r14
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <__stack+0x73b>
     fa6:	ed 8a       	std	Y+21, r14	; 0x15
     fa8:	fe 8a       	std	Y+22, r15	; 0x16
     faa:	0f 8b       	std	Y+23, r16	; 0x17
     fac:	18 8f       	std	Y+24, r17	; 0x18
     fae:	3a 89       	ldd	r19, Y+18	; 0x12
     fb0:	4b 89       	ldd	r20, Y+19	; 0x13
     fb2:	5c 89       	ldd	r21, Y+20	; 0x14
     fb4:	6e 2d       	mov	r22, r14
     fb6:	7e 89       	ldd	r23, Y+22	; 0x16
     fb8:	8f 89       	ldd	r24, Y+23	; 0x17
     fba:	98 8d       	ldd	r25, Y+24	; 0x18
     fbc:	c5 5a       	subi	r28, 0xA5	; 165
     fbe:	df 4f       	sbci	r29, 0xFF	; 255
     fc0:	e2 e1       	ldi	r30, 0x12	; 18
     fc2:	0c 94 47 31 	jmp	0x628e	; 0x628e <__epilogue_restores__>

00000fc6 <_fpadd_parts>:
     fc6:	a0 e0       	ldi	r26, 0x00	; 0
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e9 ee       	ldi	r30, 0xE9	; 233
     fcc:	f7 e0       	ldi	r31, 0x07	; 7
     fce:	0c 94 2b 31 	jmp	0x6256	; 0x6256 <__prologue_saves__>
     fd2:	dc 01       	movw	r26, r24
     fd4:	2b 01       	movw	r4, r22
     fd6:	fa 01       	movw	r30, r20
     fd8:	9c 91       	ld	r25, X
     fda:	92 30       	cpi	r25, 0x02	; 2
     fdc:	08 f4       	brcc	.+2      	; 0xfe0 <_fpadd_parts+0x1a>
     fde:	39 c1       	rjmp	.+626    	; 0x1252 <_fpadd_parts+0x28c>
     fe0:	eb 01       	movw	r28, r22
     fe2:	88 81       	ld	r24, Y
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	08 f4       	brcc	.+2      	; 0xfea <_fpadd_parts+0x24>
     fe8:	33 c1       	rjmp	.+614    	; 0x1250 <_fpadd_parts+0x28a>
     fea:	94 30       	cpi	r25, 0x04	; 4
     fec:	69 f4       	brne	.+26     	; 0x1008 <_fpadd_parts+0x42>
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	09 f0       	breq	.+2      	; 0xff4 <_fpadd_parts+0x2e>
     ff2:	2f c1       	rjmp	.+606    	; 0x1252 <_fpadd_parts+0x28c>
     ff4:	11 96       	adiw	r26, 0x01	; 1
     ff6:	9c 91       	ld	r25, X
     ff8:	11 97       	sbiw	r26, 0x01	; 1
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	98 17       	cp	r25, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <_fpadd_parts+0x3c>
    1000:	28 c1       	rjmp	.+592    	; 0x1252 <_fpadd_parts+0x28c>
    1002:	a7 e9       	ldi	r26, 0x97	; 151
    1004:	b1 e0       	ldi	r27, 0x01	; 1
    1006:	25 c1       	rjmp	.+586    	; 0x1252 <_fpadd_parts+0x28c>
    1008:	84 30       	cpi	r24, 0x04	; 4
    100a:	09 f4       	brne	.+2      	; 0x100e <_fpadd_parts+0x48>
    100c:	21 c1       	rjmp	.+578    	; 0x1250 <_fpadd_parts+0x28a>
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	a9 f4       	brne	.+42     	; 0x103c <_fpadd_parts+0x76>
    1012:	92 30       	cpi	r25, 0x02	; 2
    1014:	09 f0       	breq	.+2      	; 0x1018 <_fpadd_parts+0x52>
    1016:	1d c1       	rjmp	.+570    	; 0x1252 <_fpadd_parts+0x28c>
    1018:	9a 01       	movw	r18, r20
    101a:	ad 01       	movw	r20, r26
    101c:	88 e0       	ldi	r24, 0x08	; 8
    101e:	ea 01       	movw	r28, r20
    1020:	09 90       	ld	r0, Y+
    1022:	ae 01       	movw	r20, r28
    1024:	e9 01       	movw	r28, r18
    1026:	09 92       	st	Y+, r0
    1028:	9e 01       	movw	r18, r28
    102a:	81 50       	subi	r24, 0x01	; 1
    102c:	c1 f7       	brne	.-16     	; 0x101e <_fpadd_parts+0x58>
    102e:	e2 01       	movw	r28, r4
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	9c 91       	ld	r25, X
    1036:	89 23       	and	r24, r25
    1038:	81 83       	std	Z+1, r24	; 0x01
    103a:	08 c1       	rjmp	.+528    	; 0x124c <_fpadd_parts+0x286>
    103c:	92 30       	cpi	r25, 0x02	; 2
    103e:	09 f4       	brne	.+2      	; 0x1042 <_fpadd_parts+0x7c>
    1040:	07 c1       	rjmp	.+526    	; 0x1250 <_fpadd_parts+0x28a>
    1042:	12 96       	adiw	r26, 0x02	; 2
    1044:	2d 90       	ld	r2, X+
    1046:	3c 90       	ld	r3, X
    1048:	13 97       	sbiw	r26, 0x03	; 3
    104a:	eb 01       	movw	r28, r22
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	14 96       	adiw	r26, 0x04	; 4
    1052:	ad 90       	ld	r10, X+
    1054:	bd 90       	ld	r11, X+
    1056:	cd 90       	ld	r12, X+
    1058:	dc 90       	ld	r13, X
    105a:	17 97       	sbiw	r26, 0x07	; 7
    105c:	ec 80       	ldd	r14, Y+4	; 0x04
    105e:	fd 80       	ldd	r15, Y+5	; 0x05
    1060:	0e 81       	ldd	r16, Y+6	; 0x06
    1062:	1f 81       	ldd	r17, Y+7	; 0x07
    1064:	91 01       	movw	r18, r2
    1066:	28 1b       	sub	r18, r24
    1068:	39 0b       	sbc	r19, r25
    106a:	b9 01       	movw	r22, r18
    106c:	37 ff       	sbrs	r19, 7
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <_fpadd_parts+0xb2>
    1070:	66 27       	eor	r22, r22
    1072:	77 27       	eor	r23, r23
    1074:	62 1b       	sub	r22, r18
    1076:	73 0b       	sbc	r23, r19
    1078:	60 32       	cpi	r22, 0x20	; 32
    107a:	71 05       	cpc	r23, r1
    107c:	0c f0       	brlt	.+2      	; 0x1080 <_fpadd_parts+0xba>
    107e:	61 c0       	rjmp	.+194    	; 0x1142 <_fpadd_parts+0x17c>
    1080:	12 16       	cp	r1, r18
    1082:	13 06       	cpc	r1, r19
    1084:	6c f5       	brge	.+90     	; 0x10e0 <_fpadd_parts+0x11a>
    1086:	37 01       	movw	r6, r14
    1088:	48 01       	movw	r8, r16
    108a:	06 2e       	mov	r0, r22
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <_fpadd_parts+0xd0>
    108e:	96 94       	lsr	r9
    1090:	87 94       	ror	r8
    1092:	77 94       	ror	r7
    1094:	67 94       	ror	r6
    1096:	0a 94       	dec	r0
    1098:	d2 f7       	brpl	.-12     	; 0x108e <_fpadd_parts+0xc8>
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <_fpadd_parts+0xe6>
    10a4:	22 0f       	add	r18, r18
    10a6:	33 1f       	adc	r19, r19
    10a8:	44 1f       	adc	r20, r20
    10aa:	55 1f       	adc	r21, r21
    10ac:	6a 95       	dec	r22
    10ae:	d2 f7       	brpl	.-12     	; 0x10a4 <_fpadd_parts+0xde>
    10b0:	21 50       	subi	r18, 0x01	; 1
    10b2:	30 40       	sbci	r19, 0x00	; 0
    10b4:	40 40       	sbci	r20, 0x00	; 0
    10b6:	50 40       	sbci	r21, 0x00	; 0
    10b8:	2e 21       	and	r18, r14
    10ba:	3f 21       	and	r19, r15
    10bc:	40 23       	and	r20, r16
    10be:	51 23       	and	r21, r17
    10c0:	21 15       	cp	r18, r1
    10c2:	31 05       	cpc	r19, r1
    10c4:	41 05       	cpc	r20, r1
    10c6:	51 05       	cpc	r21, r1
    10c8:	21 f0       	breq	.+8      	; 0x10d2 <_fpadd_parts+0x10c>
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	79 01       	movw	r14, r18
    10d4:	8a 01       	movw	r16, r20
    10d6:	e6 28       	or	r14, r6
    10d8:	f7 28       	or	r15, r7
    10da:	08 29       	or	r16, r8
    10dc:	19 29       	or	r17, r9
    10de:	3c c0       	rjmp	.+120    	; 0x1158 <_fpadd_parts+0x192>
    10e0:	23 2b       	or	r18, r19
    10e2:	d1 f1       	breq	.+116    	; 0x1158 <_fpadd_parts+0x192>
    10e4:	26 0e       	add	r2, r22
    10e6:	37 1e       	adc	r3, r23
    10e8:	35 01       	movw	r6, r10
    10ea:	46 01       	movw	r8, r12
    10ec:	06 2e       	mov	r0, r22
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <_fpadd_parts+0x132>
    10f0:	96 94       	lsr	r9
    10f2:	87 94       	ror	r8
    10f4:	77 94       	ror	r7
    10f6:	67 94       	ror	r6
    10f8:	0a 94       	dec	r0
    10fa:	d2 f7       	brpl	.-12     	; 0x10f0 <_fpadd_parts+0x12a>
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	04 c0       	rjmp	.+8      	; 0x110e <_fpadd_parts+0x148>
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	44 1f       	adc	r20, r20
    110c:	55 1f       	adc	r21, r21
    110e:	6a 95       	dec	r22
    1110:	d2 f7       	brpl	.-12     	; 0x1106 <_fpadd_parts+0x140>
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	30 40       	sbci	r19, 0x00	; 0
    1116:	40 40       	sbci	r20, 0x00	; 0
    1118:	50 40       	sbci	r21, 0x00	; 0
    111a:	2a 21       	and	r18, r10
    111c:	3b 21       	and	r19, r11
    111e:	4c 21       	and	r20, r12
    1120:	5d 21       	and	r21, r13
    1122:	21 15       	cp	r18, r1
    1124:	31 05       	cpc	r19, r1
    1126:	41 05       	cpc	r20, r1
    1128:	51 05       	cpc	r21, r1
    112a:	21 f0       	breq	.+8      	; 0x1134 <_fpadd_parts+0x16e>
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	59 01       	movw	r10, r18
    1136:	6a 01       	movw	r12, r20
    1138:	a6 28       	or	r10, r6
    113a:	b7 28       	or	r11, r7
    113c:	c8 28       	or	r12, r8
    113e:	d9 28       	or	r13, r9
    1140:	0b c0       	rjmp	.+22     	; 0x1158 <_fpadd_parts+0x192>
    1142:	82 15       	cp	r24, r2
    1144:	93 05       	cpc	r25, r3
    1146:	2c f0       	brlt	.+10     	; 0x1152 <_fpadd_parts+0x18c>
    1148:	1c 01       	movw	r2, r24
    114a:	aa 24       	eor	r10, r10
    114c:	bb 24       	eor	r11, r11
    114e:	65 01       	movw	r12, r10
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <_fpadd_parts+0x192>
    1152:	ee 24       	eor	r14, r14
    1154:	ff 24       	eor	r15, r15
    1156:	87 01       	movw	r16, r14
    1158:	11 96       	adiw	r26, 0x01	; 1
    115a:	9c 91       	ld	r25, X
    115c:	d2 01       	movw	r26, r4
    115e:	11 96       	adiw	r26, 0x01	; 1
    1160:	8c 91       	ld	r24, X
    1162:	98 17       	cp	r25, r24
    1164:	09 f4       	brne	.+2      	; 0x1168 <_fpadd_parts+0x1a2>
    1166:	45 c0       	rjmp	.+138    	; 0x11f2 <_fpadd_parts+0x22c>
    1168:	99 23       	and	r25, r25
    116a:	39 f0       	breq	.+14     	; 0x117a <_fpadd_parts+0x1b4>
    116c:	a8 01       	movw	r20, r16
    116e:	97 01       	movw	r18, r14
    1170:	2a 19       	sub	r18, r10
    1172:	3b 09       	sbc	r19, r11
    1174:	4c 09       	sbc	r20, r12
    1176:	5d 09       	sbc	r21, r13
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <_fpadd_parts+0x1c0>
    117a:	a6 01       	movw	r20, r12
    117c:	95 01       	movw	r18, r10
    117e:	2e 19       	sub	r18, r14
    1180:	3f 09       	sbc	r19, r15
    1182:	40 0b       	sbc	r20, r16
    1184:	51 0b       	sbc	r21, r17
    1186:	57 fd       	sbrc	r21, 7
    1188:	08 c0       	rjmp	.+16     	; 0x119a <_fpadd_parts+0x1d4>
    118a:	11 82       	std	Z+1, r1	; 0x01
    118c:	33 82       	std	Z+3, r3	; 0x03
    118e:	22 82       	std	Z+2, r2	; 0x02
    1190:	24 83       	std	Z+4, r18	; 0x04
    1192:	35 83       	std	Z+5, r19	; 0x05
    1194:	46 83       	std	Z+6, r20	; 0x06
    1196:	57 83       	std	Z+7, r21	; 0x07
    1198:	1d c0       	rjmp	.+58     	; 0x11d4 <_fpadd_parts+0x20e>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	81 83       	std	Z+1, r24	; 0x01
    119e:	33 82       	std	Z+3, r3	; 0x03
    11a0:	22 82       	std	Z+2, r2	; 0x02
    11a2:	88 27       	eor	r24, r24
    11a4:	99 27       	eor	r25, r25
    11a6:	dc 01       	movw	r26, r24
    11a8:	82 1b       	sub	r24, r18
    11aa:	93 0b       	sbc	r25, r19
    11ac:	a4 0b       	sbc	r26, r20
    11ae:	b5 0b       	sbc	r27, r21
    11b0:	84 83       	std	Z+4, r24	; 0x04
    11b2:	95 83       	std	Z+5, r25	; 0x05
    11b4:	a6 83       	std	Z+6, r26	; 0x06
    11b6:	b7 83       	std	Z+7, r27	; 0x07
    11b8:	0d c0       	rjmp	.+26     	; 0x11d4 <_fpadd_parts+0x20e>
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	44 1f       	adc	r20, r20
    11c0:	55 1f       	adc	r21, r21
    11c2:	24 83       	std	Z+4, r18	; 0x04
    11c4:	35 83       	std	Z+5, r19	; 0x05
    11c6:	46 83       	std	Z+6, r20	; 0x06
    11c8:	57 83       	std	Z+7, r21	; 0x07
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	93 83       	std	Z+3, r25	; 0x03
    11d2:	82 83       	std	Z+2, r24	; 0x02
    11d4:	24 81       	ldd	r18, Z+4	; 0x04
    11d6:	35 81       	ldd	r19, Z+5	; 0x05
    11d8:	46 81       	ldd	r20, Z+6	; 0x06
    11da:	57 81       	ldd	r21, Z+7	; 0x07
    11dc:	da 01       	movw	r26, r20
    11de:	c9 01       	movw	r24, r18
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	a1 09       	sbc	r26, r1
    11e4:	b1 09       	sbc	r27, r1
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	af 4f       	sbci	r26, 0xFF	; 255
    11ec:	bf 43       	sbci	r27, 0x3F	; 63
    11ee:	28 f3       	brcs	.-54     	; 0x11ba <_fpadd_parts+0x1f4>
    11f0:	0b c0       	rjmp	.+22     	; 0x1208 <_fpadd_parts+0x242>
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	33 82       	std	Z+3, r3	; 0x03
    11f6:	22 82       	std	Z+2, r2	; 0x02
    11f8:	ea 0c       	add	r14, r10
    11fa:	fb 1c       	adc	r15, r11
    11fc:	0c 1d       	adc	r16, r12
    11fe:	1d 1d       	adc	r17, r13
    1200:	e4 82       	std	Z+4, r14	; 0x04
    1202:	f5 82       	std	Z+5, r15	; 0x05
    1204:	06 83       	std	Z+6, r16	; 0x06
    1206:	17 83       	std	Z+7, r17	; 0x07
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	80 83       	st	Z, r24
    120c:	24 81       	ldd	r18, Z+4	; 0x04
    120e:	35 81       	ldd	r19, Z+5	; 0x05
    1210:	46 81       	ldd	r20, Z+6	; 0x06
    1212:	57 81       	ldd	r21, Z+7	; 0x07
    1214:	57 ff       	sbrs	r21, 7
    1216:	1a c0       	rjmp	.+52     	; 0x124c <_fpadd_parts+0x286>
    1218:	c9 01       	movw	r24, r18
    121a:	aa 27       	eor	r26, r26
    121c:	97 fd       	sbrc	r25, 7
    121e:	a0 95       	com	r26
    1220:	ba 2f       	mov	r27, r26
    1222:	81 70       	andi	r24, 0x01	; 1
    1224:	90 70       	andi	r25, 0x00	; 0
    1226:	a0 70       	andi	r26, 0x00	; 0
    1228:	b0 70       	andi	r27, 0x00	; 0
    122a:	56 95       	lsr	r21
    122c:	47 95       	ror	r20
    122e:	37 95       	ror	r19
    1230:	27 95       	ror	r18
    1232:	82 2b       	or	r24, r18
    1234:	93 2b       	or	r25, r19
    1236:	a4 2b       	or	r26, r20
    1238:	b5 2b       	or	r27, r21
    123a:	84 83       	std	Z+4, r24	; 0x04
    123c:	95 83       	std	Z+5, r25	; 0x05
    123e:	a6 83       	std	Z+6, r26	; 0x06
    1240:	b7 83       	std	Z+7, r27	; 0x07
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	93 83       	std	Z+3, r25	; 0x03
    124a:	82 83       	std	Z+2, r24	; 0x02
    124c:	df 01       	movw	r26, r30
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <_fpadd_parts+0x28c>
    1250:	d2 01       	movw	r26, r4
    1252:	cd 01       	movw	r24, r26
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	e2 e1       	ldi	r30, 0x12	; 18
    125a:	0c 94 47 31 	jmp	0x628e	; 0x628e <__epilogue_restores__>

0000125e <__subsf3>:
    125e:	a0 e2       	ldi	r26, 0x20	; 32
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f9 e0       	ldi	r31, 0x09	; 9
    1266:	0c 94 37 31 	jmp	0x626e	; 0x626e <__prologue_saves__+0x18>
    126a:	69 83       	std	Y+1, r22	; 0x01
    126c:	7a 83       	std	Y+2, r23	; 0x02
    126e:	8b 83       	std	Y+3, r24	; 0x03
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	2d 83       	std	Y+5, r18	; 0x05
    1274:	3e 83       	std	Y+6, r19	; 0x06
    1276:	4f 83       	std	Y+7, r20	; 0x07
    1278:	58 87       	std	Y+8, r21	; 0x08
    127a:	e9 e0       	ldi	r30, 0x09	; 9
    127c:	ee 2e       	mov	r14, r30
    127e:	f1 2c       	mov	r15, r1
    1280:	ec 0e       	add	r14, r28
    1282:	fd 1e       	adc	r15, r29
    1284:	ce 01       	movw	r24, r28
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	b7 01       	movw	r22, r14
    128a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    128e:	8e 01       	movw	r16, r28
    1290:	0f 5e       	subi	r16, 0xEF	; 239
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	ce 01       	movw	r24, r28
    1296:	05 96       	adiw	r24, 0x05	; 5
    1298:	b8 01       	movw	r22, r16
    129a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    129e:	8a 89       	ldd	r24, Y+18	; 0x12
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	89 27       	eor	r24, r25
    12a4:	8a 8b       	std	Y+18, r24	; 0x12
    12a6:	c7 01       	movw	r24, r14
    12a8:	b8 01       	movw	r22, r16
    12aa:	ae 01       	movw	r20, r28
    12ac:	47 5e       	subi	r20, 0xE7	; 231
    12ae:	5f 4f       	sbci	r21, 0xFF	; 255
    12b0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_fpadd_parts>
    12b4:	0e 94 17 0c 	call	0x182e	; 0x182e <__pack_f>
    12b8:	a0 96       	adiw	r28, 0x20	; 32
    12ba:	e6 e0       	ldi	r30, 0x06	; 6
    12bc:	0c 94 53 31 	jmp	0x62a6	; 0x62a6 <__epilogue_restores__+0x18>

000012c0 <__addsf3>:
    12c0:	a0 e2       	ldi	r26, 0x20	; 32
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e6 e6       	ldi	r30, 0x66	; 102
    12c6:	f9 e0       	ldi	r31, 0x09	; 9
    12c8:	0c 94 37 31 	jmp	0x626e	; 0x626e <__prologue_saves__+0x18>
    12cc:	69 83       	std	Y+1, r22	; 0x01
    12ce:	7a 83       	std	Y+2, r23	; 0x02
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	9c 83       	std	Y+4, r25	; 0x04
    12d4:	2d 83       	std	Y+5, r18	; 0x05
    12d6:	3e 83       	std	Y+6, r19	; 0x06
    12d8:	4f 83       	std	Y+7, r20	; 0x07
    12da:	58 87       	std	Y+8, r21	; 0x08
    12dc:	f9 e0       	ldi	r31, 0x09	; 9
    12de:	ef 2e       	mov	r14, r31
    12e0:	f1 2c       	mov	r15, r1
    12e2:	ec 0e       	add	r14, r28
    12e4:	fd 1e       	adc	r15, r29
    12e6:	ce 01       	movw	r24, r28
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	b7 01       	movw	r22, r14
    12ec:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    12f0:	8e 01       	movw	r16, r28
    12f2:	0f 5e       	subi	r16, 0xEF	; 239
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	ce 01       	movw	r24, r28
    12f8:	05 96       	adiw	r24, 0x05	; 5
    12fa:	b8 01       	movw	r22, r16
    12fc:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1300:	c7 01       	movw	r24, r14
    1302:	b8 01       	movw	r22, r16
    1304:	ae 01       	movw	r20, r28
    1306:	47 5e       	subi	r20, 0xE7	; 231
    1308:	5f 4f       	sbci	r21, 0xFF	; 255
    130a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_fpadd_parts>
    130e:	0e 94 17 0c 	call	0x182e	; 0x182e <__pack_f>
    1312:	a0 96       	adiw	r28, 0x20	; 32
    1314:	e6 e0       	ldi	r30, 0x06	; 6
    1316:	0c 94 53 31 	jmp	0x62a6	; 0x62a6 <__epilogue_restores__+0x18>

0000131a <__mulsf3>:
    131a:	a0 e2       	ldi	r26, 0x20	; 32
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e3 e9       	ldi	r30, 0x93	; 147
    1320:	f9 e0       	ldi	r31, 0x09	; 9
    1322:	0c 94 2b 31 	jmp	0x6256	; 0x6256 <__prologue_saves__>
    1326:	69 83       	std	Y+1, r22	; 0x01
    1328:	7a 83       	std	Y+2, r23	; 0x02
    132a:	8b 83       	std	Y+3, r24	; 0x03
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	2d 83       	std	Y+5, r18	; 0x05
    1330:	3e 83       	std	Y+6, r19	; 0x06
    1332:	4f 83       	std	Y+7, r20	; 0x07
    1334:	58 87       	std	Y+8, r21	; 0x08
    1336:	ce 01       	movw	r24, r28
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	be 01       	movw	r22, r28
    133c:	67 5f       	subi	r22, 0xF7	; 247
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1344:	ce 01       	movw	r24, r28
    1346:	05 96       	adiw	r24, 0x05	; 5
    1348:	be 01       	movw	r22, r28
    134a:	6f 5e       	subi	r22, 0xEF	; 239
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1352:	99 85       	ldd	r25, Y+9	; 0x09
    1354:	92 30       	cpi	r25, 0x02	; 2
    1356:	88 f0       	brcs	.+34     	; 0x137a <__mulsf3+0x60>
    1358:	89 89       	ldd	r24, Y+17	; 0x11
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	c8 f0       	brcs	.+50     	; 0x1390 <__mulsf3+0x76>
    135e:	94 30       	cpi	r25, 0x04	; 4
    1360:	19 f4       	brne	.+6      	; 0x1368 <__mulsf3+0x4e>
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	51 f4       	brne	.+20     	; 0x137a <__mulsf3+0x60>
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <__mulsf3+0x56>
    1368:	84 30       	cpi	r24, 0x04	; 4
    136a:	29 f4       	brne	.+10     	; 0x1376 <__mulsf3+0x5c>
    136c:	92 30       	cpi	r25, 0x02	; 2
    136e:	81 f4       	brne	.+32     	; 0x1390 <__mulsf3+0x76>
    1370:	87 e9       	ldi	r24, 0x97	; 151
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	c6 c0       	rjmp	.+396    	; 0x1502 <__mulsf3+0x1e8>
    1376:	92 30       	cpi	r25, 0x02	; 2
    1378:	49 f4       	brne	.+18     	; 0x138c <__mulsf3+0x72>
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	8a 89       	ldd	r24, Y+18	; 0x12
    1380:	98 13       	cpse	r25, r24
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	2a 87       	std	Y+10, r18	; 0x0a
    1386:	ce 01       	movw	r24, r28
    1388:	09 96       	adiw	r24, 0x09	; 9
    138a:	bb c0       	rjmp	.+374    	; 0x1502 <__mulsf3+0x1e8>
    138c:	82 30       	cpi	r24, 0x02	; 2
    138e:	49 f4       	brne	.+18     	; 0x13a2 <__mulsf3+0x88>
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	8a 89       	ldd	r24, Y+18	; 0x12
    1396:	98 13       	cpse	r25, r24
    1398:	21 e0       	ldi	r18, 0x01	; 1
    139a:	2a 8b       	std	Y+18, r18	; 0x12
    139c:	ce 01       	movw	r24, r28
    139e:	41 96       	adiw	r24, 0x11	; 17
    13a0:	b0 c0       	rjmp	.+352    	; 0x1502 <__mulsf3+0x1e8>
    13a2:	2d 84       	ldd	r2, Y+13	; 0x0d
    13a4:	3e 84       	ldd	r3, Y+14	; 0x0e
    13a6:	4f 84       	ldd	r4, Y+15	; 0x0f
    13a8:	58 88       	ldd	r5, Y+16	; 0x10
    13aa:	6d 88       	ldd	r6, Y+21	; 0x15
    13ac:	7e 88       	ldd	r7, Y+22	; 0x16
    13ae:	8f 88       	ldd	r8, Y+23	; 0x17
    13b0:	98 8c       	ldd	r9, Y+24	; 0x18
    13b2:	ee 24       	eor	r14, r14
    13b4:	ff 24       	eor	r15, r15
    13b6:	87 01       	movw	r16, r14
    13b8:	aa 24       	eor	r10, r10
    13ba:	bb 24       	eor	r11, r11
    13bc:	65 01       	movw	r12, r10
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	e0 e0       	ldi	r30, 0x00	; 0
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	c1 01       	movw	r24, r2
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	90 70       	andi	r25, 0x00	; 0
    13d0:	89 2b       	or	r24, r25
    13d2:	e9 f0       	breq	.+58     	; 0x140e <__mulsf3+0xf4>
    13d4:	e6 0c       	add	r14, r6
    13d6:	f7 1c       	adc	r15, r7
    13d8:	08 1d       	adc	r16, r8
    13da:	19 1d       	adc	r17, r9
    13dc:	9a 01       	movw	r18, r20
    13de:	ab 01       	movw	r20, r22
    13e0:	2a 0d       	add	r18, r10
    13e2:	3b 1d       	adc	r19, r11
    13e4:	4c 1d       	adc	r20, r12
    13e6:	5d 1d       	adc	r21, r13
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a0 e0       	ldi	r26, 0x00	; 0
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e6 14       	cp	r14, r6
    13f2:	f7 04       	cpc	r15, r7
    13f4:	08 05       	cpc	r16, r8
    13f6:	19 05       	cpc	r17, r9
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <__mulsf3+0xe8>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e0       	ldi	r26, 0x00	; 0
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ba 01       	movw	r22, r20
    1404:	a9 01       	movw	r20, r18
    1406:	48 0f       	add	r20, r24
    1408:	59 1f       	adc	r21, r25
    140a:	6a 1f       	adc	r22, r26
    140c:	7b 1f       	adc	r23, r27
    140e:	aa 0c       	add	r10, r10
    1410:	bb 1c       	adc	r11, r11
    1412:	cc 1c       	adc	r12, r12
    1414:	dd 1c       	adc	r13, r13
    1416:	97 fe       	sbrs	r9, 7
    1418:	08 c0       	rjmp	.+16     	; 0x142a <__mulsf3+0x110>
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a0 e0       	ldi	r26, 0x00	; 0
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	a8 2a       	or	r10, r24
    1424:	b9 2a       	or	r11, r25
    1426:	ca 2a       	or	r12, r26
    1428:	db 2a       	or	r13, r27
    142a:	31 96       	adiw	r30, 0x01	; 1
    142c:	e0 32       	cpi	r30, 0x20	; 32
    142e:	f1 05       	cpc	r31, r1
    1430:	49 f0       	breq	.+18     	; 0x1444 <__mulsf3+0x12a>
    1432:	66 0c       	add	r6, r6
    1434:	77 1c       	adc	r7, r7
    1436:	88 1c       	adc	r8, r8
    1438:	99 1c       	adc	r9, r9
    143a:	56 94       	lsr	r5
    143c:	47 94       	ror	r4
    143e:	37 94       	ror	r3
    1440:	27 94       	ror	r2
    1442:	c3 cf       	rjmp	.-122    	; 0x13ca <__mulsf3+0xb0>
    1444:	fa 85       	ldd	r31, Y+10	; 0x0a
    1446:	ea 89       	ldd	r30, Y+18	; 0x12
    1448:	2b 89       	ldd	r18, Y+19	; 0x13
    144a:	3c 89       	ldd	r19, Y+20	; 0x14
    144c:	8b 85       	ldd	r24, Y+11	; 0x0b
    144e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1450:	28 0f       	add	r18, r24
    1452:	39 1f       	adc	r19, r25
    1454:	2e 5f       	subi	r18, 0xFE	; 254
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	17 c0       	rjmp	.+46     	; 0x1488 <__mulsf3+0x16e>
    145a:	ca 01       	movw	r24, r20
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	89 2b       	or	r24, r25
    1462:	61 f0       	breq	.+24     	; 0x147c <__mulsf3+0x162>
    1464:	16 95       	lsr	r17
    1466:	07 95       	ror	r16
    1468:	f7 94       	ror	r15
    146a:	e7 94       	ror	r14
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e8       	ldi	r27, 0x80	; 128
    1474:	e8 2a       	or	r14, r24
    1476:	f9 2a       	or	r15, r25
    1478:	0a 2b       	or	r16, r26
    147a:	1b 2b       	or	r17, r27
    147c:	76 95       	lsr	r23
    147e:	67 95       	ror	r22
    1480:	57 95       	ror	r21
    1482:	47 95       	ror	r20
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	77 fd       	sbrc	r23, 7
    148a:	e7 cf       	rjmp	.-50     	; 0x145a <__mulsf3+0x140>
    148c:	0c c0       	rjmp	.+24     	; 0x14a6 <__mulsf3+0x18c>
    148e:	44 0f       	add	r20, r20
    1490:	55 1f       	adc	r21, r21
    1492:	66 1f       	adc	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	17 fd       	sbrc	r17, 7
    1498:	41 60       	ori	r20, 0x01	; 1
    149a:	ee 0c       	add	r14, r14
    149c:	ff 1c       	adc	r15, r15
    149e:	00 1f       	adc	r16, r16
    14a0:	11 1f       	adc	r17, r17
    14a2:	21 50       	subi	r18, 0x01	; 1
    14a4:	30 40       	sbci	r19, 0x00	; 0
    14a6:	40 30       	cpi	r20, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	59 07       	cpc	r21, r25
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	69 07       	cpc	r22, r25
    14b0:	90 e4       	ldi	r25, 0x40	; 64
    14b2:	79 07       	cpc	r23, r25
    14b4:	60 f3       	brcs	.-40     	; 0x148e <__mulsf3+0x174>
    14b6:	2b 8f       	std	Y+27, r18	; 0x1b
    14b8:	3c 8f       	std	Y+28, r19	; 0x1c
    14ba:	db 01       	movw	r26, r22
    14bc:	ca 01       	movw	r24, r20
    14be:	8f 77       	andi	r24, 0x7F	; 127
    14c0:	90 70       	andi	r25, 0x00	; 0
    14c2:	a0 70       	andi	r26, 0x00	; 0
    14c4:	b0 70       	andi	r27, 0x00	; 0
    14c6:	80 34       	cpi	r24, 0x40	; 64
    14c8:	91 05       	cpc	r25, r1
    14ca:	a1 05       	cpc	r26, r1
    14cc:	b1 05       	cpc	r27, r1
    14ce:	61 f4       	brne	.+24     	; 0x14e8 <__mulsf3+0x1ce>
    14d0:	47 fd       	sbrc	r20, 7
    14d2:	0a c0       	rjmp	.+20     	; 0x14e8 <__mulsf3+0x1ce>
    14d4:	e1 14       	cp	r14, r1
    14d6:	f1 04       	cpc	r15, r1
    14d8:	01 05       	cpc	r16, r1
    14da:	11 05       	cpc	r17, r1
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <__mulsf3+0x1ce>
    14de:	40 5c       	subi	r20, 0xC0	; 192
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255
    14e2:	6f 4f       	sbci	r22, 0xFF	; 255
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	40 78       	andi	r20, 0x80	; 128
    14e8:	1a 8e       	std	Y+26, r1	; 0x1a
    14ea:	fe 17       	cp	r31, r30
    14ec:	11 f0       	breq	.+4      	; 0x14f2 <__mulsf3+0x1d8>
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	8a 8f       	std	Y+26, r24	; 0x1a
    14f2:	4d 8f       	std	Y+29, r20	; 0x1d
    14f4:	5e 8f       	std	Y+30, r21	; 0x1e
    14f6:	6f 8f       	std	Y+31, r22	; 0x1f
    14f8:	78 a3       	std	Y+32, r23	; 0x20
    14fa:	83 e0       	ldi	r24, 0x03	; 3
    14fc:	89 8f       	std	Y+25, r24	; 0x19
    14fe:	ce 01       	movw	r24, r28
    1500:	49 96       	adiw	r24, 0x19	; 25
    1502:	0e 94 17 0c 	call	0x182e	; 0x182e <__pack_f>
    1506:	a0 96       	adiw	r28, 0x20	; 32
    1508:	e2 e1       	ldi	r30, 0x12	; 18
    150a:	0c 94 47 31 	jmp	0x628e	; 0x628e <__epilogue_restores__>

0000150e <__divsf3>:
    150e:	a8 e1       	ldi	r26, 0x18	; 24
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ed e8       	ldi	r30, 0x8D	; 141
    1514:	fa e0       	ldi	r31, 0x0A	; 10
    1516:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__prologue_saves__+0x10>
    151a:	69 83       	std	Y+1, r22	; 0x01
    151c:	7a 83       	std	Y+2, r23	; 0x02
    151e:	8b 83       	std	Y+3, r24	; 0x03
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	2d 83       	std	Y+5, r18	; 0x05
    1524:	3e 83       	std	Y+6, r19	; 0x06
    1526:	4f 83       	std	Y+7, r20	; 0x07
    1528:	58 87       	std	Y+8, r21	; 0x08
    152a:	b9 e0       	ldi	r27, 0x09	; 9
    152c:	eb 2e       	mov	r14, r27
    152e:	f1 2c       	mov	r15, r1
    1530:	ec 0e       	add	r14, r28
    1532:	fd 1e       	adc	r15, r29
    1534:	ce 01       	movw	r24, r28
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	b7 01       	movw	r22, r14
    153a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    153e:	8e 01       	movw	r16, r28
    1540:	0f 5e       	subi	r16, 0xEF	; 239
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
    1544:	ce 01       	movw	r24, r28
    1546:	05 96       	adiw	r24, 0x05	; 5
    1548:	b8 01       	movw	r22, r16
    154a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    154e:	29 85       	ldd	r18, Y+9	; 0x09
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	08 f4       	brcc	.+2      	; 0x1556 <__divsf3+0x48>
    1554:	7e c0       	rjmp	.+252    	; 0x1652 <__divsf3+0x144>
    1556:	39 89       	ldd	r19, Y+17	; 0x11
    1558:	32 30       	cpi	r19, 0x02	; 2
    155a:	10 f4       	brcc	.+4      	; 0x1560 <__divsf3+0x52>
    155c:	b8 01       	movw	r22, r16
    155e:	7c c0       	rjmp	.+248    	; 0x1658 <__divsf3+0x14a>
    1560:	8a 85       	ldd	r24, Y+10	; 0x0a
    1562:	9a 89       	ldd	r25, Y+18	; 0x12
    1564:	89 27       	eor	r24, r25
    1566:	8a 87       	std	Y+10, r24	; 0x0a
    1568:	24 30       	cpi	r18, 0x04	; 4
    156a:	11 f0       	breq	.+4      	; 0x1570 <__divsf3+0x62>
    156c:	22 30       	cpi	r18, 0x02	; 2
    156e:	31 f4       	brne	.+12     	; 0x157c <__divsf3+0x6e>
    1570:	23 17       	cp	r18, r19
    1572:	09 f0       	breq	.+2      	; 0x1576 <__divsf3+0x68>
    1574:	6e c0       	rjmp	.+220    	; 0x1652 <__divsf3+0x144>
    1576:	67 e9       	ldi	r22, 0x97	; 151
    1578:	71 e0       	ldi	r23, 0x01	; 1
    157a:	6e c0       	rjmp	.+220    	; 0x1658 <__divsf3+0x14a>
    157c:	34 30       	cpi	r19, 0x04	; 4
    157e:	39 f4       	brne	.+14     	; 0x158e <__divsf3+0x80>
    1580:	1d 86       	std	Y+13, r1	; 0x0d
    1582:	1e 86       	std	Y+14, r1	; 0x0e
    1584:	1f 86       	std	Y+15, r1	; 0x0f
    1586:	18 8a       	std	Y+16, r1	; 0x10
    1588:	1c 86       	std	Y+12, r1	; 0x0c
    158a:	1b 86       	std	Y+11, r1	; 0x0b
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__divsf3+0x88>
    158e:	32 30       	cpi	r19, 0x02	; 2
    1590:	21 f4       	brne	.+8      	; 0x159a <__divsf3+0x8c>
    1592:	84 e0       	ldi	r24, 0x04	; 4
    1594:	89 87       	std	Y+9, r24	; 0x09
    1596:	b7 01       	movw	r22, r14
    1598:	5f c0       	rjmp	.+190    	; 0x1658 <__divsf3+0x14a>
    159a:	2b 85       	ldd	r18, Y+11	; 0x0b
    159c:	3c 85       	ldd	r19, Y+12	; 0x0c
    159e:	8b 89       	ldd	r24, Y+19	; 0x13
    15a0:	9c 89       	ldd	r25, Y+20	; 0x14
    15a2:	28 1b       	sub	r18, r24
    15a4:	39 0b       	sbc	r19, r25
    15a6:	3c 87       	std	Y+12, r19	; 0x0c
    15a8:	2b 87       	std	Y+11, r18	; 0x0b
    15aa:	ed 84       	ldd	r14, Y+13	; 0x0d
    15ac:	fe 84       	ldd	r15, Y+14	; 0x0e
    15ae:	0f 85       	ldd	r16, Y+15	; 0x0f
    15b0:	18 89       	ldd	r17, Y+16	; 0x10
    15b2:	ad 88       	ldd	r10, Y+21	; 0x15
    15b4:	be 88       	ldd	r11, Y+22	; 0x16
    15b6:	cf 88       	ldd	r12, Y+23	; 0x17
    15b8:	d8 8c       	ldd	r13, Y+24	; 0x18
    15ba:	ea 14       	cp	r14, r10
    15bc:	fb 04       	cpc	r15, r11
    15be:	0c 05       	cpc	r16, r12
    15c0:	1d 05       	cpc	r17, r13
    15c2:	40 f4       	brcc	.+16     	; 0x15d4 <__divsf3+0xc6>
    15c4:	ee 0c       	add	r14, r14
    15c6:	ff 1c       	adc	r15, r15
    15c8:	00 1f       	adc	r16, r16
    15ca:	11 1f       	adc	r17, r17
    15cc:	21 50       	subi	r18, 0x01	; 1
    15ce:	30 40       	sbci	r19, 0x00	; 0
    15d0:	3c 87       	std	Y+12, r19	; 0x0c
    15d2:	2b 87       	std	Y+11, r18	; 0x0b
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	b0 e4       	ldi	r27, 0x40	; 64
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	ea 14       	cp	r14, r10
    15ea:	fb 04       	cpc	r15, r11
    15ec:	0c 05       	cpc	r16, r12
    15ee:	1d 05       	cpc	r17, r13
    15f0:	40 f0       	brcs	.+16     	; 0x1602 <__divsf3+0xf4>
    15f2:	28 2b       	or	r18, r24
    15f4:	39 2b       	or	r19, r25
    15f6:	4a 2b       	or	r20, r26
    15f8:	5b 2b       	or	r21, r27
    15fa:	ea 18       	sub	r14, r10
    15fc:	fb 08       	sbc	r15, r11
    15fe:	0c 09       	sbc	r16, r12
    1600:	1d 09       	sbc	r17, r13
    1602:	b6 95       	lsr	r27
    1604:	a7 95       	ror	r26
    1606:	97 95       	ror	r25
    1608:	87 95       	ror	r24
    160a:	ee 0c       	add	r14, r14
    160c:	ff 1c       	adc	r15, r15
    160e:	00 1f       	adc	r16, r16
    1610:	11 1f       	adc	r17, r17
    1612:	6f 5f       	subi	r22, 0xFF	; 255
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	6f 31       	cpi	r22, 0x1F	; 31
    1618:	71 05       	cpc	r23, r1
    161a:	31 f7       	brne	.-52     	; 0x15e8 <__divsf3+0xda>
    161c:	da 01       	movw	r26, r20
    161e:	c9 01       	movw	r24, r18
    1620:	8f 77       	andi	r24, 0x7F	; 127
    1622:	90 70       	andi	r25, 0x00	; 0
    1624:	a0 70       	andi	r26, 0x00	; 0
    1626:	b0 70       	andi	r27, 0x00	; 0
    1628:	80 34       	cpi	r24, 0x40	; 64
    162a:	91 05       	cpc	r25, r1
    162c:	a1 05       	cpc	r26, r1
    162e:	b1 05       	cpc	r27, r1
    1630:	61 f4       	brne	.+24     	; 0x164a <__divsf3+0x13c>
    1632:	27 fd       	sbrc	r18, 7
    1634:	0a c0       	rjmp	.+20     	; 0x164a <__divsf3+0x13c>
    1636:	e1 14       	cp	r14, r1
    1638:	f1 04       	cpc	r15, r1
    163a:	01 05       	cpc	r16, r1
    163c:	11 05       	cpc	r17, r1
    163e:	29 f0       	breq	.+10     	; 0x164a <__divsf3+0x13c>
    1640:	20 5c       	subi	r18, 0xC0	; 192
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	4f 4f       	sbci	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	20 78       	andi	r18, 0x80	; 128
    164a:	2d 87       	std	Y+13, r18	; 0x0d
    164c:	3e 87       	std	Y+14, r19	; 0x0e
    164e:	4f 87       	std	Y+15, r20	; 0x0f
    1650:	58 8b       	std	Y+16, r21	; 0x10
    1652:	be 01       	movw	r22, r28
    1654:	67 5f       	subi	r22, 0xF7	; 247
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	cb 01       	movw	r24, r22
    165a:	0e 94 17 0c 	call	0x182e	; 0x182e <__pack_f>
    165e:	68 96       	adiw	r28, 0x18	; 24
    1660:	ea e0       	ldi	r30, 0x0A	; 10
    1662:	0c 94 4f 31 	jmp	0x629e	; 0x629e <__epilogue_restores__+0x10>

00001666 <__gtsf2>:
    1666:	a8 e1       	ldi	r26, 0x18	; 24
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e9 e3       	ldi	r30, 0x39	; 57
    166c:	fb e0       	ldi	r31, 0x0B	; 11
    166e:	0c 94 37 31 	jmp	0x626e	; 0x626e <__prologue_saves__+0x18>
    1672:	69 83       	std	Y+1, r22	; 0x01
    1674:	7a 83       	std	Y+2, r23	; 0x02
    1676:	8b 83       	std	Y+3, r24	; 0x03
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	2d 83       	std	Y+5, r18	; 0x05
    167c:	3e 83       	std	Y+6, r19	; 0x06
    167e:	4f 83       	std	Y+7, r20	; 0x07
    1680:	58 87       	std	Y+8, r21	; 0x08
    1682:	89 e0       	ldi	r24, 0x09	; 9
    1684:	e8 2e       	mov	r14, r24
    1686:	f1 2c       	mov	r15, r1
    1688:	ec 0e       	add	r14, r28
    168a:	fd 1e       	adc	r15, r29
    168c:	ce 01       	movw	r24, r28
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	b7 01       	movw	r22, r14
    1692:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1696:	8e 01       	movw	r16, r28
    1698:	0f 5e       	subi	r16, 0xEF	; 239
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	ce 01       	movw	r24, r28
    169e:	05 96       	adiw	r24, 0x05	; 5
    16a0:	b8 01       	movw	r22, r16
    16a2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	40 f0       	brcs	.+16     	; 0x16bc <__gtsf2+0x56>
    16ac:	89 89       	ldd	r24, Y+17	; 0x11
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	28 f0       	brcs	.+10     	; 0x16bc <__gtsf2+0x56>
    16b2:	c7 01       	movw	r24, r14
    16b4:	b8 01       	movw	r22, r16
    16b6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__fpcmp_parts_f>
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <__gtsf2+0x58>
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	68 96       	adiw	r28, 0x18	; 24
    16c0:	e6 e0       	ldi	r30, 0x06	; 6
    16c2:	0c 94 53 31 	jmp	0x62a6	; 0x62a6 <__epilogue_restores__+0x18>

000016c6 <__gesf2>:
    16c6:	a8 e1       	ldi	r26, 0x18	; 24
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e9 e6       	ldi	r30, 0x69	; 105
    16cc:	fb e0       	ldi	r31, 0x0B	; 11
    16ce:	0c 94 37 31 	jmp	0x626e	; 0x626e <__prologue_saves__+0x18>
    16d2:	69 83       	std	Y+1, r22	; 0x01
    16d4:	7a 83       	std	Y+2, r23	; 0x02
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	2d 83       	std	Y+5, r18	; 0x05
    16dc:	3e 83       	std	Y+6, r19	; 0x06
    16de:	4f 83       	std	Y+7, r20	; 0x07
    16e0:	58 87       	std	Y+8, r21	; 0x08
    16e2:	89 e0       	ldi	r24, 0x09	; 9
    16e4:	e8 2e       	mov	r14, r24
    16e6:	f1 2c       	mov	r15, r1
    16e8:	ec 0e       	add	r14, r28
    16ea:	fd 1e       	adc	r15, r29
    16ec:	ce 01       	movw	r24, r28
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	b7 01       	movw	r22, r14
    16f2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    16f6:	8e 01       	movw	r16, r28
    16f8:	0f 5e       	subi	r16, 0xEF	; 239
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	ce 01       	movw	r24, r28
    16fe:	05 96       	adiw	r24, 0x05	; 5
    1700:	b8 01       	movw	r22, r16
    1702:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	40 f0       	brcs	.+16     	; 0x171c <__gesf2+0x56>
    170c:	89 89       	ldd	r24, Y+17	; 0x11
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	28 f0       	brcs	.+10     	; 0x171c <__gesf2+0x56>
    1712:	c7 01       	movw	r24, r14
    1714:	b8 01       	movw	r22, r16
    1716:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__fpcmp_parts_f>
    171a:	01 c0       	rjmp	.+2      	; 0x171e <__gesf2+0x58>
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	68 96       	adiw	r28, 0x18	; 24
    1720:	e6 e0       	ldi	r30, 0x06	; 6
    1722:	0c 94 53 31 	jmp	0x62a6	; 0x62a6 <__epilogue_restores__+0x18>

00001726 <__ltsf2>:
    1726:	a8 e1       	ldi	r26, 0x18	; 24
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e9 e9       	ldi	r30, 0x99	; 153
    172c:	fb e0       	ldi	r31, 0x0B	; 11
    172e:	0c 94 37 31 	jmp	0x626e	; 0x626e <__prologue_saves__+0x18>
    1732:	69 83       	std	Y+1, r22	; 0x01
    1734:	7a 83       	std	Y+2, r23	; 0x02
    1736:	8b 83       	std	Y+3, r24	; 0x03
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	2d 83       	std	Y+5, r18	; 0x05
    173c:	3e 83       	std	Y+6, r19	; 0x06
    173e:	4f 83       	std	Y+7, r20	; 0x07
    1740:	58 87       	std	Y+8, r21	; 0x08
    1742:	89 e0       	ldi	r24, 0x09	; 9
    1744:	e8 2e       	mov	r14, r24
    1746:	f1 2c       	mov	r15, r1
    1748:	ec 0e       	add	r14, r28
    174a:	fd 1e       	adc	r15, r29
    174c:	ce 01       	movw	r24, r28
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	b7 01       	movw	r22, r14
    1752:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1756:	8e 01       	movw	r16, r28
    1758:	0f 5e       	subi	r16, 0xEF	; 239
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
    175c:	ce 01       	movw	r24, r28
    175e:	05 96       	adiw	r24, 0x05	; 5
    1760:	b8 01       	movw	r22, r16
    1762:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	40 f0       	brcs	.+16     	; 0x177c <__ltsf2+0x56>
    176c:	89 89       	ldd	r24, Y+17	; 0x11
    176e:	82 30       	cpi	r24, 0x02	; 2
    1770:	28 f0       	brcs	.+10     	; 0x177c <__ltsf2+0x56>
    1772:	c7 01       	movw	r24, r14
    1774:	b8 01       	movw	r22, r16
    1776:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__fpcmp_parts_f>
    177a:	01 c0       	rjmp	.+2      	; 0x177e <__ltsf2+0x58>
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	68 96       	adiw	r28, 0x18	; 24
    1780:	e6 e0       	ldi	r30, 0x06	; 6
    1782:	0c 94 53 31 	jmp	0x62a6	; 0x62a6 <__epilogue_restores__+0x18>

00001786 <__fixsfsi>:
    1786:	ac e0       	ldi	r26, 0x0C	; 12
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e9 ec       	ldi	r30, 0xC9	; 201
    178c:	fb e0       	ldi	r31, 0x0B	; 11
    178e:	0c 94 3b 31 	jmp	0x6276	; 0x6276 <__prologue_saves__+0x20>
    1792:	69 83       	std	Y+1, r22	; 0x01
    1794:	7a 83       	std	Y+2, r23	; 0x02
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	ce 01       	movw	r24, r28
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	be 01       	movw	r22, r28
    17a0:	6b 5f       	subi	r22, 0xFB	; 251
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__unpack_f>
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	61 f1       	breq	.+88     	; 0x1806 <__fixsfsi+0x80>
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	50 f1       	brcs	.+84     	; 0x1806 <__fixsfsi+0x80>
    17b2:	84 30       	cpi	r24, 0x04	; 4
    17b4:	21 f4       	brne	.+8      	; 0x17be <__fixsfsi+0x38>
    17b6:	8e 81       	ldd	r24, Y+6	; 0x06
    17b8:	88 23       	and	r24, r24
    17ba:	51 f1       	breq	.+84     	; 0x1810 <__fixsfsi+0x8a>
    17bc:	2e c0       	rjmp	.+92     	; 0x181a <__fixsfsi+0x94>
    17be:	2f 81       	ldd	r18, Y+7	; 0x07
    17c0:	38 85       	ldd	r19, Y+8	; 0x08
    17c2:	37 fd       	sbrc	r19, 7
    17c4:	20 c0       	rjmp	.+64     	; 0x1806 <__fixsfsi+0x80>
    17c6:	6e 81       	ldd	r22, Y+6	; 0x06
    17c8:	2f 31       	cpi	r18, 0x1F	; 31
    17ca:	31 05       	cpc	r19, r1
    17cc:	1c f0       	brlt	.+6      	; 0x17d4 <__fixsfsi+0x4e>
    17ce:	66 23       	and	r22, r22
    17d0:	f9 f0       	breq	.+62     	; 0x1810 <__fixsfsi+0x8a>
    17d2:	23 c0       	rjmp	.+70     	; 0x181a <__fixsfsi+0x94>
    17d4:	8e e1       	ldi	r24, 0x1E	; 30
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	82 1b       	sub	r24, r18
    17da:	93 0b       	sbc	r25, r19
    17dc:	29 85       	ldd	r18, Y+9	; 0x09
    17de:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    17e2:	5c 85       	ldd	r21, Y+12	; 0x0c
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <__fixsfsi+0x68>
    17e6:	56 95       	lsr	r21
    17e8:	47 95       	ror	r20
    17ea:	37 95       	ror	r19
    17ec:	27 95       	ror	r18
    17ee:	8a 95       	dec	r24
    17f0:	d2 f7       	brpl	.-12     	; 0x17e6 <__fixsfsi+0x60>
    17f2:	66 23       	and	r22, r22
    17f4:	b1 f0       	breq	.+44     	; 0x1822 <__fixsfsi+0x9c>
    17f6:	50 95       	com	r21
    17f8:	40 95       	com	r20
    17fa:	30 95       	com	r19
    17fc:	21 95       	neg	r18
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	4f 4f       	sbci	r20, 0xFF	; 255
    1802:	5f 4f       	sbci	r21, 0xFF	; 255
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <__fixsfsi+0x9c>
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <__fixsfsi+0x9c>
    1810:	2f ef       	ldi	r18, 0xFF	; 255
    1812:	3f ef       	ldi	r19, 0xFF	; 255
    1814:	4f ef       	ldi	r20, 0xFF	; 255
    1816:	5f e7       	ldi	r21, 0x7F	; 127
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <__fixsfsi+0x9c>
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	50 e8       	ldi	r21, 0x80	; 128
    1822:	b9 01       	movw	r22, r18
    1824:	ca 01       	movw	r24, r20
    1826:	2c 96       	adiw	r28, 0x0c	; 12
    1828:	e2 e0       	ldi	r30, 0x02	; 2
    182a:	0c 94 57 31 	jmp	0x62ae	; 0x62ae <__epilogue_restores__+0x20>

0000182e <__pack_f>:
    182e:	df 92       	push	r13
    1830:	ef 92       	push	r14
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	fc 01       	movw	r30, r24
    183a:	e4 80       	ldd	r14, Z+4	; 0x04
    183c:	f5 80       	ldd	r15, Z+5	; 0x05
    183e:	06 81       	ldd	r16, Z+6	; 0x06
    1840:	17 81       	ldd	r17, Z+7	; 0x07
    1842:	d1 80       	ldd	r13, Z+1	; 0x01
    1844:	80 81       	ld	r24, Z
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	48 f4       	brcc	.+18     	; 0x185c <__pack_f+0x2e>
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e1       	ldi	r26, 0x10	; 16
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e8 2a       	or	r14, r24
    1854:	f9 2a       	or	r15, r25
    1856:	0a 2b       	or	r16, r26
    1858:	1b 2b       	or	r17, r27
    185a:	a5 c0       	rjmp	.+330    	; 0x19a6 <__pack_f+0x178>
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	09 f4       	brne	.+2      	; 0x1862 <__pack_f+0x34>
    1860:	9f c0       	rjmp	.+318    	; 0x19a0 <__pack_f+0x172>
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	21 f4       	brne	.+8      	; 0x186e <__pack_f+0x40>
    1866:	ee 24       	eor	r14, r14
    1868:	ff 24       	eor	r15, r15
    186a:	87 01       	movw	r16, r14
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <__pack_f+0x4a>
    186e:	e1 14       	cp	r14, r1
    1870:	f1 04       	cpc	r15, r1
    1872:	01 05       	cpc	r16, r1
    1874:	11 05       	cpc	r17, r1
    1876:	19 f4       	brne	.+6      	; 0x187e <__pack_f+0x50>
    1878:	e0 e0       	ldi	r30, 0x00	; 0
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	96 c0       	rjmp	.+300    	; 0x19aa <__pack_f+0x17c>
    187e:	62 81       	ldd	r22, Z+2	; 0x02
    1880:	73 81       	ldd	r23, Z+3	; 0x03
    1882:	9f ef       	ldi	r25, 0xFF	; 255
    1884:	62 38       	cpi	r22, 0x82	; 130
    1886:	79 07       	cpc	r23, r25
    1888:	0c f0       	brlt	.+2      	; 0x188c <__pack_f+0x5e>
    188a:	5b c0       	rjmp	.+182    	; 0x1942 <__pack_f+0x114>
    188c:	22 e8       	ldi	r18, 0x82	; 130
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	26 1b       	sub	r18, r22
    1892:	37 0b       	sbc	r19, r23
    1894:	2a 31       	cpi	r18, 0x1A	; 26
    1896:	31 05       	cpc	r19, r1
    1898:	2c f0       	brlt	.+10     	; 0x18a4 <__pack_f+0x76>
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	2a c0       	rjmp	.+84     	; 0x18f8 <__pack_f+0xca>
    18a4:	b8 01       	movw	r22, r16
    18a6:	a7 01       	movw	r20, r14
    18a8:	02 2e       	mov	r0, r18
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <__pack_f+0x86>
    18ac:	76 95       	lsr	r23
    18ae:	67 95       	ror	r22
    18b0:	57 95       	ror	r21
    18b2:	47 95       	ror	r20
    18b4:	0a 94       	dec	r0
    18b6:	d2 f7       	brpl	.-12     	; 0x18ac <__pack_f+0x7e>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e0       	ldi	r26, 0x00	; 0
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <__pack_f+0x9c>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	aa 1f       	adc	r26, r26
    18c8:	bb 1f       	adc	r27, r27
    18ca:	2a 95       	dec	r18
    18cc:	d2 f7       	brpl	.-12     	; 0x18c2 <__pack_f+0x94>
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	a1 09       	sbc	r26, r1
    18d2:	b1 09       	sbc	r27, r1
    18d4:	8e 21       	and	r24, r14
    18d6:	9f 21       	and	r25, r15
    18d8:	a0 23       	and	r26, r16
    18da:	b1 23       	and	r27, r17
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	a1 05       	cpc	r26, r1
    18e0:	b1 05       	cpc	r27, r1
    18e2:	21 f0       	breq	.+8      	; 0x18ec <__pack_f+0xbe>
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	9a 01       	movw	r18, r20
    18ee:	ab 01       	movw	r20, r22
    18f0:	28 2b       	or	r18, r24
    18f2:	39 2b       	or	r19, r25
    18f4:	4a 2b       	or	r20, r26
    18f6:	5b 2b       	or	r21, r27
    18f8:	da 01       	movw	r26, r20
    18fa:	c9 01       	movw	r24, r18
    18fc:	8f 77       	andi	r24, 0x7F	; 127
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	a0 70       	andi	r26, 0x00	; 0
    1902:	b0 70       	andi	r27, 0x00	; 0
    1904:	80 34       	cpi	r24, 0x40	; 64
    1906:	91 05       	cpc	r25, r1
    1908:	a1 05       	cpc	r26, r1
    190a:	b1 05       	cpc	r27, r1
    190c:	39 f4       	brne	.+14     	; 0x191c <__pack_f+0xee>
    190e:	27 ff       	sbrs	r18, 7
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <__pack_f+0xf6>
    1912:	20 5c       	subi	r18, 0xC0	; 192
    1914:	3f 4f       	sbci	r19, 0xFF	; 255
    1916:	4f 4f       	sbci	r20, 0xFF	; 255
    1918:	5f 4f       	sbci	r21, 0xFF	; 255
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <__pack_f+0xf6>
    191c:	21 5c       	subi	r18, 0xC1	; 193
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	4f 4f       	sbci	r20, 0xFF	; 255
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	e0 e0       	ldi	r30, 0x00	; 0
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	20 30       	cpi	r18, 0x00	; 0
    192a:	a0 e0       	ldi	r26, 0x00	; 0
    192c:	3a 07       	cpc	r19, r26
    192e:	a0 e0       	ldi	r26, 0x00	; 0
    1930:	4a 07       	cpc	r20, r26
    1932:	a0 e4       	ldi	r26, 0x40	; 64
    1934:	5a 07       	cpc	r21, r26
    1936:	10 f0       	brcs	.+4      	; 0x193c <__pack_f+0x10e>
    1938:	e1 e0       	ldi	r30, 0x01	; 1
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	79 01       	movw	r14, r18
    193e:	8a 01       	movw	r16, r20
    1940:	27 c0       	rjmp	.+78     	; 0x1990 <__pack_f+0x162>
    1942:	60 38       	cpi	r22, 0x80	; 128
    1944:	71 05       	cpc	r23, r1
    1946:	64 f5       	brge	.+88     	; 0x19a0 <__pack_f+0x172>
    1948:	fb 01       	movw	r30, r22
    194a:	e1 58       	subi	r30, 0x81	; 129
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	d8 01       	movw	r26, r16
    1950:	c7 01       	movw	r24, r14
    1952:	8f 77       	andi	r24, 0x7F	; 127
    1954:	90 70       	andi	r25, 0x00	; 0
    1956:	a0 70       	andi	r26, 0x00	; 0
    1958:	b0 70       	andi	r27, 0x00	; 0
    195a:	80 34       	cpi	r24, 0x40	; 64
    195c:	91 05       	cpc	r25, r1
    195e:	a1 05       	cpc	r26, r1
    1960:	b1 05       	cpc	r27, r1
    1962:	39 f4       	brne	.+14     	; 0x1972 <__pack_f+0x144>
    1964:	e7 fe       	sbrs	r14, 7
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <__pack_f+0x154>
    1968:	80 e4       	ldi	r24, 0x40	; 64
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	04 c0       	rjmp	.+8      	; 0x197a <__pack_f+0x14c>
    1972:	8f e3       	ldi	r24, 0x3F	; 63
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e8 0e       	add	r14, r24
    197c:	f9 1e       	adc	r15, r25
    197e:	0a 1f       	adc	r16, r26
    1980:	1b 1f       	adc	r17, r27
    1982:	17 ff       	sbrs	r17, 7
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <__pack_f+0x162>
    1986:	16 95       	lsr	r17
    1988:	07 95       	ror	r16
    198a:	f7 94       	ror	r15
    198c:	e7 94       	ror	r14
    198e:	31 96       	adiw	r30, 0x01	; 1
    1990:	87 e0       	ldi	r24, 0x07	; 7
    1992:	16 95       	lsr	r17
    1994:	07 95       	ror	r16
    1996:	f7 94       	ror	r15
    1998:	e7 94       	ror	r14
    199a:	8a 95       	dec	r24
    199c:	d1 f7       	brne	.-12     	; 0x1992 <__pack_f+0x164>
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <__pack_f+0x17c>
    19a0:	ee 24       	eor	r14, r14
    19a2:	ff 24       	eor	r15, r15
    19a4:	87 01       	movw	r16, r14
    19a6:	ef ef       	ldi	r30, 0xFF	; 255
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	6e 2f       	mov	r22, r30
    19ac:	67 95       	ror	r22
    19ae:	66 27       	eor	r22, r22
    19b0:	67 95       	ror	r22
    19b2:	90 2f       	mov	r25, r16
    19b4:	9f 77       	andi	r25, 0x7F	; 127
    19b6:	d7 94       	ror	r13
    19b8:	dd 24       	eor	r13, r13
    19ba:	d7 94       	ror	r13
    19bc:	8e 2f       	mov	r24, r30
    19be:	86 95       	lsr	r24
    19c0:	49 2f       	mov	r20, r25
    19c2:	46 2b       	or	r20, r22
    19c4:	58 2f       	mov	r21, r24
    19c6:	5d 29       	or	r21, r13
    19c8:	b7 01       	movw	r22, r14
    19ca:	ca 01       	movw	r24, r20
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	08 95       	ret

000019d8 <__unpack_f>:
    19d8:	fc 01       	movw	r30, r24
    19da:	db 01       	movw	r26, r22
    19dc:	40 81       	ld	r20, Z
    19de:	51 81       	ldd	r21, Z+1	; 0x01
    19e0:	22 81       	ldd	r18, Z+2	; 0x02
    19e2:	62 2f       	mov	r22, r18
    19e4:	6f 77       	andi	r22, 0x7F	; 127
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	22 1f       	adc	r18, r18
    19ea:	22 27       	eor	r18, r18
    19ec:	22 1f       	adc	r18, r18
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	89 2f       	mov	r24, r25
    19f2:	88 0f       	add	r24, r24
    19f4:	82 2b       	or	r24, r18
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	99 1f       	adc	r25, r25
    19fc:	99 27       	eor	r25, r25
    19fe:	99 1f       	adc	r25, r25
    1a00:	11 96       	adiw	r26, 0x01	; 1
    1a02:	9c 93       	st	X, r25
    1a04:	11 97       	sbiw	r26, 0x01	; 1
    1a06:	21 15       	cp	r18, r1
    1a08:	31 05       	cpc	r19, r1
    1a0a:	a9 f5       	brne	.+106    	; 0x1a76 <__unpack_f+0x9e>
    1a0c:	41 15       	cp	r20, r1
    1a0e:	51 05       	cpc	r21, r1
    1a10:	61 05       	cpc	r22, r1
    1a12:	71 05       	cpc	r23, r1
    1a14:	11 f4       	brne	.+4      	; 0x1a1a <__unpack_f+0x42>
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	37 c0       	rjmp	.+110    	; 0x1a88 <__unpack_f+0xb0>
    1a1a:	82 e8       	ldi	r24, 0x82	; 130
    1a1c:	9f ef       	ldi	r25, 0xFF	; 255
    1a1e:	13 96       	adiw	r26, 0x03	; 3
    1a20:	9c 93       	st	X, r25
    1a22:	8e 93       	st	-X, r24
    1a24:	12 97       	sbiw	r26, 0x02	; 2
    1a26:	9a 01       	movw	r18, r20
    1a28:	ab 01       	movw	r20, r22
    1a2a:	67 e0       	ldi	r22, 0x07	; 7
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	44 1f       	adc	r20, r20
    1a32:	55 1f       	adc	r21, r21
    1a34:	6a 95       	dec	r22
    1a36:	d1 f7       	brne	.-12     	; 0x1a2c <__unpack_f+0x54>
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	8c 93       	st	X, r24
    1a3c:	0d c0       	rjmp	.+26     	; 0x1a58 <__unpack_f+0x80>
    1a3e:	22 0f       	add	r18, r18
    1a40:	33 1f       	adc	r19, r19
    1a42:	44 1f       	adc	r20, r20
    1a44:	55 1f       	adc	r21, r21
    1a46:	12 96       	adiw	r26, 0x02	; 2
    1a48:	8d 91       	ld	r24, X+
    1a4a:	9c 91       	ld	r25, X
    1a4c:	13 97       	sbiw	r26, 0x03	; 3
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	13 96       	adiw	r26, 0x03	; 3
    1a52:	9c 93       	st	X, r25
    1a54:	8e 93       	st	-X, r24
    1a56:	12 97       	sbiw	r26, 0x02	; 2
    1a58:	20 30       	cpi	r18, 0x00	; 0
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	38 07       	cpc	r19, r24
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	48 07       	cpc	r20, r24
    1a62:	80 e4       	ldi	r24, 0x40	; 64
    1a64:	58 07       	cpc	r21, r24
    1a66:	58 f3       	brcs	.-42     	; 0x1a3e <__unpack_f+0x66>
    1a68:	14 96       	adiw	r26, 0x04	; 4
    1a6a:	2d 93       	st	X+, r18
    1a6c:	3d 93       	st	X+, r19
    1a6e:	4d 93       	st	X+, r20
    1a70:	5c 93       	st	X, r21
    1a72:	17 97       	sbiw	r26, 0x07	; 7
    1a74:	08 95       	ret
    1a76:	2f 3f       	cpi	r18, 0xFF	; 255
    1a78:	31 05       	cpc	r19, r1
    1a7a:	79 f4       	brne	.+30     	; 0x1a9a <__unpack_f+0xc2>
    1a7c:	41 15       	cp	r20, r1
    1a7e:	51 05       	cpc	r21, r1
    1a80:	61 05       	cpc	r22, r1
    1a82:	71 05       	cpc	r23, r1
    1a84:	19 f4       	brne	.+6      	; 0x1a8c <__unpack_f+0xb4>
    1a86:	84 e0       	ldi	r24, 0x04	; 4
    1a88:	8c 93       	st	X, r24
    1a8a:	08 95       	ret
    1a8c:	64 ff       	sbrs	r22, 4
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <__unpack_f+0xbe>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	8c 93       	st	X, r24
    1a94:	12 c0       	rjmp	.+36     	; 0x1aba <__unpack_f+0xe2>
    1a96:	1c 92       	st	X, r1
    1a98:	10 c0       	rjmp	.+32     	; 0x1aba <__unpack_f+0xe2>
    1a9a:	2f 57       	subi	r18, 0x7F	; 127
    1a9c:	30 40       	sbci	r19, 0x00	; 0
    1a9e:	13 96       	adiw	r26, 0x03	; 3
    1aa0:	3c 93       	st	X, r19
    1aa2:	2e 93       	st	-X, r18
    1aa4:	12 97       	sbiw	r26, 0x02	; 2
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	8c 93       	st	X, r24
    1aaa:	87 e0       	ldi	r24, 0x07	; 7
    1aac:	44 0f       	add	r20, r20
    1aae:	55 1f       	adc	r21, r21
    1ab0:	66 1f       	adc	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	8a 95       	dec	r24
    1ab6:	d1 f7       	brne	.-12     	; 0x1aac <__unpack_f+0xd4>
    1ab8:	70 64       	ori	r23, 0x40	; 64
    1aba:	14 96       	adiw	r26, 0x04	; 4
    1abc:	4d 93       	st	X+, r20
    1abe:	5d 93       	st	X+, r21
    1ac0:	6d 93       	st	X+, r22
    1ac2:	7c 93       	st	X, r23
    1ac4:	17 97       	sbiw	r26, 0x07	; 7
    1ac6:	08 95       	ret

00001ac8 <__fpcmp_parts_f>:
    1ac8:	1f 93       	push	r17
    1aca:	dc 01       	movw	r26, r24
    1acc:	fb 01       	movw	r30, r22
    1ace:	9c 91       	ld	r25, X
    1ad0:	92 30       	cpi	r25, 0x02	; 2
    1ad2:	08 f4       	brcc	.+2      	; 0x1ad6 <__fpcmp_parts_f+0xe>
    1ad4:	47 c0       	rjmp	.+142    	; 0x1b64 <__fpcmp_parts_f+0x9c>
    1ad6:	80 81       	ld	r24, Z
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	08 f4       	brcc	.+2      	; 0x1ade <__fpcmp_parts_f+0x16>
    1adc:	43 c0       	rjmp	.+134    	; 0x1b64 <__fpcmp_parts_f+0x9c>
    1ade:	94 30       	cpi	r25, 0x04	; 4
    1ae0:	51 f4       	brne	.+20     	; 0x1af6 <__fpcmp_parts_f+0x2e>
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	1c 91       	ld	r17, X
    1ae6:	84 30       	cpi	r24, 0x04	; 4
    1ae8:	99 f5       	brne	.+102    	; 0x1b50 <__fpcmp_parts_f+0x88>
    1aea:	81 81       	ldd	r24, Z+1	; 0x01
    1aec:	68 2f       	mov	r22, r24
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	61 1b       	sub	r22, r17
    1af2:	71 09       	sbc	r23, r1
    1af4:	3f c0       	rjmp	.+126    	; 0x1b74 <__fpcmp_parts_f+0xac>
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	21 f0       	breq	.+8      	; 0x1b02 <__fpcmp_parts_f+0x3a>
    1afa:	92 30       	cpi	r25, 0x02	; 2
    1afc:	31 f4       	brne	.+12     	; 0x1b0a <__fpcmp_parts_f+0x42>
    1afe:	82 30       	cpi	r24, 0x02	; 2
    1b00:	b9 f1       	breq	.+110    	; 0x1b70 <__fpcmp_parts_f+0xa8>
    1b02:	81 81       	ldd	r24, Z+1	; 0x01
    1b04:	88 23       	and	r24, r24
    1b06:	89 f1       	breq	.+98     	; 0x1b6a <__fpcmp_parts_f+0xa2>
    1b08:	2d c0       	rjmp	.+90     	; 0x1b64 <__fpcmp_parts_f+0x9c>
    1b0a:	11 96       	adiw	r26, 0x01	; 1
    1b0c:	1c 91       	ld	r17, X
    1b0e:	11 97       	sbiw	r26, 0x01	; 1
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	f1 f0       	breq	.+60     	; 0x1b50 <__fpcmp_parts_f+0x88>
    1b14:	81 81       	ldd	r24, Z+1	; 0x01
    1b16:	18 17       	cp	r17, r24
    1b18:	d9 f4       	brne	.+54     	; 0x1b50 <__fpcmp_parts_f+0x88>
    1b1a:	12 96       	adiw	r26, 0x02	; 2
    1b1c:	2d 91       	ld	r18, X+
    1b1e:	3c 91       	ld	r19, X
    1b20:	13 97       	sbiw	r26, 0x03	; 3
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	82 17       	cp	r24, r18
    1b28:	93 07       	cpc	r25, r19
    1b2a:	94 f0       	brlt	.+36     	; 0x1b50 <__fpcmp_parts_f+0x88>
    1b2c:	28 17       	cp	r18, r24
    1b2e:	39 07       	cpc	r19, r25
    1b30:	bc f0       	brlt	.+46     	; 0x1b60 <__fpcmp_parts_f+0x98>
    1b32:	14 96       	adiw	r26, 0x04	; 4
    1b34:	8d 91       	ld	r24, X+
    1b36:	9d 91       	ld	r25, X+
    1b38:	0d 90       	ld	r0, X+
    1b3a:	bc 91       	ld	r27, X
    1b3c:	a0 2d       	mov	r26, r0
    1b3e:	24 81       	ldd	r18, Z+4	; 0x04
    1b40:	35 81       	ldd	r19, Z+5	; 0x05
    1b42:	46 81       	ldd	r20, Z+6	; 0x06
    1b44:	57 81       	ldd	r21, Z+7	; 0x07
    1b46:	28 17       	cp	r18, r24
    1b48:	39 07       	cpc	r19, r25
    1b4a:	4a 07       	cpc	r20, r26
    1b4c:	5b 07       	cpc	r21, r27
    1b4e:	18 f4       	brcc	.+6      	; 0x1b56 <__fpcmp_parts_f+0x8e>
    1b50:	11 23       	and	r17, r17
    1b52:	41 f0       	breq	.+16     	; 0x1b64 <__fpcmp_parts_f+0x9c>
    1b54:	0a c0       	rjmp	.+20     	; 0x1b6a <__fpcmp_parts_f+0xa2>
    1b56:	82 17       	cp	r24, r18
    1b58:	93 07       	cpc	r25, r19
    1b5a:	a4 07       	cpc	r26, r20
    1b5c:	b5 07       	cpc	r27, r21
    1b5e:	40 f4       	brcc	.+16     	; 0x1b70 <__fpcmp_parts_f+0xa8>
    1b60:	11 23       	and	r17, r17
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <__fpcmp_parts_f+0xa2>
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	05 c0       	rjmp	.+10     	; 0x1b74 <__fpcmp_parts_f+0xac>
    1b6a:	6f ef       	ldi	r22, 0xFF	; 255
    1b6c:	7f ef       	ldi	r23, 0xFF	; 255
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <__fpcmp_parts_f+0xac>
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	cb 01       	movw	r24, r22
    1b76:	1f 91       	pop	r17
    1b78:	08 95       	ret

00001b7a <HEEPROM_voidInit>:
#include"HEEPROM_interface.h"

#define F_CPU 8000000UL
#include <util/delay.h>

void HEEPROM_voidInit(u8 Copy_u8frequency){
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	0f 92       	push	r0
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	89 83       	std	Y+1, r24	; 0x01
	MTWI_MasterInit(Copy_u8frequency);
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	0e 94 b9 2a 	call	0x5572	; 0x5572 <MTWI_MasterInit>
}
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <HEEPROM_u8WriteByte>:

u8 HEEPROM_u8WriteByte(u8 Copy_u8Data , u16 Copy_u16Address){
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	63 97       	sbiw	r28, 0x13	; 19
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	89 8b       	std	Y+17, r24	; 0x11
    1baa:	7b 8b       	std	Y+19, r23	; 0x13
    1bac:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	88 8b       	std	Y+16, r24	; 0x10
	TWI_ErrorState Local_EnumCheckError = TWI_OK;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	8f 87       	std	Y+15, r24	; 0x0f
	/*Send Start Condition*/
	Local_EnumCheckError = MTWI_SendStartCondition();
    1bb6:	0e 94 32 2b 	call	0x5664	; 0x5664 <MTWI_SendStartCondition>
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <HEEPROM_u8WriteByte+0x30>
		Local_u8ErrorState = STD_TYPES_NOK;
    1bc2:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Send the slave address*/
	Local_EnumCheckError = MTWI_SendSlaveAddressWithWrite((EEPROM_Fixed_Address) | (EEPROM_CHIP_SELECT<<2) |((u8)(Copy_u16Address>>8)));
    1bc4:	8a 89       	ldd	r24, Y+18	; 0x12
    1bc6:	9b 89       	ldd	r25, Y+19	; 0x13
    1bc8:	89 2f       	mov	r24, r25
    1bca:	99 27       	eor	r25, r25
    1bcc:	80 65       	ori	r24, 0x50	; 80
    1bce:	0e 94 82 2b 	call	0x5704	; 0x5704 <MTWI_SendSlaveAddressWithWrite>
    1bd2:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <HEEPROM_u8WriteByte+0x48>
		Local_u8ErrorState = STD_TYPES_NOK;
    1bda:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Send the internal address as a data*/
	Local_EnumCheckError = MTWI_SendDataByte((u8)Copy_u16Address);
    1bdc:	8a 89       	ldd	r24, Y+18	; 0x12
    1bde:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <MTWI_SendDataByte>
    1be2:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	09 f0       	breq	.+2      	; 0x1bec <HEEPROM_u8WriteByte+0x58>
		Local_u8ErrorState = STD_TYPES_NOK;
    1bea:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Send the data*/
	Local_EnumCheckError = MTWI_SendDataByte(Copy_u8Data);
    1bec:	89 89       	ldd	r24, Y+17	; 0x11
    1bee:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <MTWI_SendDataByte>
    1bf2:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <HEEPROM_u8WriteByte+0x68>
		Local_u8ErrorState = STD_TYPES_NOK;
    1bfa:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Stop Condition*/
	MTWI_SendStopCondition();
    1bfc:	0e 94 4c 2c 	call	0x5898	; 0x5898 <MTWI_SendStopCondition>
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a0 e2       	ldi	r26, 0x20	; 32
    1c06:	b1 e4       	ldi	r27, 0x41	; 65
    1c08:	8b 87       	std	Y+11, r24	; 0x0b
    1c0a:	9c 87       	std	Y+12, r25	; 0x0c
    1c0c:	ad 87       	std	Y+13, r26	; 0x0d
    1c0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	4a ef       	ldi	r20, 0xFA	; 250
    1c1e:	54 e4       	ldi	r21, 0x44	; 68
    1c20:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	8f 83       	std	Y+7, r24	; 0x07
    1c2a:	98 87       	std	Y+8, r25	; 0x08
    1c2c:	a9 87       	std	Y+9, r26	; 0x09
    1c2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c30:	6f 81       	ldd	r22, Y+7	; 0x07
    1c32:	78 85       	ldd	r23, Y+8	; 0x08
    1c34:	89 85       	ldd	r24, Y+9	; 0x09
    1c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    1c44:	88 23       	and	r24, r24
    1c46:	2c f4       	brge	.+10     	; 0x1c52 <HEEPROM_u8WriteByte+0xbe>
		__ticks = 1;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	3f c0       	rjmp	.+126    	; 0x1cd0 <HEEPROM_u8WriteByte+0x13c>
	else if (__tmp > 65535)
    1c52:	6f 81       	ldd	r22, Y+7	; 0x07
    1c54:	78 85       	ldd	r23, Y+8	; 0x08
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	3f ef       	ldi	r19, 0xFF	; 255
    1c5e:	4f e7       	ldi	r20, 0x7F	; 127
    1c60:	57 e4       	ldi	r21, 0x47	; 71
    1c62:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    1c66:	18 16       	cp	r1, r24
    1c68:	4c f5       	brge	.+82     	; 0x1cbc <HEEPROM_u8WriteByte+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e2       	ldi	r20, 0x20	; 32
    1c78:	51 e4       	ldi	r21, 0x41	; 65
    1c7a:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <HEEPROM_u8WriteByte+0x11e>
    1c94:	88 ec       	ldi	r24, 0xC8	; 200
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9c 83       	std	Y+4, r25	; 0x04
    1c9a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <HEEPROM_u8WriteByte+0x10c>
    1ca4:	9c 83       	std	Y+4, r25	; 0x04
    1ca6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	69 f7       	brne	.-38     	; 0x1c94 <HEEPROM_u8WriteByte+0x100>
    1cba:	14 c0       	rjmp	.+40     	; 0x1ce4 <HEEPROM_u8WriteByte+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9e 83       	std	Y+6, r25	; 0x06
    1cce:	8d 83       	std	Y+5, r24	; 0x05
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd4:	9a 83       	std	Y+2, r25	; 0x02
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <HEEPROM_u8WriteByte+0x148>
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	/*Some delay time*/
	_delay_ms(10);

	return Local_u8ErrorState;
    1ce4:	88 89       	ldd	r24, Y+16	; 0x10
}
    1ce6:	63 96       	adiw	r28, 0x13	; 19
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <HEEPROM_u8ReadByte>:

u8 HEEPROM_u8ReadByte(u8* Copy_pu8RecievedData , u16 Copy_u16Address){
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	64 97       	sbiw	r28, 0x14	; 20
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	9a 8b       	std	Y+18, r25	; 0x12
    1d0e:	89 8b       	std	Y+17, r24	; 0x11
    1d10:	7c 8b       	std	Y+20, r23	; 0x14
    1d12:	6b 8b       	std	Y+19, r22	; 0x13
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	88 8b       	std	Y+16, r24	; 0x10
	TWI_ErrorState Local_EnumCheckError = TWI_OK;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Send Start Condition*/
	if(Copy_pu8RecievedData != STD_TYPES_NULL){
    1d1c:	89 89       	ldd	r24, Y+17	; 0x11
    1d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <HEEPROM_u8ReadByte+0x2e>
    1d24:	ac c0       	rjmp	.+344    	; 0x1e7e <HEEPROM_u8ReadByte+0x186>
	Local_EnumCheckError = MTWI_SendStartCondition();
    1d26:	0e 94 32 2b 	call	0x5664	; 0x5664 <MTWI_SendStartCondition>
    1d2a:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <HEEPROM_u8ReadByte+0x3c>
		Local_u8ErrorState = STD_TYPES_NOK;
    1d32:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Send the slave address with write*/
	Local_EnumCheckError = MTWI_SendSlaveAddressWithWrite((EEPROM_Fixed_Address) | (EEPROM_CHIP_SELECT<<2) |((u8)(Copy_u16Address>>8)));
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	89 2f       	mov	r24, r25
    1d3a:	99 27       	eor	r25, r25
    1d3c:	80 65       	ori	r24, 0x50	; 80
    1d3e:	0e 94 82 2b 	call	0x5704	; 0x5704 <MTWI_SendSlaveAddressWithWrite>
    1d42:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1d44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <HEEPROM_u8ReadByte+0x54>
		Local_u8ErrorState = STD_TYPES_NOK;
    1d4a:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Send the internal Address*/
	Local_EnumCheckError = MTWI_SendDataByte((u8)Copy_u16Address);
    1d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4e:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <MTWI_SendDataByte>
    1d52:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <HEEPROM_u8ReadByte+0x64>
		Local_u8ErrorState = STD_TYPES_NOK;
    1d5a:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Send Repeated Start*/
	Local_EnumCheckError = MTWI_SendRepeatedStartCondition();
    1d5c:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <MTWI_SendRepeatedStartCondition>
    1d60:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <HEEPROM_u8ReadByte+0x72>
		Local_u8ErrorState = STD_TYPES_NOK;
    1d68:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Send Slave Address with read*/
	Local_EnumCheckError = MTWI_SendSlaveAddressWithRead((EEPROM_Fixed_Address) | (EEPROM_CHIP_SELECT<<2) |((u8)(Copy_u16Address>>8)));
    1d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6e:	89 2f       	mov	r24, r25
    1d70:	99 27       	eor	r25, r25
    1d72:	80 65       	ori	r24, 0x50	; 80
    1d74:	0e 94 b9 2b 	call	0x5772	; 0x5772 <MTWI_SendSlaveAddressWithRead>
    1d78:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <HEEPROM_u8ReadByte+0x8a>
		Local_u8ErrorState = STD_TYPES_NOK;
    1d80:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Receive Byte*/
	/*Send the address of the received pointer to receive the data*/
	Local_EnumCheckError = MTWI_RecieveDataByte(Copy_pu8RecievedData);
    1d82:	89 89       	ldd	r24, Y+17	; 0x11
    1d84:	9a 89       	ldd	r25, Y+18	; 0x12
    1d86:	0e 94 18 2c 	call	0x5830	; 0x5830 <MTWI_RecieveDataByte>
    1d8a:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_EnumCheckError != TWI_OK){
    1d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <HEEPROM_u8ReadByte+0x9c>
		Local_u8ErrorState = STD_TYPES_NOK;
    1d92:	18 8a       	std	Y+16, r1	; 0x10
	}
	/*Stop Condition*/
	MTWI_SendStopCondition();
    1d94:	0e 94 4c 2c 	call	0x5898	; 0x5898 <MTWI_SendStopCondition>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e2       	ldi	r26, 0x20	; 32
    1d9e:	b1 e4       	ldi	r27, 0x41	; 65
    1da0:	8b 87       	std	Y+11, r24	; 0x0b
    1da2:	9c 87       	std	Y+12, r25	; 0x0c
    1da4:	ad 87       	std	Y+13, r26	; 0x0d
    1da6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a ef       	ldi	r20, 0xFA	; 250
    1db6:	54 e4       	ldi	r21, 0x44	; 68
    1db8:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8f 83       	std	Y+7, r24	; 0x07
    1dc2:	98 87       	std	Y+8, r25	; 0x08
    1dc4:	a9 87       	std	Y+9, r26	; 0x09
    1dc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dca:	78 85       	ldd	r23, Y+8	; 0x08
    1dcc:	89 85       	ldd	r24, Y+9	; 0x09
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <HEEPROM_u8ReadByte+0xf2>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9e 83       	std	Y+6, r25	; 0x06
    1de6:	8d 83       	std	Y+5, r24	; 0x05
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <HEEPROM_u8ReadByte+0x170>
	else if (__tmp > 65535)
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <HEEPROM_u8ReadByte+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <HEEPROM_u8ReadByte+0x152>
    1e2c:	88 ec       	ldi	r24, 0xC8	; 200
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9c 83       	std	Y+4, r25	; 0x04
    1e32:	8b 83       	std	Y+3, r24	; 0x03
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <HEEPROM_u8ReadByte+0x140>
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <HEEPROM_u8ReadByte+0x134>
    1e52:	16 c0       	rjmp	.+44     	; 0x1e80 <HEEPROM_u8ReadByte+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	6f 81       	ldd	r22, Y+7	; 0x07
    1e56:	78 85       	ldd	r23, Y+8	; 0x08
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <HEEPROM_u8ReadByte+0x17c>
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <HEEPROM_u8ReadByte+0x188>
	/*Some Delay time*/
	_delay_ms(10);
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1e7e:	18 8a       	std	Y+16, r1	; 0x10
	}
	return Local_u8ErrorState;
    1e80:	88 89       	ldd	r24, Y+16	; 0x10
}
    1e82:	64 96       	adiw	r28, 0x14	; 20
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <HKPD_u8GetKey>:
u8 HKPD_Au8ColPort[4]={HKPD_u8_C0_PORT,HKPD_u8_C1_PORT,HKPD_u8_C2_PORT,HKPD_u8_C3_PORT};

u8 HKPD_Au8Keys[4][4]=HKPD_KEYS;

u8 HKPD_u8GetKey(u8* Copy_Pu8_RetKey)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	a3 97       	sbiw	r28, 0x23	; 35
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	9b a3       	std	Y+35, r25	; 0x23
    1eaa:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState=STD_TYPES_OK;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8RowCounter;
	u8 Local_u8ColCounter;
	u8 Local_u8RetPinValue,Local_u8Flag=0;
    1eb0:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Copy_Pu8_RetKey!=STD_TYPES_NULL)
    1eb2:	8a a1       	ldd	r24, Y+34	; 0x22
    1eb4:	9b a1       	ldd	r25, Y+35	; 0x23
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <HKPD_u8GetKey+0x28>
    1eba:	6f c1       	rjmp	.+734    	; 0x219a <HKPD_u8GetKey+0x306>
	{
		*Copy_Pu8_RetKey=HKPD_u8_NO_KEY_PRESSED;
    1ebc:	ea a1       	ldd	r30, Y+34	; 0x22
    1ebe:	fb a1       	ldd	r31, Y+35	; 0x23
    1ec0:	8f ef       	ldi	r24, 0xFF	; 255
    1ec2:	80 83       	st	Z, r24
		/*Activate Each Row*/
		for(Local_u8RowCounter=0;Local_u8RowCounter<4;Local_u8RowCounter++)
    1ec4:	1f 8e       	std	Y+31, r1	; 0x1f
    1ec6:	64 c1       	rjmp	.+712    	; 0x2190 <HKPD_u8GetKey+0x2fc>
		{
			/*Activate Row*/
			MDIO_u8SetPinValue(HKPD_Au8RowPort[Local_u8RowCounter],HKPD_Au8RowPins[Local_u8RowCounter],
    1ec8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	fc 01       	movw	r30, r24
    1ed0:	ed 55       	subi	r30, 0x5D	; 93
    1ed2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed4:	20 81       	ld	r18, Z
    1ed6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	fc 01       	movw	r30, r24
    1ede:	e1 56       	subi	r30, 0x61	; 97
    1ee0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee2:	90 81       	ld	r25, Z
    1ee4:	82 2f       	mov	r24, r18
    1ee6:	69 2f       	mov	r22, r25
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
					MDIO_u8_LOW);
			/*Check columns*/
			for(Local_u8ColCounter=0;Local_u8ColCounter<4;Local_u8ColCounter++)
    1eee:	1e 8e       	std	Y+30, r1	; 0x1e
    1ef0:	32 c1       	rjmp	.+612    	; 0x2156 <HKPD_u8GetKey+0x2c2>
			{
				MDIO_u8GetPinValue(HKPD_Au8ColPort[Local_u8ColCounter],HKPD_Au8ColPins[Local_u8ColCounter],
    1ef2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e5 55       	subi	r30, 0x55	; 85
    1efc:	fd 4f       	sbci	r31, 0xFD	; 253
    1efe:	40 81       	ld	r20, Z
    1f00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	fc 01       	movw	r30, r24
    1f08:	e9 55       	subi	r30, 0x59	; 89
    1f0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f0c:	90 81       	ld	r25, Z
    1f0e:	9e 01       	movw	r18, r28
    1f10:	2f 5d       	subi	r18, 0xDF	; 223
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	84 2f       	mov	r24, r20
    1f16:	69 2f       	mov	r22, r25
    1f18:	a9 01       	movw	r20, r18
    1f1a:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <MDIO_u8GetPinValue>
								&Local_u8RetPinValue);
				if(Local_u8RetPinValue==MDIO_u8_LOW){
    1f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f20:	88 23       	and	r24, r24
    1f22:	09 f0       	breq	.+2      	; 0x1f26 <HKPD_u8GetKey+0x92>
    1f24:	15 c1       	rjmp	.+554    	; 0x2150 <HKPD_u8GetKey+0x2bc>
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a0 ea       	ldi	r26, 0xA0	; 160
    1f2c:	b1 e4       	ldi	r27, 0x41	; 65
    1f2e:	89 8f       	std	Y+25, r24	; 0x19
    1f30:	9a 8f       	std	Y+26, r25	; 0x1a
    1f32:	ab 8f       	std	Y+27, r26	; 0x1b
    1f34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	69 8d       	ldd	r22, Y+25	; 0x19
    1f38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a ef       	ldi	r20, 0xFA	; 250
    1f44:	54 e4       	ldi	r21, 0x44	; 68
    1f46:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	8d 8b       	std	Y+21, r24	; 0x15
    1f50:	9e 8b       	std	Y+22, r25	; 0x16
    1f52:	af 8b       	std	Y+23, r26	; 0x17
    1f54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f56:	6d 89       	ldd	r22, Y+21	; 0x15
    1f58:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <HKPD_u8GetKey+0xe4>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9c 8b       	std	Y+20, r25	; 0x14
    1f74:	8b 8b       	std	Y+19, r24	; 0x13
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <HKPD_u8GetKey+0x162>
	else if (__tmp > 65535)
    1f78:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <HKPD_u8GetKey+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	69 8d       	ldd	r22, Y+25	; 0x19
    1f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9c 8b       	std	Y+20, r25	; 0x14
    1fb6:	8b 8b       	std	Y+19, r24	; 0x13
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <HKPD_u8GetKey+0x144>
    1fba:	88 ec       	ldi	r24, 0xC8	; 200
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9a 8b       	std	Y+18, r25	; 0x12
    1fc0:	89 8b       	std	Y+17, r24	; 0x11
    1fc2:	89 89       	ldd	r24, Y+17	; 0x11
    1fc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <HKPD_u8GetKey+0x132>
    1fca:	9a 8b       	std	Y+18, r25	; 0x12
    1fcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9c 8b       	std	Y+20, r25	; 0x14
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fda:	9c 89       	ldd	r25, Y+20	; 0x14
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <HKPD_u8GetKey+0x126>
    1fe0:	2b c0       	rjmp	.+86     	; 0x2038 <HKPD_u8GetKey+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fea:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9c 8b       	std	Y+20, r25	; 0x14
    1ff4:	8b 8b       	std	Y+19, r24	; 0x13
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	98 8b       	std	Y+16, r25	; 0x10
    1ffc:	8f 87       	std	Y+15, r24	; 0x0f
    1ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2000:	98 89       	ldd	r25, Y+16	; 0x10
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <HKPD_u8GetKey+0x16e>
    2006:	98 8b       	std	Y+16, r25	; 0x10
    2008:	8f 87       	std	Y+15, r24	; 0x0f
    200a:	16 c0       	rjmp	.+44     	; 0x2038 <HKPD_u8GetKey+0x1a4>
					/*wait for debouncing*/
					_delay_ms(20);
					while(Local_u8RetPinValue==MDIO_u8_LOW)
					{
					  MDIO_u8GetPinValue(HKPD_Au8ColPort[Local_u8ColCounter],HKPD_Au8ColPins[Local_u8ColCounter],
    200c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	fc 01       	movw	r30, r24
    2014:	e5 55       	subi	r30, 0x55	; 85
    2016:	fd 4f       	sbci	r31, 0xFD	; 253
    2018:	40 81       	ld	r20, Z
    201a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    201c:	88 2f       	mov	r24, r24
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	fc 01       	movw	r30, r24
    2022:	e9 55       	subi	r30, 0x59	; 89
    2024:	fd 4f       	sbci	r31, 0xFD	; 253
    2026:	90 81       	ld	r25, Z
    2028:	9e 01       	movw	r18, r28
    202a:	2f 5d       	subi	r18, 0xDF	; 223
    202c:	3f 4f       	sbci	r19, 0xFF	; 255
    202e:	84 2f       	mov	r24, r20
    2030:	69 2f       	mov	r22, r25
    2032:	a9 01       	movw	r20, r18
    2034:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <MDIO_u8GetPinValue>
				MDIO_u8GetPinValue(HKPD_Au8ColPort[Local_u8ColCounter],HKPD_Au8ColPins[Local_u8ColCounter],
								&Local_u8RetPinValue);
				if(Local_u8RetPinValue==MDIO_u8_LOW){
					/*wait for debouncing*/
					_delay_ms(20);
					while(Local_u8RetPinValue==MDIO_u8_LOW)
    2038:	89 a1       	ldd	r24, Y+33	; 0x21
    203a:	88 23       	and	r24, r24
    203c:	39 f3       	breq	.-50     	; 0x200c <HKPD_u8GetKey+0x178>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 ea       	ldi	r26, 0xA0	; 160
    2044:	b1 e4       	ldi	r27, 0x41	; 65
    2046:	8b 87       	std	Y+11, r24	; 0x0b
    2048:	9c 87       	std	Y+12, r25	; 0x0c
    204a:	ad 87       	std	Y+13, r26	; 0x0d
    204c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2050:	7c 85       	ldd	r23, Y+12	; 0x0c
    2052:	8d 85       	ldd	r24, Y+13	; 0x0d
    2054:	9e 85       	ldd	r25, Y+14	; 0x0e
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	4a ef       	ldi	r20, 0xFA	; 250
    205c:	54 e4       	ldi	r21, 0x44	; 68
    205e:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	8f 83       	std	Y+7, r24	; 0x07
    2068:	98 87       	std	Y+8, r25	; 0x08
    206a:	a9 87       	std	Y+9, r26	; 0x09
    206c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    206e:	6f 81       	ldd	r22, Y+7	; 0x07
    2070:	78 85       	ldd	r23, Y+8	; 0x08
    2072:	89 85       	ldd	r24, Y+9	; 0x09
    2074:	9a 85       	ldd	r25, Y+10	; 0x0a
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e8       	ldi	r20, 0x80	; 128
    207c:	5f e3       	ldi	r21, 0x3F	; 63
    207e:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    2082:	88 23       	and	r24, r24
    2084:	2c f4       	brge	.+10     	; 0x2090 <HKPD_u8GetKey+0x1fc>
		__ticks = 1;
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	3f c0       	rjmp	.+126    	; 0x210e <HKPD_u8GetKey+0x27a>
	else if (__tmp > 65535)
    2090:	6f 81       	ldd	r22, Y+7	; 0x07
    2092:	78 85       	ldd	r23, Y+8	; 0x08
    2094:	89 85       	ldd	r24, Y+9	; 0x09
    2096:	9a 85       	ldd	r25, Y+10	; 0x0a
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	3f ef       	ldi	r19, 0xFF	; 255
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	57 e4       	ldi	r21, 0x47	; 71
    20a0:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	4c f5       	brge	.+82     	; 0x20fa <HKPD_u8GetKey+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e2       	ldi	r20, 0x20	; 32
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	0f c0       	rjmp	.+30     	; 0x20f0 <HKPD_u8GetKey+0x25c>
    20d2:	88 ec       	ldi	r24, 0xC8	; 200
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	9c 83       	std	Y+4, r25	; 0x04
    20d8:	8b 83       	std	Y+3, r24	; 0x03
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <HKPD_u8GetKey+0x24a>
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	69 f7       	brne	.-38     	; 0x20d2 <HKPD_u8GetKey+0x23e>
    20f8:	14 c0       	rjmp	.+40     	; 0x2122 <HKPD_u8GetKey+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fa:	6f 81       	ldd	r22, Y+7	; 0x07
    20fc:	78 85       	ldd	r23, Y+8	; 0x08
    20fe:	89 85       	ldd	r24, Y+9	; 0x09
    2100:	9a 85       	ldd	r25, Y+10	; 0x0a
    2102:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <HKPD_u8GetKey+0x286>
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
					  MDIO_u8GetPinValue(HKPD_Au8ColPort[Local_u8ColCounter],HKPD_Au8ColPins[Local_u8ColCounter],
										&Local_u8RetPinValue);
					}
					_delay_ms(20);
					/*return value*/
					*Copy_Pu8_RetKey=HKPD_Au8Keys[Local_u8RowCounter][Local_u8ColCounter];
    2122:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2124:	48 2f       	mov	r20, r24
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	8e 8d       	ldd	r24, Y+30	; 0x1e
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	ca 01       	movw	r24, r20
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	82 0f       	add	r24, r18
    213a:	93 1f       	adc	r25, r19
    213c:	fc 01       	movw	r30, r24
    213e:	e1 55       	subi	r30, 0x51	; 81
    2140:	fd 4f       	sbci	r31, 0xFD	; 253
    2142:	80 81       	ld	r24, Z
    2144:	ea a1       	ldd	r30, Y+34	; 0x22
    2146:	fb a1       	ldd	r31, Y+35	; 0x23
    2148:	80 83       	st	Z, r24
					Local_u8Flag=1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	8d 8f       	std	Y+29, r24	; 0x1d
    214e:	07 c0       	rjmp	.+14     	; 0x215e <HKPD_u8GetKey+0x2ca>
		{
			/*Activate Row*/
			MDIO_u8SetPinValue(HKPD_Au8RowPort[Local_u8RowCounter],HKPD_Au8RowPins[Local_u8RowCounter],
					MDIO_u8_LOW);
			/*Check columns*/
			for(Local_u8ColCounter=0;Local_u8ColCounter<4;Local_u8ColCounter++)
    2150:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2152:	8f 5f       	subi	r24, 0xFF	; 255
    2154:	8e 8f       	std	Y+30, r24	; 0x1e
    2156:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2158:	84 30       	cpi	r24, 0x04	; 4
    215a:	08 f4       	brcc	.+2      	; 0x215e <HKPD_u8GetKey+0x2ca>
    215c:	ca ce       	rjmp	.-620    	; 0x1ef2 <HKPD_u8GetKey+0x5e>
					Local_u8Flag=1;
					break;
				}
			}
			/*Dectivate row*/
			MDIO_u8SetPinValue(HKPD_Au8RowPort[Local_u8RowCounter],HKPD_Au8RowPins[Local_u8RowCounter],
    215e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	fc 01       	movw	r30, r24
    2166:	ed 55       	subi	r30, 0x5D	; 93
    2168:	fd 4f       	sbci	r31, 0xFD	; 253
    216a:	20 81       	ld	r18, Z
    216c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	fc 01       	movw	r30, r24
    2174:	e1 56       	subi	r30, 0x61	; 97
    2176:	fd 4f       	sbci	r31, 0xFD	; 253
    2178:	90 81       	ld	r25, Z
    217a:	82 2f       	mov	r24, r18
    217c:	69 2f       	mov	r22, r25
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
					MDIO_u8_HIGH);
			if(Local_u8Flag)
    2184:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2186:	88 23       	and	r24, r24
    2188:	49 f4       	brne	.+18     	; 0x219c <HKPD_u8GetKey+0x308>
	u8 Local_u8RetPinValue,Local_u8Flag=0;
	if(Copy_Pu8_RetKey!=STD_TYPES_NULL)
	{
		*Copy_Pu8_RetKey=HKPD_u8_NO_KEY_PRESSED;
		/*Activate Each Row*/
		for(Local_u8RowCounter=0;Local_u8RowCounter<4;Local_u8RowCounter++)
    218a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    218c:	8f 5f       	subi	r24, 0xFF	; 255
    218e:	8f 8f       	std	Y+31, r24	; 0x1f
    2190:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2192:	84 30       	cpi	r24, 0x04	; 4
    2194:	08 f4       	brcc	.+2      	; 0x2198 <HKPD_u8GetKey+0x304>
    2196:	98 ce       	rjmp	.-720    	; 0x1ec8 <HKPD_u8GetKey+0x34>
    2198:	01 c0       	rjmp	.+2      	; 0x219c <HKPD_u8GetKey+0x308>
			if(Local_u8Flag)
				break;
		}
	}
	else
		Local_u8ErrorState=STD_TYPES_NOK;
    219a:	18 a2       	std	Y+32, r1	; 0x20

	return Local_u8ErrorState;
    219c:	88 a1       	ldd	r24, Y+32	; 0x20
}
    219e:	a3 96       	adiw	r28, 0x23	; 35
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <HLCD_voidINIT>:
#include"HLCD_config.h"
#define F_CPU 8000000UL
#include<avr/delay.h>

void HLCD_voidINIT(void)
{
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	c6 55       	subi	r28, 0x56	; 86
    21be:	d0 40       	sbci	r29, 0x00	; 0
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	fe 01       	movw	r30, r28
    21cc:	ed 5a       	subi	r30, 0xAD	; 173
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a8 ef       	ldi	r26, 0xF8	; 248
    21d6:	b1 e4       	ldi	r27, 0x41	; 65
    21d8:	80 83       	st	Z, r24
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	a2 83       	std	Z+2, r26	; 0x02
    21de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21e0:	8e 01       	movw	r16, r28
    21e2:	01 5b       	subi	r16, 0xB1	; 177
    21e4:	1f 4f       	sbci	r17, 0xFF	; 255
    21e6:	fe 01       	movw	r30, r28
    21e8:	ed 5a       	subi	r30, 0xAD	; 173
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	2b ea       	ldi	r18, 0xAB	; 171
    21f6:	3a ea       	ldi	r19, 0xAA	; 170
    21f8:	4a e2       	ldi	r20, 0x2A	; 42
    21fa:	50 e4       	ldi	r21, 0x40	; 64
    21fc:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	f8 01       	movw	r30, r16
    2206:	80 83       	st	Z, r24
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	a2 83       	std	Z+2, r26	; 0x02
    220c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    220e:	fe 01       	movw	r30, r28
    2210:	e1 5b       	subi	r30, 0xB1	; 177
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e8       	ldi	r20, 0x80	; 128
    2222:	5f e3       	ldi	r21, 0x3F	; 63
    2224:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    2228:	88 23       	and	r24, r24
    222a:	34 f4       	brge	.+12     	; 0x2238 <HLCD_voidINIT+0x88>
		__ticks = 1;
    222c:	fe 01       	movw	r30, r28
    222e:	e2 5b       	subi	r30, 0xB2	; 178
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	80 83       	st	Z, r24
    2236:	e0 c0       	rjmp	.+448    	; 0x23f8 <HLCD_voidINIT+0x248>
	else if (__tmp > 255)
    2238:	fe 01       	movw	r30, r28
    223a:	e1 5b       	subi	r30, 0xB1	; 177
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	60 81       	ld	r22, Z
    2240:	71 81       	ldd	r23, Z+1	; 0x01
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	93 81       	ldd	r25, Z+3	; 0x03
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	53 e4       	ldi	r21, 0x43	; 67
    224e:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	0c f0       	brlt	.+2      	; 0x2258 <HLCD_voidINIT+0xa8>
    2256:	c0 c0       	rjmp	.+384    	; 0x23d8 <HLCD_voidINIT+0x228>
	{
		_delay_ms(__us / 1000.0);
    2258:	fe 01       	movw	r30, r28
    225a:	ed 5a       	subi	r30, 0xAD	; 173
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4a e7       	ldi	r20, 0x7A	; 122
    226c:	54 e4       	ldi	r21, 0x44	; 68
    226e:	0e 94 87 0a 	call	0x150e	; 0x150e <__divsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	fe 01       	movw	r30, r28
    2278:	e6 5b       	subi	r30, 0xB6	; 182
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 83       	st	Z, r24
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	a2 83       	std	Z+2, r26	; 0x02
    2282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	8e 01       	movw	r16, r28
    2286:	0a 5b       	subi	r16, 0xBA	; 186
    2288:	1f 4f       	sbci	r17, 0xFF	; 255
    228a:	fe 01       	movw	r30, r28
    228c:	e6 5b       	subi	r30, 0xB6	; 182
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a ef       	ldi	r20, 0xFA	; 250
    229e:	54 e4       	ldi	r21, 0x44	; 68
    22a0:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	80 83       	st	Z, r24
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	a2 83       	std	Z+2, r26	; 0x02
    22b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b2:	fe 01       	movw	r30, r28
    22b4:	ea 5b       	subi	r30, 0xBA	; 186
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	60 81       	ld	r22, Z
    22ba:	71 81       	ldd	r23, Z+1	; 0x01
    22bc:	82 81       	ldd	r24, Z+2	; 0x02
    22be:	93 81       	ldd	r25, Z+3	; 0x03
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	44 f4       	brge	.+16     	; 0x22e0 <HLCD_voidINIT+0x130>
		__ticks = 1;
    22d0:	fe 01       	movw	r30, r28
    22d2:	ec 5b       	subi	r30, 0xBC	; 188
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	80 83       	st	Z, r24
    22de:	64 c0       	rjmp	.+200    	; 0x23a8 <HLCD_voidINIT+0x1f8>
	else if (__tmp > 65535)
    22e0:	fe 01       	movw	r30, r28
    22e2:	ea 5b       	subi	r30, 0xBA	; 186
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	3f ef       	ldi	r19, 0xFF	; 255
    22f2:	4f e7       	ldi	r20, 0x7F	; 127
    22f4:	57 e4       	ldi	r21, 0x47	; 71
    22f6:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	0c f0       	brlt	.+2      	; 0x2300 <HLCD_voidINIT+0x150>
    22fe:	43 c0       	rjmp	.+134    	; 0x2386 <HLCD_voidINIT+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2300:	fe 01       	movw	r30, r28
    2302:	e6 5b       	subi	r30, 0xB6	; 182
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8e 01       	movw	r16, r28
    2320:	0c 5b       	subi	r16, 0xBC	; 188
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	f8 01       	movw	r30, r16
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	1f c0       	rjmp	.+62     	; 0x2376 <HLCD_voidINIT+0x1c6>
    2338:	fe 01       	movw	r30, r28
    233a:	ee 5b       	subi	r30, 0xBE	; 190
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	88 ec       	ldi	r24, 0xC8	; 200
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	91 83       	std	Z+1, r25	; 0x01
    2344:	80 83       	st	Z, r24
    2346:	fe 01       	movw	r30, r28
    2348:	ee 5b       	subi	r30, 0xBE	; 190
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <HLCD_voidINIT+0x1a0>
    2354:	fe 01       	movw	r30, r28
    2356:	ee 5b       	subi	r30, 0xBE	; 190
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	de 01       	movw	r26, r28
    2360:	ac 5b       	subi	r26, 0xBC	; 188
    2362:	bf 4f       	sbci	r27, 0xFF	; 255
    2364:	fe 01       	movw	r30, r28
    2366:	ec 5b       	subi	r30, 0xBC	; 188
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	11 96       	adiw	r26, 0x01	; 1
    2372:	9c 93       	st	X, r25
    2374:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2376:	fe 01       	movw	r30, r28
    2378:	ec 5b       	subi	r30, 0xBC	; 188
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	d1 f6       	brne	.-76     	; 0x2338 <HLCD_voidINIT+0x188>
    2384:	42 c0       	rjmp	.+132    	; 0x240a <HLCD_voidINIT+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2386:	8e 01       	movw	r16, r28
    2388:	0c 5b       	subi	r16, 0xBC	; 188
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	fe 01       	movw	r30, r28
    238e:	ea 5b       	subi	r30, 0xBA	; 186
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	60 81       	ld	r22, Z
    2394:	71 81       	ldd	r23, Z+1	; 0x01
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	93 81       	ldd	r25, Z+3	; 0x03
    239a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	f8 01       	movw	r30, r16
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
    23a8:	de 01       	movw	r26, r28
    23aa:	a0 5c       	subi	r26, 0xC0	; 192
    23ac:	bf 4f       	sbci	r27, 0xFF	; 255
    23ae:	fe 01       	movw	r30, r28
    23b0:	ec 5b       	subi	r30, 0xBC	; 188
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	91 81       	ldd	r25, Z+1	; 0x01
    23b8:	11 96       	adiw	r26, 0x01	; 1
    23ba:	9c 93       	st	X, r25
    23bc:	8e 93       	st	-X, r24
    23be:	fe 01       	movw	r30, r28
    23c0:	e0 5c       	subi	r30, 0xC0	; 192
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <HLCD_voidINIT+0x218>
    23cc:	fe 01       	movw	r30, r28
    23ce:	e0 5c       	subi	r30, 0xC0	; 192
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	19 c0       	rjmp	.+50     	; 0x240a <HLCD_voidINIT+0x25a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23d8:	8e 01       	movw	r16, r28
    23da:	02 5b       	subi	r16, 0xB2	; 178
    23dc:	1f 4f       	sbci	r17, 0xFF	; 255
    23de:	fe 01       	movw	r30, r28
    23e0:	e1 5b       	subi	r30, 0xB1	; 177
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	f8 01       	movw	r30, r16
    23f6:	80 83       	st	Z, r24
    23f8:	fe 01       	movw	r30, r28
    23fa:	e2 5b       	subi	r30, 0xB2	; 178
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2402:	8f ad       	ldd	r24, Y+63	; 0x3f
    2404:	8a 95       	dec	r24
    2406:	f1 f7       	brne	.-4      	; 0x2404 <HLCD_voidINIT+0x254>
    2408:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(31);
	/*Function set command*/
	HLCD_u8SendCmnd(FunctionSet);
    240a:	88 e3       	ldi	r24, 0x38	; 56
    240c:	0e 94 0b 14 	call	0x2816	; 0x2816 <HLCD_u8SendCmnd>
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	a0 e2       	ldi	r26, 0x20	; 32
    2416:	b2 e4       	ldi	r27, 0x42	; 66
    2418:	8b af       	std	Y+59, r24	; 0x3b
    241a:	9c af       	std	Y+60, r25	; 0x3c
    241c:	ad af       	std	Y+61, r26	; 0x3d
    241e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2420:	6b ad       	ldd	r22, Y+59	; 0x3b
    2422:	7c ad       	ldd	r23, Y+60	; 0x3c
    2424:	8d ad       	ldd	r24, Y+61	; 0x3d
    2426:	9e ad       	ldd	r25, Y+62	; 0x3e
    2428:	2b ea       	ldi	r18, 0xAB	; 171
    242a:	3a ea       	ldi	r19, 0xAA	; 170
    242c:	4a e2       	ldi	r20, 0x2A	; 42
    242e:	50 e4       	ldi	r21, 0x40	; 64
    2430:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	8f ab       	std	Y+55, r24	; 0x37
    243a:	98 af       	std	Y+56, r25	; 0x38
    243c:	a9 af       	std	Y+57, r26	; 0x39
    243e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2440:	6f a9       	ldd	r22, Y+55	; 0x37
    2442:	78 ad       	ldd	r23, Y+56	; 0x38
    2444:	89 ad       	ldd	r24, Y+57	; 0x39
    2446:	9a ad       	ldd	r25, Y+58	; 0x3a
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    2454:	88 23       	and	r24, r24
    2456:	1c f4       	brge	.+6      	; 0x245e <HLCD_voidINIT+0x2ae>
		__ticks = 1;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	8e ab       	std	Y+54, r24	; 0x36
    245c:	91 c0       	rjmp	.+290    	; 0x2580 <HLCD_voidINIT+0x3d0>
	else if (__tmp > 255)
    245e:	6f a9       	ldd	r22, Y+55	; 0x37
    2460:	78 ad       	ldd	r23, Y+56	; 0x38
    2462:	89 ad       	ldd	r24, Y+57	; 0x39
    2464:	9a ad       	ldd	r25, Y+58	; 0x3a
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4f e7       	ldi	r20, 0x7F	; 127
    246c:	53 e4       	ldi	r21, 0x43	; 67
    246e:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    2472:	18 16       	cp	r1, r24
    2474:	0c f0       	brlt	.+2      	; 0x2478 <HLCD_voidINIT+0x2c8>
    2476:	7b c0       	rjmp	.+246    	; 0x256e <HLCD_voidINIT+0x3be>
	{
		_delay_ms(__us / 1000.0);
    2478:	6b ad       	ldd	r22, Y+59	; 0x3b
    247a:	7c ad       	ldd	r23, Y+60	; 0x3c
    247c:	8d ad       	ldd	r24, Y+61	; 0x3d
    247e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a e7       	ldi	r20, 0x7A	; 122
    2486:	54 e4       	ldi	r21, 0x44	; 68
    2488:	0e 94 87 0a 	call	0x150e	; 0x150e <__divsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8a ab       	std	Y+50, r24	; 0x32
    2492:	9b ab       	std	Y+51, r25	; 0x33
    2494:	ac ab       	std	Y+52, r26	; 0x34
    2496:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2498:	6a a9       	ldd	r22, Y+50	; 0x32
    249a:	7b a9       	ldd	r23, Y+51	; 0x33
    249c:	8c a9       	ldd	r24, Y+52	; 0x34
    249e:	9d a9       	ldd	r25, Y+53	; 0x35
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4a ef       	ldi	r20, 0xFA	; 250
    24a6:	54 e4       	ldi	r21, 0x44	; 68
    24a8:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	8e a7       	std	Y+46, r24	; 0x2e
    24b2:	9f a7       	std	Y+47, r25	; 0x2f
    24b4:	a8 ab       	std	Y+48, r26	; 0x30
    24b6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    24b8:	6e a5       	ldd	r22, Y+46	; 0x2e
    24ba:	7f a5       	ldd	r23, Y+47	; 0x2f
    24bc:	88 a9       	ldd	r24, Y+48	; 0x30
    24be:	99 a9       	ldd	r25, Y+49	; 0x31
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e8       	ldi	r20, 0x80	; 128
    24c6:	5f e3       	ldi	r21, 0x3F	; 63
    24c8:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    24cc:	88 23       	and	r24, r24
    24ce:	2c f4       	brge	.+10     	; 0x24da <HLCD_voidINIT+0x32a>
		__ticks = 1;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9d a7       	std	Y+45, r25	; 0x2d
    24d6:	8c a7       	std	Y+44, r24	; 0x2c
    24d8:	3f c0       	rjmp	.+126    	; 0x2558 <HLCD_voidINIT+0x3a8>
	else if (__tmp > 65535)
    24da:	6e a5       	ldd	r22, Y+46	; 0x2e
    24dc:	7f a5       	ldd	r23, Y+47	; 0x2f
    24de:	88 a9       	ldd	r24, Y+48	; 0x30
    24e0:	99 a9       	ldd	r25, Y+49	; 0x31
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	3f ef       	ldi	r19, 0xFF	; 255
    24e6:	4f e7       	ldi	r20, 0x7F	; 127
    24e8:	57 e4       	ldi	r21, 0x47	; 71
    24ea:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    24ee:	18 16       	cp	r1, r24
    24f0:	4c f5       	brge	.+82     	; 0x2544 <HLCD_voidINIT+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f2:	6a a9       	ldd	r22, Y+50	; 0x32
    24f4:	7b a9       	ldd	r23, Y+51	; 0x33
    24f6:	8c a9       	ldd	r24, Y+52	; 0x34
    24f8:	9d a9       	ldd	r25, Y+53	; 0x35
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e2       	ldi	r20, 0x20	; 32
    2500:	51 e4       	ldi	r21, 0x41	; 65
    2502:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	bc 01       	movw	r22, r24
    250c:	cd 01       	movw	r24, r26
    250e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	9d a7       	std	Y+45, r25	; 0x2d
    2518:	8c a7       	std	Y+44, r24	; 0x2c
    251a:	0f c0       	rjmp	.+30     	; 0x253a <HLCD_voidINIT+0x38a>
    251c:	88 ec       	ldi	r24, 0xC8	; 200
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9b a7       	std	Y+43, r25	; 0x2b
    2522:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2524:	8a a5       	ldd	r24, Y+42	; 0x2a
    2526:	9b a5       	ldd	r25, Y+43	; 0x2b
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <HLCD_voidINIT+0x378>
    252c:	9b a7       	std	Y+43, r25	; 0x2b
    252e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2530:	8c a5       	ldd	r24, Y+44	; 0x2c
    2532:	9d a5       	ldd	r25, Y+45	; 0x2d
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	9d a7       	std	Y+45, r25	; 0x2d
    2538:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253a:	8c a5       	ldd	r24, Y+44	; 0x2c
    253c:	9d a5       	ldd	r25, Y+45	; 0x2d
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	69 f7       	brne	.-38     	; 0x251c <HLCD_voidINIT+0x36c>
    2542:	24 c0       	rjmp	.+72     	; 0x258c <HLCD_voidINIT+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2544:	6e a5       	ldd	r22, Y+46	; 0x2e
    2546:	7f a5       	ldd	r23, Y+47	; 0x2f
    2548:	88 a9       	ldd	r24, Y+48	; 0x30
    254a:	99 a9       	ldd	r25, Y+49	; 0x31
    254c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9d a7       	std	Y+45, r25	; 0x2d
    2556:	8c a7       	std	Y+44, r24	; 0x2c
    2558:	8c a5       	ldd	r24, Y+44	; 0x2c
    255a:	9d a5       	ldd	r25, Y+45	; 0x2d
    255c:	99 a7       	std	Y+41, r25	; 0x29
    255e:	88 a7       	std	Y+40, r24	; 0x28
    2560:	88 a5       	ldd	r24, Y+40	; 0x28
    2562:	99 a5       	ldd	r25, Y+41	; 0x29
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <HLCD_voidINIT+0x3b4>
    2568:	99 a7       	std	Y+41, r25	; 0x29
    256a:	88 a7       	std	Y+40, r24	; 0x28
    256c:	0f c0       	rjmp	.+30     	; 0x258c <HLCD_voidINIT+0x3dc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    256e:	6f a9       	ldd	r22, Y+55	; 0x37
    2570:	78 ad       	ldd	r23, Y+56	; 0x38
    2572:	89 ad       	ldd	r24, Y+57	; 0x39
    2574:	9a ad       	ldd	r25, Y+58	; 0x3a
    2576:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	8e ab       	std	Y+54, r24	; 0x36
    2580:	8e a9       	ldd	r24, Y+54	; 0x36
    2582:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2584:	8f a1       	ldd	r24, Y+39	; 0x27
    2586:	8a 95       	dec	r24
    2588:	f1 f7       	brne	.-4      	; 0x2586 <HLCD_voidINIT+0x3d6>
    258a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/*Display on/off Control*/
	HLCD_u8SendCmnd(DisplayControl);
    258c:	8f e0       	ldi	r24, 0x0F	; 15
    258e:	0e 94 0b 14 	call	0x2816	; 0x2816 <HLCD_u8SendCmnd>
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e2       	ldi	r26, 0x20	; 32
    2598:	b2 e4       	ldi	r27, 0x42	; 66
    259a:	8b a3       	std	Y+35, r24	; 0x23
    259c:	9c a3       	std	Y+36, r25	; 0x24
    259e:	ad a3       	std	Y+37, r26	; 0x25
    25a0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25a2:	6b a1       	ldd	r22, Y+35	; 0x23
    25a4:	7c a1       	ldd	r23, Y+36	; 0x24
    25a6:	8d a1       	ldd	r24, Y+37	; 0x25
    25a8:	9e a1       	ldd	r25, Y+38	; 0x26
    25aa:	2b ea       	ldi	r18, 0xAB	; 171
    25ac:	3a ea       	ldi	r19, 0xAA	; 170
    25ae:	4a e2       	ldi	r20, 0x2A	; 42
    25b0:	50 e4       	ldi	r21, 0x40	; 64
    25b2:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8f 8f       	std	Y+31, r24	; 0x1f
    25bc:	98 a3       	std	Y+32, r25	; 0x20
    25be:	a9 a3       	std	Y+33, r26	; 0x21
    25c0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    25c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25c4:	78 a1       	ldd	r23, Y+32	; 0x20
    25c6:	89 a1       	ldd	r24, Y+33	; 0x21
    25c8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	1c f4       	brge	.+6      	; 0x25e0 <HLCD_voidINIT+0x430>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	8e 8f       	std	Y+30, r24	; 0x1e
    25de:	91 c0       	rjmp	.+290    	; 0x2702 <HLCD_voidINIT+0x552>
	else if (__tmp > 255)
    25e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25e2:	78 a1       	ldd	r23, Y+32	; 0x20
    25e4:	89 a1       	ldd	r24, Y+33	; 0x21
    25e6:	9a a1       	ldd	r25, Y+34	; 0x22
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4f e7       	ldi	r20, 0x7F	; 127
    25ee:	53 e4       	ldi	r21, 0x43	; 67
    25f0:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    25f4:	18 16       	cp	r1, r24
    25f6:	0c f0       	brlt	.+2      	; 0x25fa <HLCD_voidINIT+0x44a>
    25f8:	7b c0       	rjmp	.+246    	; 0x26f0 <HLCD_voidINIT+0x540>
	{
		_delay_ms(__us / 1000.0);
    25fa:	6b a1       	ldd	r22, Y+35	; 0x23
    25fc:	7c a1       	ldd	r23, Y+36	; 0x24
    25fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2600:	9e a1       	ldd	r25, Y+38	; 0x26
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a e7       	ldi	r20, 0x7A	; 122
    2608:	54 e4       	ldi	r21, 0x44	; 68
    260a:	0e 94 87 0a 	call	0x150e	; 0x150e <__divsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	8a 8f       	std	Y+26, r24	; 0x1a
    2614:	9b 8f       	std	Y+27, r25	; 0x1b
    2616:	ac 8f       	std	Y+28, r26	; 0x1c
    2618:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    261c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    261e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2620:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a ef       	ldi	r20, 0xFA	; 250
    2628:	54 e4       	ldi	r21, 0x44	; 68
    262a:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8e 8b       	std	Y+22, r24	; 0x16
    2634:	9f 8b       	std	Y+23, r25	; 0x17
    2636:	a8 8f       	std	Y+24, r26	; 0x18
    2638:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    263a:	6e 89       	ldd	r22, Y+22	; 0x16
    263c:	7f 89       	ldd	r23, Y+23	; 0x17
    263e:	88 8d       	ldd	r24, Y+24	; 0x18
    2640:	99 8d       	ldd	r25, Y+25	; 0x19
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <HLCD_voidINIT+0x4ac>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9d 8b       	std	Y+21, r25	; 0x15
    2658:	8c 8b       	std	Y+20, r24	; 0x14
    265a:	3f c0       	rjmp	.+126    	; 0x26da <HLCD_voidINIT+0x52a>
	else if (__tmp > 65535)
    265c:	6e 89       	ldd	r22, Y+22	; 0x16
    265e:	7f 89       	ldd	r23, Y+23	; 0x17
    2660:	88 8d       	ldd	r24, Y+24	; 0x18
    2662:	99 8d       	ldd	r25, Y+25	; 0x19
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <HLCD_voidINIT+0x516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2676:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2678:	8c 8d       	ldd	r24, Y+28	; 0x1c
    267a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9d 8b       	std	Y+21, r25	; 0x15
    269a:	8c 8b       	std	Y+20, r24	; 0x14
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <HLCD_voidINIT+0x50c>
    269e:	88 ec       	ldi	r24, 0xC8	; 200
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9b 8b       	std	Y+19, r25	; 0x13
    26a4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26a6:	8a 89       	ldd	r24, Y+18	; 0x12
    26a8:	9b 89       	ldd	r25, Y+19	; 0x13
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <HLCD_voidINIT+0x4fa>
    26ae:	9b 8b       	std	Y+19, r25	; 0x13
    26b0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8c 89       	ldd	r24, Y+20	; 0x14
    26b4:	9d 89       	ldd	r25, Y+21	; 0x15
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9d 8b       	std	Y+21, r25	; 0x15
    26ba:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8c 89       	ldd	r24, Y+20	; 0x14
    26be:	9d 89       	ldd	r25, Y+21	; 0x15
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <HLCD_voidINIT+0x4ee>
    26c4:	24 c0       	rjmp	.+72     	; 0x270e <HLCD_voidINIT+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6e 89       	ldd	r22, Y+22	; 0x16
    26c8:	7f 89       	ldd	r23, Y+23	; 0x17
    26ca:	88 8d       	ldd	r24, Y+24	; 0x18
    26cc:	99 8d       	ldd	r25, Y+25	; 0x19
    26ce:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9d 8b       	std	Y+21, r25	; 0x15
    26d8:	8c 8b       	std	Y+20, r24	; 0x14
    26da:	8c 89       	ldd	r24, Y+20	; 0x14
    26dc:	9d 89       	ldd	r25, Y+21	; 0x15
    26de:	99 8b       	std	Y+17, r25	; 0x11
    26e0:	88 8b       	std	Y+16, r24	; 0x10
    26e2:	88 89       	ldd	r24, Y+16	; 0x10
    26e4:	99 89       	ldd	r25, Y+17	; 0x11
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <HLCD_voidINIT+0x536>
    26ea:	99 8b       	std	Y+17, r25	; 0x11
    26ec:	88 8b       	std	Y+16, r24	; 0x10
    26ee:	0f c0       	rjmp	.+30     	; 0x270e <HLCD_voidINIT+0x55e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26f2:	78 a1       	ldd	r23, Y+32	; 0x20
    26f4:	89 a1       	ldd	r24, Y+33	; 0x21
    26f6:	9a a1       	ldd	r25, Y+34	; 0x22
    26f8:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	8e 8f       	std	Y+30, r24	; 0x1e
    2702:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2704:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2706:	8f 85       	ldd	r24, Y+15	; 0x0f
    2708:	8a 95       	dec	r24
    270a:	f1 f7       	brne	.-4      	; 0x2708 <HLCD_voidINIT+0x558>
    270c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/*Display Clear*/
	HLCD_u8SendCmnd(DisplayClear);
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	0e 94 0b 14 	call	0x2816	; 0x2816 <HLCD_u8SendCmnd>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	a0 e0       	ldi	r26, 0x00	; 0
    271a:	b0 e4       	ldi	r27, 0x40	; 64
    271c:	8b 87       	std	Y+11, r24	; 0x0b
    271e:	9c 87       	std	Y+12, r25	; 0x0c
    2720:	ad 87       	std	Y+13, r26	; 0x0d
    2722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2724:	6b 85       	ldd	r22, Y+11	; 0x0b
    2726:	7c 85       	ldd	r23, Y+12	; 0x0c
    2728:	8d 85       	ldd	r24, Y+13	; 0x0d
    272a:	9e 85       	ldd	r25, Y+14	; 0x0e
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	4a ef       	ldi	r20, 0xFA	; 250
    2732:	54 e4       	ldi	r21, 0x44	; 68
    2734:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	8f 83       	std	Y+7, r24	; 0x07
    273e:	98 87       	std	Y+8, r25	; 0x08
    2740:	a9 87       	std	Y+9, r26	; 0x09
    2742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2744:	6f 81       	ldd	r22, Y+7	; 0x07
    2746:	78 85       	ldd	r23, Y+8	; 0x08
    2748:	89 85       	ldd	r24, Y+9	; 0x09
    274a:	9a 85       	ldd	r25, Y+10	; 0x0a
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e8       	ldi	r20, 0x80	; 128
    2752:	5f e3       	ldi	r21, 0x3F	; 63
    2754:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    2758:	88 23       	and	r24, r24
    275a:	2c f4       	brge	.+10     	; 0x2766 <HLCD_voidINIT+0x5b6>
		__ticks = 1;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	3f c0       	rjmp	.+126    	; 0x27e4 <HLCD_voidINIT+0x634>
	else if (__tmp > 65535)
    2766:	6f 81       	ldd	r22, Y+7	; 0x07
    2768:	78 85       	ldd	r23, Y+8	; 0x08
    276a:	89 85       	ldd	r24, Y+9	; 0x09
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	3f ef       	ldi	r19, 0xFF	; 255
    2772:	4f e7       	ldi	r20, 0x7F	; 127
    2774:	57 e4       	ldi	r21, 0x47	; 71
    2776:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    277a:	18 16       	cp	r1, r24
    277c:	4c f5       	brge	.+82     	; 0x27d0 <HLCD_voidINIT+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2780:	7c 85       	ldd	r23, Y+12	; 0x0c
    2782:	8d 85       	ldd	r24, Y+13	; 0x0d
    2784:	9e 85       	ldd	r25, Y+14	; 0x0e
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e2       	ldi	r20, 0x20	; 32
    278c:	51 e4       	ldi	r21, 0x41	; 65
    278e:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	0f c0       	rjmp	.+30     	; 0x27c6 <HLCD_voidINIT+0x616>
    27a8:	88 ec       	ldi	r24, 0xC8	; 200
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9c 83       	std	Y+4, r25	; 0x04
    27ae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <HLCD_voidINIT+0x604>
    27b8:	9c 83       	std	Y+4, r25	; 0x04
    27ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	9e 81       	ldd	r25, Y+6	; 0x06
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	69 f7       	brne	.-38     	; 0x27a8 <HLCD_voidINIT+0x5f8>
    27ce:	14 c0       	rjmp	.+40     	; 0x27f8 <HLCD_voidINIT+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d0:	6f 81       	ldd	r22, Y+7	; 0x07
    27d2:	78 85       	ldd	r23, Y+8	; 0x08
    27d4:	89 85       	ldd	r24, Y+9	; 0x09
    27d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d8:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	8d 81       	ldd	r24, Y+5	; 0x05
    27e6:	9e 81       	ldd	r25, Y+6	; 0x06
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <HLCD_voidINIT+0x640>
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    27f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Entry Mode Set*/
	HLCD_u8SendCmnd(EntryMode);
    27f8:	86 e0       	ldi	r24, 0x06	; 6
    27fa:	0e 94 0b 14 	call	0x2816	; 0x2816 <HLCD_u8SendCmnd>
}
    27fe:	ca 5a       	subi	r28, 0xAA	; 170
    2800:	df 4f       	sbci	r29, 0xFF	; 255
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	08 95       	ret

00002816 <HLCD_u8SendCmnd>:

u8 HLCD_u8SendCmnd(u8 Copy_u8Cmnd)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	6a 97       	sbiw	r28, 0x1a	; 26
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8ErrorState=STD_TYPES_OK;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	89 8f       	std	Y+25, r24	; 0x19
	/*1- set Rs pin=> Low (command)*/
	MDIO_u8SetPinValue(HLCD_u8_RS_PORT,HLCD_u8_RS_PIN,MDIO_u8_LOW);
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
	/*2- set Rw pin=>low (write)*/
	MDIO_u8SetPinValue(HLCD_u8_RW_PORT,HLCD_u8_RW_PIN,MDIO_u8_LOW);
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	40 e0       	ldi	r20, 0x00	; 0
    2840:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
	/*3- send command to LCD on data Pins*/
	MDIO_u8SetPortValue(HCLD_u8_DATA_PORT,Copy_u8Cmnd);
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2848:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <MDIO_u8SetPortValue>
	/*4- set Enable pulse*/
	MDIO_u8SetPinValue(HLCD_u8_EN_PORT,HLCD_u8_EN_PIN,MDIO_u8_HIGH);
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	62 e0       	ldi	r22, 0x02	; 2
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a0 e8       	ldi	r26, 0x80	; 128
    285c:	bf e3       	ldi	r27, 0x3F	; 63
    285e:	8d 8b       	std	Y+21, r24	; 0x15
    2860:	9e 8b       	std	Y+22, r25	; 0x16
    2862:	af 8b       	std	Y+23, r26	; 0x17
    2864:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	2b ea       	ldi	r18, 0xAB	; 171
    2870:	3a ea       	ldi	r19, 0xAA	; 170
    2872:	4a e2       	ldi	r20, 0x2A	; 42
    2874:	50 e4       	ldi	r21, 0x40	; 64
    2876:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	89 8b       	std	Y+17, r24	; 0x11
    2880:	9a 8b       	std	Y+18, r25	; 0x12
    2882:	ab 8b       	std	Y+19, r26	; 0x13
    2884:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2886:	69 89       	ldd	r22, Y+17	; 0x11
    2888:	7a 89       	ldd	r23, Y+18	; 0x12
    288a:	8b 89       	ldd	r24, Y+19	; 0x13
    288c:	9c 89       	ldd	r25, Y+20	; 0x14
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	1c f4       	brge	.+6      	; 0x28a4 <HLCD_u8SendCmnd+0x8e>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	88 8b       	std	Y+16, r24	; 0x10
    28a2:	91 c0       	rjmp	.+290    	; 0x29c6 <HLCD_u8SendCmnd+0x1b0>
	else if (__tmp > 255)
    28a4:	69 89       	ldd	r22, Y+17	; 0x11
    28a6:	7a 89       	ldd	r23, Y+18	; 0x12
    28a8:	8b 89       	ldd	r24, Y+19	; 0x13
    28aa:	9c 89       	ldd	r25, Y+20	; 0x14
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	53 e4       	ldi	r21, 0x43	; 67
    28b4:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	0c f0       	brlt	.+2      	; 0x28be <HLCD_u8SendCmnd+0xa8>
    28bc:	7b c0       	rjmp	.+246    	; 0x29b4 <HLCD_u8SendCmnd+0x19e>
	{
		_delay_ms(__us / 1000.0);
    28be:	6d 89       	ldd	r22, Y+21	; 0x15
    28c0:	7e 89       	ldd	r23, Y+22	; 0x16
    28c2:	8f 89       	ldd	r24, Y+23	; 0x17
    28c4:	98 8d       	ldd	r25, Y+24	; 0x18
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	4a e7       	ldi	r20, 0x7A	; 122
    28cc:	54 e4       	ldi	r21, 0x44	; 68
    28ce:	0e 94 87 0a 	call	0x150e	; 0x150e <__divsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	8c 87       	std	Y+12, r24	; 0x0c
    28d8:	9d 87       	std	Y+13, r25	; 0x0d
    28da:	ae 87       	std	Y+14, r26	; 0x0e
    28dc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	6c 85       	ldd	r22, Y+12	; 0x0c
    28e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    28e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    28e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4a ef       	ldi	r20, 0xFA	; 250
    28ec:	54 e4       	ldi	r21, 0x44	; 68
    28ee:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	88 87       	std	Y+8, r24	; 0x08
    28f8:	99 87       	std	Y+9, r25	; 0x09
    28fa:	aa 87       	std	Y+10, r26	; 0x0a
    28fc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28fe:	68 85       	ldd	r22, Y+8	; 0x08
    2900:	79 85       	ldd	r23, Y+9	; 0x09
    2902:	8a 85       	ldd	r24, Y+10	; 0x0a
    2904:	9b 85       	ldd	r25, Y+11	; 0x0b
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	2c f4       	brge	.+10     	; 0x2920 <HLCD_u8SendCmnd+0x10a>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9f 83       	std	Y+7, r25	; 0x07
    291c:	8e 83       	std	Y+6, r24	; 0x06
    291e:	3f c0       	rjmp	.+126    	; 0x299e <HLCD_u8SendCmnd+0x188>
	else if (__tmp > 65535)
    2920:	68 85       	ldd	r22, Y+8	; 0x08
    2922:	79 85       	ldd	r23, Y+9	; 0x09
    2924:	8a 85       	ldd	r24, Y+10	; 0x0a
    2926:	9b 85       	ldd	r25, Y+11	; 0x0b
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	4c f5       	brge	.+82     	; 0x298a <HLCD_u8SendCmnd+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2938:	6c 85       	ldd	r22, Y+12	; 0x0c
    293a:	7d 85       	ldd	r23, Y+13	; 0x0d
    293c:	8e 85       	ldd	r24, Y+14	; 0x0e
    293e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e2       	ldi	r20, 0x20	; 32
    2946:	51 e4       	ldi	r21, 0x41	; 65
    2948:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9f 83       	std	Y+7, r25	; 0x07
    295e:	8e 83       	std	Y+6, r24	; 0x06
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <HLCD_u8SendCmnd+0x16a>
    2962:	88 ec       	ldi	r24, 0xC8	; 200
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9d 83       	std	Y+5, r25	; 0x05
    2968:	8c 83       	std	Y+4, r24	; 0x04
    296a:	8c 81       	ldd	r24, Y+4	; 0x04
    296c:	9d 81       	ldd	r25, Y+5	; 0x05
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <HLCD_u8SendCmnd+0x158>
    2972:	9d 83       	std	Y+5, r25	; 0x05
    2974:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	8e 81       	ldd	r24, Y+6	; 0x06
    2978:	9f 81       	ldd	r25, Y+7	; 0x07
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9f 83       	std	Y+7, r25	; 0x07
    297e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	8e 81       	ldd	r24, Y+6	; 0x06
    2982:	9f 81       	ldd	r25, Y+7	; 0x07
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	69 f7       	brne	.-38     	; 0x2962 <HLCD_u8SendCmnd+0x14c>
    2988:	24 c0       	rjmp	.+72     	; 0x29d2 <HLCD_u8SendCmnd+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	68 85       	ldd	r22, Y+8	; 0x08
    298c:	79 85       	ldd	r23, Y+9	; 0x09
    298e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2990:	9b 85       	ldd	r25, Y+11	; 0x0b
    2992:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9f 83       	std	Y+7, r25	; 0x07
    299c:	8e 83       	std	Y+6, r24	; 0x06
    299e:	8e 81       	ldd	r24, Y+6	; 0x06
    29a0:	9f 81       	ldd	r25, Y+7	; 0x07
    29a2:	9b 83       	std	Y+3, r25	; 0x03
    29a4:	8a 83       	std	Y+2, r24	; 0x02
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	9b 81       	ldd	r25, Y+3	; 0x03
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <HLCD_u8SendCmnd+0x194>
    29ae:	9b 83       	std	Y+3, r25	; 0x03
    29b0:	8a 83       	std	Y+2, r24	; 0x02
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <HLCD_u8SendCmnd+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29b4:	69 89       	ldd	r22, Y+17	; 0x11
    29b6:	7a 89       	ldd	r23, Y+18	; 0x12
    29b8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ba:	9c 89       	ldd	r25, Y+20	; 0x14
    29bc:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	88 8b       	std	Y+16, r24	; 0x10
    29c6:	88 89       	ldd	r24, Y+16	; 0x10
    29c8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	8a 95       	dec	r24
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <HLCD_u8SendCmnd+0x1b6>
    29d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	MDIO_u8SetPinValue(HLCD_u8_EN_PORT,HLCD_u8_EN_PIN,MDIO_u8_LOW);
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	62 e0       	ldi	r22, 0x02	; 2
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
	return Local_u8ErrorState;
    29dc:	89 8d       	ldd	r24, Y+25	; 0x19
}
    29de:	6a 96       	adiw	r28, 0x1a	; 26
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <HLCD_u8SendChar>:

u8 HLCD_u8SendChar (u8 Copy_u8Char)
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	6a 97       	sbiw	r28, 0x1a	; 26
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8ErrorState=STD_TYPES_OK;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	89 8f       	std	Y+25, r24	; 0x19
	/*1- set Rs pin=> Low (command)*/
	MDIO_u8SetPinValue(HLCD_u8_RS_PORT,HLCD_u8_RS_PIN,MDIO_u8_HIGH);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	41 e0       	ldi	r20, 0x01	; 1
    2a10:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
	/*2- set Rw pin=>low (write)*/
	MDIO_u8SetPinValue(HLCD_u8_RW_PORT,HLCD_u8_RW_PIN,MDIO_u8_LOW);
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	61 e0       	ldi	r22, 0x01	; 1
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
	/*3- send command to LCD on data Pins*/
	MDIO_u8SetPortValue(HCLD_u8_DATA_PORT,Copy_u8Char);
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2a22:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <MDIO_u8SetPortValue>
	/*4- set Enable pulse*/
	MDIO_u8SetPinValue(HLCD_u8_EN_PORT,HLCD_u8_EN_PIN,MDIO_u8_HIGH);
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	62 e0       	ldi	r22, 0x02	; 2
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 e8       	ldi	r26, 0x80	; 128
    2a36:	bf e3       	ldi	r27, 0x3F	; 63
    2a38:	8d 8b       	std	Y+21, r24	; 0x15
    2a3a:	9e 8b       	std	Y+22, r25	; 0x16
    2a3c:	af 8b       	std	Y+23, r26	; 0x17
    2a3e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a40:	6d 89       	ldd	r22, Y+21	; 0x15
    2a42:	7e 89       	ldd	r23, Y+22	; 0x16
    2a44:	8f 89       	ldd	r24, Y+23	; 0x17
    2a46:	98 8d       	ldd	r25, Y+24	; 0x18
    2a48:	2b ea       	ldi	r18, 0xAB	; 171
    2a4a:	3a ea       	ldi	r19, 0xAA	; 170
    2a4c:	4a e2       	ldi	r20, 0x2A	; 42
    2a4e:	50 e4       	ldi	r21, 0x40	; 64
    2a50:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	89 8b       	std	Y+17, r24	; 0x11
    2a5a:	9a 8b       	std	Y+18, r25	; 0x12
    2a5c:	ab 8b       	std	Y+19, r26	; 0x13
    2a5e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a60:	69 89       	ldd	r22, Y+17	; 0x11
    2a62:	7a 89       	ldd	r23, Y+18	; 0x12
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e8       	ldi	r20, 0x80	; 128
    2a6e:	5f e3       	ldi	r21, 0x3F	; 63
    2a70:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    2a74:	88 23       	and	r24, r24
    2a76:	1c f4       	brge	.+6      	; 0x2a7e <HLCD_u8SendChar+0x8e>
		__ticks = 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	88 8b       	std	Y+16, r24	; 0x10
    2a7c:	91 c0       	rjmp	.+290    	; 0x2ba0 <HLCD_u8SendChar+0x1b0>
	else if (__tmp > 255)
    2a7e:	69 89       	ldd	r22, Y+17	; 0x11
    2a80:	7a 89       	ldd	r23, Y+18	; 0x12
    2a82:	8b 89       	ldd	r24, Y+19	; 0x13
    2a84:	9c 89       	ldd	r25, Y+20	; 0x14
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4f e7       	ldi	r20, 0x7F	; 127
    2a8c:	53 e4       	ldi	r21, 0x43	; 67
    2a8e:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    2a92:	18 16       	cp	r1, r24
    2a94:	0c f0       	brlt	.+2      	; 0x2a98 <HLCD_u8SendChar+0xa8>
    2a96:	7b c0       	rjmp	.+246    	; 0x2b8e <HLCD_u8SendChar+0x19e>
	{
		_delay_ms(__us / 1000.0);
    2a98:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4a e7       	ldi	r20, 0x7A	; 122
    2aa6:	54 e4       	ldi	r21, 0x44	; 68
    2aa8:	0e 94 87 0a 	call	0x150e	; 0x150e <__divsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	8c 87       	std	Y+12, r24	; 0x0c
    2ab2:	9d 87       	std	Y+13, r25	; 0x0d
    2ab4:	ae 87       	std	Y+14, r26	; 0x0e
    2ab6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2aba:	7d 85       	ldd	r23, Y+13	; 0x0d
    2abc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2abe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	4a ef       	ldi	r20, 0xFA	; 250
    2ac6:	54 e4       	ldi	r21, 0x44	; 68
    2ac8:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	88 87       	std	Y+8, r24	; 0x08
    2ad2:	99 87       	std	Y+9, r25	; 0x09
    2ad4:	aa 87       	std	Y+10, r26	; 0x0a
    2ad6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ad8:	68 85       	ldd	r22, Y+8	; 0x08
    2ada:	79 85       	ldd	r23, Y+9	; 0x09
    2adc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ade:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	2c f4       	brge	.+10     	; 0x2afa <HLCD_u8SendChar+0x10a>
		__ticks = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	9f 83       	std	Y+7, r25	; 0x07
    2af6:	8e 83       	std	Y+6, r24	; 0x06
    2af8:	3f c0       	rjmp	.+126    	; 0x2b78 <HLCD_u8SendChar+0x188>
	else if (__tmp > 65535)
    2afa:	68 85       	ldd	r22, Y+8	; 0x08
    2afc:	79 85       	ldd	r23, Y+9	; 0x09
    2afe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b00:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	3f ef       	ldi	r19, 0xFF	; 255
    2b06:	4f e7       	ldi	r20, 0x7F	; 127
    2b08:	57 e4       	ldi	r21, 0x47	; 71
    2b0a:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    2b0e:	18 16       	cp	r1, r24
    2b10:	4c f5       	brge	.+82     	; 0x2b64 <HLCD_u8SendChar+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b12:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b14:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b16:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b18:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9f 83       	std	Y+7, r25	; 0x07
    2b38:	8e 83       	std	Y+6, r24	; 0x06
    2b3a:	0f c0       	rjmp	.+30     	; 0x2b5a <HLCD_u8SendChar+0x16a>
    2b3c:	88 ec       	ldi	r24, 0xC8	; 200
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	9d 83       	std	Y+5, r25	; 0x05
    2b42:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b44:	8c 81       	ldd	r24, Y+4	; 0x04
    2b46:	9d 81       	ldd	r25, Y+5	; 0x05
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <HLCD_u8SendChar+0x158>
    2b4c:	9d 83       	std	Y+5, r25	; 0x05
    2b4e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	8e 81       	ldd	r24, Y+6	; 0x06
    2b52:	9f 81       	ldd	r25, Y+7	; 0x07
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	9f 83       	std	Y+7, r25	; 0x07
    2b58:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	69 f7       	brne	.-38     	; 0x2b3c <HLCD_u8SendChar+0x14c>
    2b62:	24 c0       	rjmp	.+72     	; 0x2bac <HLCD_u8SendChar+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b64:	68 85       	ldd	r22, Y+8	; 0x08
    2b66:	79 85       	ldd	r23, Y+9	; 0x09
    2b68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b6c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9f 83       	std	Y+7, r25	; 0x07
    2b76:	8e 83       	std	Y+6, r24	; 0x06
    2b78:	8e 81       	ldd	r24, Y+6	; 0x06
    2b7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b7c:	9b 83       	std	Y+3, r25	; 0x03
    2b7e:	8a 83       	std	Y+2, r24	; 0x02
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	9b 81       	ldd	r25, Y+3	; 0x03
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <HLCD_u8SendChar+0x194>
    2b88:	9b 83       	std	Y+3, r25	; 0x03
    2b8a:	8a 83       	std	Y+2, r24	; 0x02
    2b8c:	0f c0       	rjmp	.+30     	; 0x2bac <HLCD_u8SendChar+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b8e:	69 89       	ldd	r22, Y+17	; 0x11
    2b90:	7a 89       	ldd	r23, Y+18	; 0x12
    2b92:	8b 89       	ldd	r24, Y+19	; 0x13
    2b94:	9c 89       	ldd	r25, Y+20	; 0x14
    2b96:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	88 8b       	std	Y+16, r24	; 0x10
    2ba0:	88 89       	ldd	r24, Y+16	; 0x10
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	8a 95       	dec	r24
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <HLCD_u8SendChar+0x1b6>
    2baa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	MDIO_u8SetPinValue(HLCD_u8_EN_PORT,HLCD_u8_EN_PIN,MDIO_u8_LOW);
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	62 e0       	ldi	r22, 0x02	; 2
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	0e 94 06 1c 	call	0x380c	; 0x380c <MDIO_u8SetPinValue>
	return Local_u8ErrorState;
    2bb6:	89 8d       	ldd	r24, Y+25	; 0x19
}
    2bb8:	6a 96       	adiw	r28, 0x1a	; 26
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <HLCD_u8SetCursor>:


u8 HLCD_u8SetCursor(u8 Copy_u8LineNum,u8 Copy_u8CharNum)
{
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <HLCD_u8SetCursor+0x6>
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <HLCD_u8SetCursor+0x8>
    2bd2:	0f 92       	push	r0
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
    2bd8:	8a 83       	std	Y+2, r24	; 0x02
    2bda:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=STD_TYPES_OK;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8LineNum)
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	3d 83       	std	Y+5, r19	; 0x05
    2be8:	2c 83       	std	Y+4, r18	; 0x04
    2bea:	8c 81       	ldd	r24, Y+4	; 0x04
    2bec:	9d 81       	ldd	r25, Y+5	; 0x05
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	91 05       	cpc	r25, r1
    2bf2:	31 f0       	breq	.+12     	; 0x2c00 <HLCD_u8SetCursor+0x36>
    2bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    2bf6:	3d 81       	ldd	r19, Y+5	; 0x05
    2bf8:	22 30       	cpi	r18, 0x02	; 2
    2bfa:	31 05       	cpc	r19, r1
    2bfc:	31 f0       	breq	.+12     	; 0x2c0a <HLCD_u8SetCursor+0x40>
    2bfe:	0a c0       	rjmp	.+20     	; 0x2c14 <HLCD_u8SetCursor+0x4a>
	{
		case HLCD_u8_LINE_1:HLCD_u8SendCmnd(0x80+Copy_u8CharNum); break;
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	80 58       	subi	r24, 0x80	; 128
    2c04:	0e 94 0b 14 	call	0x2816	; 0x2816 <HLCD_u8SendCmnd>
    2c08:	06 c0       	rjmp	.+12     	; 0x2c16 <HLCD_u8SetCursor+0x4c>
		case HLCD_u8_LINE_2:HLCD_u8SendCmnd(0xC0+Copy_u8CharNum); break;
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	80 54       	subi	r24, 0x40	; 64
    2c0e:	0e 94 0b 14 	call	0x2816	; 0x2816 <HLCD_u8SendCmnd>
    2c12:	01 c0       	rjmp	.+2      	; 0x2c16 <HLCD_u8SetCursor+0x4c>
		default:Local_u8ErrorState=STD_TYPES_NOK;break;
    2c14:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <HLCD_u8SendString>:

u8 HLCD_u8SendString(u8 Copy_u8String[],u8 Copy_u8Cursor)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <HLCD_u8SendString+0x6>
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <HLCD_u8SendString+0x8>
    2c30:	0f 92       	push	r0
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	9c 83       	std	Y+4, r25	; 0x04
    2c38:	8b 83       	std	Y+3, r24	; 0x03
    2c3a:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState=STD_TYPES_OK;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;Copy_u8String[i] !='\0'; i++)
    2c40:	19 82       	std	Y+1, r1	; 0x01
    2c42:	1f c0       	rjmp	.+62     	; 0x2c82 <HLCD_u8SendString+0x5a>
	{
		if(i==16-Copy_u8Cursor)
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	48 2f       	mov	r20, r24
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	28 2f       	mov	r18, r24
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	80 e1       	ldi	r24, 0x10	; 16
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	82 1b       	sub	r24, r18
    2c56:	93 0b       	sbc	r25, r19
    2c58:	48 17       	cp	r20, r24
    2c5a:	59 07       	cpc	r21, r25
    2c5c:	21 f4       	brne	.+8      	; 0x2c66 <HLCD_u8SendString+0x3e>
			HLCD_u8SetCursor(2,0);
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		HLCD_u8SendChar(Copy_u8String[i]);
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	fc 01       	movw	r30, r24
    2c72:	e2 0f       	add	r30, r18
    2c74:	f3 1f       	adc	r31, r19
    2c76:	80 81       	ld	r24, Z
    2c78:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <HLCD_u8SendChar>
}

u8 HLCD_u8SendString(u8 Copy_u8String[],u8 Copy_u8Cursor)
{
	u8 Local_u8ErrorState=STD_TYPES_OK;
	for(u8 i=0;Copy_u8String[i] !='\0'; i++)
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	8f 5f       	subi	r24, 0xFF	; 255
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	e2 0f       	add	r30, r18
    2c90:	f3 1f       	adc	r31, r19
    2c92:	80 81       	ld	r24, Z
    2c94:	88 23       	and	r24, r24
    2c96:	b1 f6       	brne	.-84     	; 0x2c44 <HLCD_u8SendString+0x1c>
		if(i==16-Copy_u8Cursor)
			HLCD_u8SetCursor(2,0);
		HLCD_u8SendChar(Copy_u8String[i]);
	}

	return Local_u8ErrorState;
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <HLCD_u8SendNumber>:

u8 HLCD_u8SendNumber(u16 Copy_u8Number)
{
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	2b 97       	sbiw	r28, 0x0b	; 11
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	9b 87       	std	Y+11, r25	; 0x0b
    2cc0:	8a 87       	std	Y+10, r24	; 0x0a
	u8 Local_u8ErrorState=STD_TYPES_OK;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	89 87       	std	Y+9, r24	; 0x09
	u8 temp1;
	u16 temp2=Copy_u8Number;
    2cc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cca:	9f 83       	std	Y+7, r25	; 0x07
    2ccc:	8e 83       	std	Y+6, r24	; 0x06
	u16 temp3=1;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9d 83       	std	Y+5, r25	; 0x05
    2cd4:	8c 83       	std	Y+4, r24	; 0x04
	u8 counter=0;
    2cd6:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u8Number==0)
    2cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cda:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	89 f4       	brne	.+34     	; 0x2d02 <HLCD_u8SendNumber+0x58>
		HLCD_u8SendChar('0');
    2ce0:	80 e3       	ldi	r24, 0x30	; 48
    2ce2:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <HLCD_u8SendChar>
    2ce6:	57 c0       	rjmp	.+174    	; 0x2d96 <HLCD_u8SendNumber+0xec>
	else{
	while(temp2!=0)
	{
		temp2=temp2/10;
    2ce8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cea:	9f 81       	ldd	r25, Y+7	; 0x07
    2cec:	2a e0       	ldi	r18, 0x0A	; 10
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	b9 01       	movw	r22, r18
    2cf2:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__udivmodhi4>
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	9f 83       	std	Y+7, r25	; 0x07
    2cfa:	8e 83       	std	Y+6, r24	; 0x06
		counter++;
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	8f 5f       	subi	r24, 0xFF	; 255
    2d00:	8b 83       	std	Y+3, r24	; 0x03
	u16 temp3=1;
	u8 counter=0;
	if(Copy_u8Number==0)
		HLCD_u8SendChar('0');
	else{
	while(temp2!=0)
    2d02:	8e 81       	ldd	r24, Y+6	; 0x06
    2d04:	9f 81       	ldd	r25, Y+7	; 0x07
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	79 f7       	brne	.-34     	; 0x2ce8 <HLCD_u8SendNumber+0x3e>
	{
		temp2=temp2/10;
		counter++;
	}
	for(u8 i=0;i<(counter-1);i++)
    2d0a:	1a 82       	std	Y+2, r1	; 0x02
    2d0c:	11 c0       	rjmp	.+34     	; 0x2d30 <HLCD_u8SendNumber+0x86>
			temp3=temp3*10;
    2d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d10:	9d 81       	ldd	r25, Y+5	; 0x05
    2d12:	9c 01       	movw	r18, r24
    2d14:	22 0f       	add	r18, r18
    2d16:	33 1f       	adc	r19, r19
    2d18:	c9 01       	movw	r24, r18
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	82 0f       	add	r24, r18
    2d24:	93 1f       	adc	r25, r19
    2d26:	9d 83       	std	Y+5, r25	; 0x05
    2d28:	8c 83       	std	Y+4, r24	; 0x04
	while(temp2!=0)
	{
		temp2=temp2/10;
		counter++;
	}
	for(u8 i=0;i<(counter-1);i++)
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	8f 5f       	subi	r24, 0xFF	; 255
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
    2d38:	88 2f       	mov	r24, r24
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	28 17       	cp	r18, r24
    2d40:	39 07       	cpc	r19, r25
    2d42:	2c f3       	brlt	.-54     	; 0x2d0e <HLCD_u8SendNumber+0x64>
			temp3=temp3*10;
	for(u8 i=0;i<counter; i++)
    2d44:	19 82       	std	Y+1, r1	; 0x01
    2d46:	23 c0       	rjmp	.+70     	; 0x2d8e <HLCD_u8SendNumber+0xe4>
	{
		temp1=(Copy_u8Number)/temp3;
    2d48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d50:	b9 01       	movw	r22, r18
    2d52:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__udivmodhi4>
    2d56:	cb 01       	movw	r24, r22
    2d58:	88 87       	std	Y+8, r24	; 0x08
		Copy_u8Number=(Copy_u8Number)%temp3;
    2d5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d5e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d60:	3d 81       	ldd	r19, Y+5	; 0x05
    2d62:	b9 01       	movw	r22, r18
    2d64:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__udivmodhi4>
    2d68:	9b 87       	std	Y+11, r25	; 0x0b
    2d6a:	8a 87       	std	Y+10, r24	; 0x0a
		temp3=temp3/10;
    2d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d70:	2a e0       	ldi	r18, 0x0A	; 10
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	b9 01       	movw	r22, r18
    2d76:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__udivmodhi4>
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9d 83       	std	Y+5, r25	; 0x05
    2d7e:	8c 83       	std	Y+4, r24	; 0x04
		HLCD_u8SendChar(48+temp1);
    2d80:	88 85       	ldd	r24, Y+8	; 0x08
    2d82:	80 5d       	subi	r24, 0xD0	; 208
    2d84:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <HLCD_u8SendChar>
		temp2=temp2/10;
		counter++;
	}
	for(u8 i=0;i<(counter-1);i++)
			temp3=temp3*10;
	for(u8 i=0;i<counter; i++)
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	8f 5f       	subi	r24, 0xFF	; 255
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	99 81       	ldd	r25, Y+1	; 0x01
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	98 17       	cp	r25, r24
    2d94:	c8 f2       	brcs	.-78     	; 0x2d48 <HLCD_u8SendNumber+0x9e>
		Copy_u8Number=(Copy_u8Number)%temp3;
		temp3=temp3/10;
		HLCD_u8SendChar(48+temp1);
	}
	}
	return Local_u8ErrorState;
    2d96:	89 85       	ldd	r24, Y+9	; 0x09
}
    2d98:	2b 96       	adiw	r28, 0x0b	; 11
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <HLCD_u8ClearDisplay>:
	HLCD_u8SendChar(Copy_u8_PatternId);
	return Local_u8ErrorState;
}
*/
u8 HLCD_u8ClearDisplay(void)
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	2e 97       	sbiw	r28, 0x0e	; 14
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
	HLCD_u8SendCmnd(0x01);
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	0e 94 0b 14 	call	0x2816	; 0x2816 <HLCD_u8SendCmnd>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	a8 e4       	ldi	r26, 0x48	; 72
    2dca:	b2 e4       	ldi	r27, 0x42	; 66
    2dcc:	8b 87       	std	Y+11, r24	; 0x0b
    2dce:	9c 87       	std	Y+12, r25	; 0x0c
    2dd0:	ad 87       	std	Y+13, r26	; 0x0d
    2dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	4a ef       	ldi	r20, 0xFA	; 250
    2de2:	54 e4       	ldi	r21, 0x44	; 68
    2de4:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8f 83       	std	Y+7, r24	; 0x07
    2dee:	98 87       	std	Y+8, r25	; 0x08
    2df0:	a9 87       	std	Y+9, r26	; 0x09
    2df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2df4:	6f 81       	ldd	r22, Y+7	; 0x07
    2df6:	78 85       	ldd	r23, Y+8	; 0x08
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	5f e3       	ldi	r21, 0x3F	; 63
    2e04:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    2e08:	88 23       	and	r24, r24
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <HLCD_u8ClearDisplay+0x6c>
		__ticks = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
    2e14:	3f c0       	rjmp	.+126    	; 0x2e94 <HLCD_u8ClearDisplay+0xea>
	else if (__tmp > 65535)
    2e16:	6f 81       	ldd	r22, Y+7	; 0x07
    2e18:	78 85       	ldd	r23, Y+8	; 0x08
    2e1a:	89 85       	ldd	r24, Y+9	; 0x09
    2e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	3f ef       	ldi	r19, 0xFF	; 255
    2e22:	4f e7       	ldi	r20, 0x7F	; 127
    2e24:	57 e4       	ldi	r21, 0x47	; 71
    2e26:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    2e2a:	18 16       	cp	r1, r24
    2e2c:	4c f5       	brge	.+82     	; 0x2e80 <HLCD_u8ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    2e56:	0f c0       	rjmp	.+30     	; 0x2e76 <HLCD_u8ClearDisplay+0xcc>
    2e58:	88 ec       	ldi	r24, 0xC8	; 200
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <HLCD_u8ClearDisplay+0xba>
    2e68:	9c 83       	std	Y+4, r25	; 0x04
    2e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	9e 83       	std	Y+6, r25	; 0x06
    2e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e76:	8d 81       	ldd	r24, Y+5	; 0x05
    2e78:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	69 f7       	brne	.-38     	; 0x2e58 <HLCD_u8ClearDisplay+0xae>
    2e7e:	14 c0       	rjmp	.+40     	; 0x2ea8 <HLCD_u8ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e80:	6f 81       	ldd	r22, Y+7	; 0x07
    2e82:	78 85       	ldd	r23, Y+8	; 0x08
    2e84:	89 85       	ldd	r24, Y+9	; 0x09
    2e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e88:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	8d 81       	ldd	r24, Y+5	; 0x05
    2e96:	9e 81       	ldd	r25, Y+6	; 0x06
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <HLCD_u8ClearDisplay+0xf6>
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	return 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
}
    2eaa:	2e 96       	adiw	r28, 0x0e	; 14
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <System_Reset>:
#define F_CPU 8000000UL
#include<avr/delay.h>

u8 Byte_1 , Byte_2  , Byte_3 , Byte_4;

void System_Reset(void){
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	2e 97       	sbiw	r28, 0x0e	; 14
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
	    /*Start the system*/
		HEEPROM_u8WriteByte(1,1);
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	61 e0       	ldi	r22, 0x01	; 1
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <HEEPROM_u8WriteByte>
		HLCD_u8ClearDisplay();
    2eda:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
		HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_2);
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	62 e0       	ldi	r22, 0x02	; 2
    2ee2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		HLCD_u8SendString("Welcome to",2);
    2ee6:	80 e6       	ldi	r24, 0x60	; 96
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	62 e0       	ldi	r22, 0x02	; 2
    2eec:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
		HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_2);
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
    2ef2:	62 e0       	ldi	r22, 0x02	; 2
    2ef4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		HLCD_u8SendString("Smart Watch",2);
    2ef8:	8b e6       	ldi	r24, 0x6B	; 107
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	62 e0       	ldi	r22, 0x02	; 2
    2efe:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	aa ef       	ldi	r26, 0xFA	; 250
    2f08:	b4 e4       	ldi	r27, 0x44	; 68
    2f0a:	8b 87       	std	Y+11, r24	; 0x0b
    2f0c:	9c 87       	std	Y+12, r25	; 0x0c
    2f0e:	ad 87       	std	Y+13, r26	; 0x0d
    2f10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	4a ef       	ldi	r20, 0xFA	; 250
    2f20:	54 e4       	ldi	r21, 0x44	; 68
    2f22:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	8f 83       	std	Y+7, r24	; 0x07
    2f2c:	98 87       	std	Y+8, r25	; 0x08
    2f2e:	a9 87       	std	Y+9, r26	; 0x09
    2f30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f32:	6f 81       	ldd	r22, Y+7	; 0x07
    2f34:	78 85       	ldd	r23, Y+8	; 0x08
    2f36:	89 85       	ldd	r24, Y+9	; 0x09
    2f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	40 e8       	ldi	r20, 0x80	; 128
    2f40:	5f e3       	ldi	r21, 0x3F	; 63
    2f42:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    2f46:	88 23       	and	r24, r24
    2f48:	2c f4       	brge	.+10     	; 0x2f54 <System_Reset+0x98>
		__ticks = 1;
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	9e 83       	std	Y+6, r25	; 0x06
    2f50:	8d 83       	std	Y+5, r24	; 0x05
    2f52:	3f c0       	rjmp	.+126    	; 0x2fd2 <System_Reset+0x116>
	else if (__tmp > 65535)
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	3f ef       	ldi	r19, 0xFF	; 255
    2f60:	4f e7       	ldi	r20, 0x7F	; 127
    2f62:	57 e4       	ldi	r21, 0x47	; 71
    2f64:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    2f68:	18 16       	cp	r1, r24
    2f6a:	4c f5       	brge	.+82     	; 0x2fbe <System_Reset+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	40 e2       	ldi	r20, 0x20	; 32
    2f7a:	51 e4       	ldi	r21, 0x41	; 65
    2f7c:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	bc 01       	movw	r22, r24
    2f86:	cd 01       	movw	r24, r26
    2f88:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
    2f94:	0f c0       	rjmp	.+30     	; 0x2fb4 <System_Reset+0xf8>
    2f96:	88 ec       	ldi	r24, 0xC8	; 200
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	9c 83       	std	Y+4, r25	; 0x04
    2f9c:	8b 83       	std	Y+3, r24	; 0x03
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	f1 f7       	brne	.-4      	; 0x2fa2 <System_Reset+0xe6>
    2fa6:	9c 83       	std	Y+4, r25	; 0x04
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2faa:	8d 81       	ldd	r24, Y+5	; 0x05
    2fac:	9e 81       	ldd	r25, Y+6	; 0x06
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb8:	00 97       	sbiw	r24, 0x00	; 0
    2fba:	69 f7       	brne	.-38     	; 0x2f96 <System_Reset+0xda>
    2fbc:	14 c0       	rjmp	.+40     	; 0x2fe6 <System_Reset+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc0:	78 85       	ldd	r23, Y+8	; 0x08
    2fc2:	89 85       	ldd	r24, Y+9	; 0x09
    2fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc6:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	9e 83       	std	Y+6, r25	; 0x06
    2fd0:	8d 83       	std	Y+5, r24	; 0x05
    2fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd6:	9a 83       	std	Y+2, r25	; 0x02
    2fd8:	89 83       	std	Y+1, r24	; 0x01
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	f1 f7       	brne	.-4      	; 0x2fde <System_Reset+0x122>
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		HLCD_u8ClearDisplay();
    2fe6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
		HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_0);
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		HLCD_u8SendString("Set your pass",0);
    2ff2:	87 e7       	ldi	r24, 0x77	; 119
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
		HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    2ffc:	82 e0       	ldi	r24, 0x02	; 2
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		/*Get the password that user wants*/
		Get_Password();
    3004:	0e 94 0d 18 	call	0x301a	; 0x301a <Get_Password>
}
    3008:	2e 96       	adiw	r28, 0x0e	; 14
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <Get_Password>:

void Get_Password(void){
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	e0 97       	sbiw	r28, 0x30	; 48
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
	u8 returnedValue,counter=0;
    302e:	1b a6       	std	Y+43, r1	; 0x2b
	u8 pass[4];
	while(1){
	while(1){
		HKPD_u8GetKey(&returnedValue);
    3030:	ce 01       	movw	r24, r28
    3032:	8c 96       	adiw	r24, 0x2c	; 44
    3034:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <HKPD_u8GetKey>
		if(returnedValue != HKPD_u8_NO_KEY_PRESSED){
    3038:	8c a5       	ldd	r24, Y+44	; 0x2c
    303a:	8f 3f       	cpi	r24, 0xFF	; 255
    303c:	c9 f3       	breq	.-14     	; 0x3030 <Get_Password+0x16>
			if(returnedValue == '=') break;
    303e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3040:	8d 33       	cpi	r24, 0x3D	; 61
    3042:	09 f4       	brne	.+2      	; 0x3046 <Get_Password+0x2c>
    3044:	8e c0       	rjmp	.+284    	; 0x3162 <Get_Password+0x148>
			else{
				HLCD_u8SetCursor(HLCD_u8_LINE_2 , counter);
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	6b a5       	ldd	r22, Y+43	; 0x2b
    304a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
				HLCD_u8SendChar(returnedValue);
    304e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3050:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <HLCD_u8SendChar>
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	a8 e4       	ldi	r26, 0x48	; 72
    305a:	b2 e4       	ldi	r27, 0x42	; 66
    305c:	8f a3       	std	Y+39, r24	; 0x27
    305e:	98 a7       	std	Y+40, r25	; 0x28
    3060:	a9 a7       	std	Y+41, r26	; 0x29
    3062:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3064:	6f a1       	ldd	r22, Y+39	; 0x27
    3066:	78 a5       	ldd	r23, Y+40	; 0x28
    3068:	89 a5       	ldd	r24, Y+41	; 0x29
    306a:	9a a5       	ldd	r25, Y+42	; 0x2a
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	4a ef       	ldi	r20, 0xFA	; 250
    3072:	54 e4       	ldi	r21, 0x44	; 68
    3074:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	8b a3       	std	Y+35, r24	; 0x23
    307e:	9c a3       	std	Y+36, r25	; 0x24
    3080:	ad a3       	std	Y+37, r26	; 0x25
    3082:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3084:	6b a1       	ldd	r22, Y+35	; 0x23
    3086:	7c a1       	ldd	r23, Y+36	; 0x24
    3088:	8d a1       	ldd	r24, Y+37	; 0x25
    308a:	9e a1       	ldd	r25, Y+38	; 0x26
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e8       	ldi	r20, 0x80	; 128
    3092:	5f e3       	ldi	r21, 0x3F	; 63
    3094:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    3098:	88 23       	and	r24, r24
    309a:	2c f4       	brge	.+10     	; 0x30a6 <Get_Password+0x8c>
		__ticks = 1;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	9a a3       	std	Y+34, r25	; 0x22
    30a2:	89 a3       	std	Y+33, r24	; 0x21
    30a4:	3f c0       	rjmp	.+126    	; 0x3124 <Get_Password+0x10a>
	else if (__tmp > 65535)
    30a6:	6b a1       	ldd	r22, Y+35	; 0x23
    30a8:	7c a1       	ldd	r23, Y+36	; 0x24
    30aa:	8d a1       	ldd	r24, Y+37	; 0x25
    30ac:	9e a1       	ldd	r25, Y+38	; 0x26
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	3f ef       	ldi	r19, 0xFF	; 255
    30b2:	4f e7       	ldi	r20, 0x7F	; 127
    30b4:	57 e4       	ldi	r21, 0x47	; 71
    30b6:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    30ba:	18 16       	cp	r1, r24
    30bc:	4c f5       	brge	.+82     	; 0x3110 <Get_Password+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30be:	6f a1       	ldd	r22, Y+39	; 0x27
    30c0:	78 a5       	ldd	r23, Y+40	; 0x28
    30c2:	89 a5       	ldd	r24, Y+41	; 0x29
    30c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e2       	ldi	r20, 0x20	; 32
    30cc:	51 e4       	ldi	r21, 0x41	; 65
    30ce:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	bc 01       	movw	r22, r24
    30d8:	cd 01       	movw	r24, r26
    30da:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	9a a3       	std	Y+34, r25	; 0x22
    30e4:	89 a3       	std	Y+33, r24	; 0x21
    30e6:	0f c0       	rjmp	.+30     	; 0x3106 <Get_Password+0xec>
    30e8:	88 ec       	ldi	r24, 0xC8	; 200
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	98 a3       	std	Y+32, r25	; 0x20
    30ee:	8f 8f       	std	Y+31, r24	; 0x1f
    30f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30f2:	98 a1       	ldd	r25, Y+32	; 0x20
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <Get_Password+0xda>
    30f8:	98 a3       	std	Y+32, r25	; 0x20
    30fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fc:	89 a1       	ldd	r24, Y+33	; 0x21
    30fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	9a a3       	std	Y+34, r25	; 0x22
    3104:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3106:	89 a1       	ldd	r24, Y+33	; 0x21
    3108:	9a a1       	ldd	r25, Y+34	; 0x22
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	69 f7       	brne	.-38     	; 0x30e8 <Get_Password+0xce>
    310e:	14 c0       	rjmp	.+40     	; 0x3138 <Get_Password+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3110:	6b a1       	ldd	r22, Y+35	; 0x23
    3112:	7c a1       	ldd	r23, Y+36	; 0x24
    3114:	8d a1       	ldd	r24, Y+37	; 0x25
    3116:	9e a1       	ldd	r25, Y+38	; 0x26
    3118:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	9a a3       	std	Y+34, r25	; 0x22
    3122:	89 a3       	std	Y+33, r24	; 0x21
    3124:	89 a1       	ldd	r24, Y+33	; 0x21
    3126:	9a a1       	ldd	r25, Y+34	; 0x22
    3128:	9e 8f       	std	Y+30, r25	; 0x1e
    312a:	8d 8f       	std	Y+29, r24	; 0x1d
    312c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    312e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <Get_Password+0x116>
    3134:	9e 8f       	std	Y+30, r25	; 0x1e
    3136:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				HLCD_u8SetCursor(HLCD_u8_LINE_2 , counter);
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	6b a5       	ldd	r22, Y+43	; 0x2b
    313c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
				HLCD_u8SendChar('*');
    3140:	8a e2       	ldi	r24, 0x2A	; 42
    3142:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <HLCD_u8SendChar>
				pass[counter++]=returnedValue;
    3146:	8b a5       	ldd	r24, Y+43	; 0x2b
    3148:	28 2f       	mov	r18, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	4c a5       	ldd	r20, Y+44	; 0x2c
    314e:	ce 01       	movw	r24, r28
    3150:	8d 96       	adiw	r24, 0x2d	; 45
    3152:	fc 01       	movw	r30, r24
    3154:	e2 0f       	add	r30, r18
    3156:	f3 1f       	adc	r31, r19
    3158:	40 83       	st	Z, r20
    315a:	8b a5       	ldd	r24, Y+43	; 0x2b
    315c:	8f 5f       	subi	r24, 0xFF	; 255
    315e:	8b a7       	std	Y+43, r24	; 0x2b
    3160:	67 cf       	rjmp	.-306    	; 0x3030 <Get_Password+0x16>
			}
		}
	}
	if(counter != 4){
    3162:	8b a5       	ldd	r24, Y+43	; 0x2b
    3164:	84 30       	cpi	r24, 0x04	; 4
    3166:	a9 f0       	breq	.+42     	; 0x3192 <Get_Password+0x178>
		/*user entered unavailable password */
		HLCD_u8ClearDisplay();
    3168:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
		HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_0);
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		HLCD_u8SendString("your pass should",0);
    3174:	85 e8       	ldi	r24, 0x85	; 133
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	60 e0       	ldi	r22, 0x00	; 0
    317a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
		HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    317e:	82 e0       	ldi	r24, 0x02	; 2
    3180:	60 e0       	ldi	r22, 0x00	; 0
    3182:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		HLCD_u8SendString("4 chars",0);
    3186:	86 e9       	ldi	r24, 0x96	; 150
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    3190:	76 c0       	rjmp	.+236    	; 0x327e <Get_Password+0x264>
	}
	else{
		/* Save the password on the EEPROM <Non Volatile memory >*/
			Write_Pass_To_Memory(pass);
    3192:	ce 01       	movw	r24, r28
    3194:	8d 96       	adiw	r24, 0x2d	; 45
    3196:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <Write_Pass_To_Memory>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	a0 ea       	ldi	r26, 0xA0	; 160
    31a0:	b0 e4       	ldi	r27, 0x40	; 64
    31a2:	89 8f       	std	Y+25, r24	; 0x19
    31a4:	9a 8f       	std	Y+26, r25	; 0x1a
    31a6:	ab 8f       	std	Y+27, r26	; 0x1b
    31a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	69 8d       	ldd	r22, Y+25	; 0x19
    31ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	4a ef       	ldi	r20, 0xFA	; 250
    31b8:	54 e4       	ldi	r21, 0x44	; 68
    31ba:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	8d 8b       	std	Y+21, r24	; 0x15
    31c4:	9e 8b       	std	Y+22, r25	; 0x16
    31c6:	af 8b       	std	Y+23, r26	; 0x17
    31c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31ca:	6d 89       	ldd	r22, Y+21	; 0x15
    31cc:	7e 89       	ldd	r23, Y+22	; 0x16
    31ce:	8f 89       	ldd	r24, Y+23	; 0x17
    31d0:	98 8d       	ldd	r25, Y+24	; 0x18
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e8       	ldi	r20, 0x80	; 128
    31d8:	5f e3       	ldi	r21, 0x3F	; 63
    31da:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    31de:	88 23       	and	r24, r24
    31e0:	2c f4       	brge	.+10     	; 0x31ec <Get_Password+0x1d2>
		__ticks = 1;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	9c 8b       	std	Y+20, r25	; 0x14
    31e8:	8b 8b       	std	Y+19, r24	; 0x13
    31ea:	3f c0       	rjmp	.+126    	; 0x326a <Get_Password+0x250>
	else if (__tmp > 65535)
    31ec:	6d 89       	ldd	r22, Y+21	; 0x15
    31ee:	7e 89       	ldd	r23, Y+22	; 0x16
    31f0:	8f 89       	ldd	r24, Y+23	; 0x17
    31f2:	98 8d       	ldd	r25, Y+24	; 0x18
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	3f ef       	ldi	r19, 0xFF	; 255
    31f8:	4f e7       	ldi	r20, 0x7F	; 127
    31fa:	57 e4       	ldi	r21, 0x47	; 71
    31fc:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    3200:	18 16       	cp	r1, r24
    3202:	4c f5       	brge	.+82     	; 0x3256 <Get_Password+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3204:	69 8d       	ldd	r22, Y+25	; 0x19
    3206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e2       	ldi	r20, 0x20	; 32
    3212:	51 e4       	ldi	r21, 0x41	; 65
    3214:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	bc 01       	movw	r22, r24
    321e:	cd 01       	movw	r24, r26
    3220:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	9c 8b       	std	Y+20, r25	; 0x14
    322a:	8b 8b       	std	Y+19, r24	; 0x13
    322c:	0f c0       	rjmp	.+30     	; 0x324c <Get_Password+0x232>
    322e:	88 ec       	ldi	r24, 0xC8	; 200
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	9a 8b       	std	Y+18, r25	; 0x12
    3234:	89 8b       	std	Y+17, r24	; 0x11
    3236:	89 89       	ldd	r24, Y+17	; 0x11
    3238:	9a 89       	ldd	r25, Y+18	; 0x12
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <Get_Password+0x220>
    323e:	9a 8b       	std	Y+18, r25	; 0x12
    3240:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3242:	8b 89       	ldd	r24, Y+19	; 0x13
    3244:	9c 89       	ldd	r25, Y+20	; 0x14
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	9c 8b       	std	Y+20, r25	; 0x14
    324a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324c:	8b 89       	ldd	r24, Y+19	; 0x13
    324e:	9c 89       	ldd	r25, Y+20	; 0x14
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	69 f7       	brne	.-38     	; 0x322e <Get_Password+0x214>
    3254:	14 c0       	rjmp	.+40     	; 0x327e <Get_Password+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3256:	6d 89       	ldd	r22, Y+21	; 0x15
    3258:	7e 89       	ldd	r23, Y+22	; 0x16
    325a:	8f 89       	ldd	r24, Y+23	; 0x17
    325c:	98 8d       	ldd	r25, Y+24	; 0x18
    325e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	9c 8b       	std	Y+20, r25	; 0x14
    3268:	8b 8b       	std	Y+19, r24	; 0x13
    326a:	8b 89       	ldd	r24, Y+19	; 0x13
    326c:	9c 89       	ldd	r25, Y+20	; 0x14
    326e:	98 8b       	std	Y+16, r25	; 0x10
    3270:	8f 87       	std	Y+15, r24	; 0x0f
    3272:	8f 85       	ldd	r24, Y+15	; 0x0f
    3274:	98 89       	ldd	r25, Y+16	; 0x10
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <Get_Password+0x25c>
    327a:	98 8b       	std	Y+16, r25	; 0x10
    327c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);
		}
		HLCD_u8ClearDisplay();
    327e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
		HLCD_u8SendString("your pass saved",0);
    3282:	8e e9       	ldi	r24, 0x9E	; 158
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	60 e0       	ldi	r22, 0x00	; 0
    3288:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	aa e7       	ldi	r26, 0x7A	; 122
    3292:	b4 e4       	ldi	r27, 0x44	; 68
    3294:	8b 87       	std	Y+11, r24	; 0x0b
    3296:	9c 87       	std	Y+12, r25	; 0x0c
    3298:	ad 87       	std	Y+13, r26	; 0x0d
    329a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329c:	6b 85       	ldd	r22, Y+11	; 0x0b
    329e:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	4a ef       	ldi	r20, 0xFA	; 250
    32aa:	54 e4       	ldi	r21, 0x44	; 68
    32ac:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	8f 83       	std	Y+7, r24	; 0x07
    32b6:	98 87       	std	Y+8, r25	; 0x08
    32b8:	a9 87       	std	Y+9, r26	; 0x09
    32ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32bc:	6f 81       	ldd	r22, Y+7	; 0x07
    32be:	78 85       	ldd	r23, Y+8	; 0x08
    32c0:	89 85       	ldd	r24, Y+9	; 0x09
    32c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e8       	ldi	r20, 0x80	; 128
    32ca:	5f e3       	ldi	r21, 0x3F	; 63
    32cc:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    32d0:	88 23       	and	r24, r24
    32d2:	2c f4       	brge	.+10     	; 0x32de <Get_Password+0x2c4>
		__ticks = 1;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	9e 83       	std	Y+6, r25	; 0x06
    32da:	8d 83       	std	Y+5, r24	; 0x05
    32dc:	3f c0       	rjmp	.+126    	; 0x335c <Get_Password+0x342>
	else if (__tmp > 65535)
    32de:	6f 81       	ldd	r22, Y+7	; 0x07
    32e0:	78 85       	ldd	r23, Y+8	; 0x08
    32e2:	89 85       	ldd	r24, Y+9	; 0x09
    32e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	3f ef       	ldi	r19, 0xFF	; 255
    32ea:	4f e7       	ldi	r20, 0x7F	; 127
    32ec:	57 e4       	ldi	r21, 0x47	; 71
    32ee:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    32f2:	18 16       	cp	r1, r24
    32f4:	4c f5       	brge	.+82     	; 0x3348 <Get_Password+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e2       	ldi	r20, 0x20	; 32
    3304:	51 e4       	ldi	r21, 0x41	; 65
    3306:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	9e 83       	std	Y+6, r25	; 0x06
    331c:	8d 83       	std	Y+5, r24	; 0x05
    331e:	0f c0       	rjmp	.+30     	; 0x333e <Get_Password+0x324>
    3320:	88 ec       	ldi	r24, 0xC8	; 200
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	9c 83       	std	Y+4, r25	; 0x04
    3326:	8b 83       	std	Y+3, r24	; 0x03
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	9c 81       	ldd	r25, Y+4	; 0x04
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <Get_Password+0x312>
    3330:	9c 83       	std	Y+4, r25	; 0x04
    3332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3334:	8d 81       	ldd	r24, Y+5	; 0x05
    3336:	9e 81       	ldd	r25, Y+6	; 0x06
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	9e 83       	std	Y+6, r25	; 0x06
    333c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333e:	8d 81       	ldd	r24, Y+5	; 0x05
    3340:	9e 81       	ldd	r25, Y+6	; 0x06
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	69 f7       	brne	.-38     	; 0x3320 <Get_Password+0x306>
    3346:	14 c0       	rjmp	.+40     	; 0x3370 <Get_Password+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3348:	6f 81       	ldd	r22, Y+7	; 0x07
    334a:	78 85       	ldd	r23, Y+8	; 0x08
    334c:	89 85       	ldd	r24, Y+9	; 0x09
    334e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3350:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	9e 83       	std	Y+6, r25	; 0x06
    335a:	8d 83       	std	Y+5, r24	; 0x05
    335c:	8d 81       	ldd	r24, Y+5	; 0x05
    335e:	9e 81       	ldd	r25, Y+6	; 0x06
    3360:	9a 83       	std	Y+2, r25	; 0x02
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	9a 81       	ldd	r25, Y+2	; 0x02
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <Get_Password+0x34e>
    336c:	9a 83       	std	Y+2, r25	; 0x02
    336e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		break;
	}
  }
    3370:	e0 96       	adiw	r28, 0x30	; 48
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <Login_System>:

u8 Login_System(void){
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	a6 97       	sbiw	r28, 0x26	; 38
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
	u8 pass[4];
	u8 counter = 0,returnedValue,loginFlag = 0,passFlag=1;
    3396:	19 a2       	std	Y+33, r1	; 0x21
    3398:	18 a2       	std	Y+32, r1	; 0x20
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	8f 8f       	std	Y+31, r24	; 0x1f
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    339e:	82 e0       	ldi	r24, 0x02	; 2
    33a0:	60 e0       	ldi	r22, 0x00	; 0
    33a2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	for(u8 i=0 ; i < 3 ; i++){
    33a6:	1e 8e       	std	Y+30, r1	; 0x1e
    33a8:	45 c1       	rjmp	.+650    	; 0x3634 <Login_System+0x2b2>
		while(1){
			HKPD_u8GetKey(&returnedValue);
    33aa:	ce 01       	movw	r24, r28
    33ac:	86 96       	adiw	r24, 0x26	; 38
    33ae:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <HKPD_u8GetKey>
			if(returnedValue!= HKPD_u8_NO_KEY_PRESSED){
    33b2:	8e a1       	ldd	r24, Y+38	; 0x26
    33b4:	8f 3f       	cpi	r24, 0xFF	; 255
    33b6:	c9 f3       	breq	.-14     	; 0x33aa <Login_System+0x28>
				if(returnedValue == '=') break;
    33b8:	8e a1       	ldd	r24, Y+38	; 0x26
    33ba:	8d 33       	cpi	r24, 0x3D	; 61
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <Login_System+0x3e>
    33be:	8e c0       	rjmp	.+284    	; 0x34dc <Login_System+0x15a>
				else{
					HLCD_u8SetCursor(HLCD_u8_LINE_2,counter);
    33c0:	82 e0       	ldi	r24, 0x02	; 2
    33c2:	69 a1       	ldd	r22, Y+33	; 0x21
    33c4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
					HLCD_u8SendChar(returnedValue);
    33c8:	8e a1       	ldd	r24, Y+38	; 0x26
    33ca:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <HLCD_u8SendChar>
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	a8 e4       	ldi	r26, 0x48	; 72
    33d4:	b2 e4       	ldi	r27, 0x42	; 66
    33d6:	89 8f       	std	Y+25, r24	; 0x19
    33d8:	9a 8f       	std	Y+26, r25	; 0x1a
    33da:	ab 8f       	std	Y+27, r26	; 0x1b
    33dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33de:	69 8d       	ldd	r22, Y+25	; 0x19
    33e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	4a ef       	ldi	r20, 0xFA	; 250
    33ec:	54 e4       	ldi	r21, 0x44	; 68
    33ee:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	8d 8b       	std	Y+21, r24	; 0x15
    33f8:	9e 8b       	std	Y+22, r25	; 0x16
    33fa:	af 8b       	std	Y+23, r26	; 0x17
    33fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3400:	7e 89       	ldd	r23, Y+22	; 0x16
    3402:	8f 89       	ldd	r24, Y+23	; 0x17
    3404:	98 8d       	ldd	r25, Y+24	; 0x18
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e8       	ldi	r20, 0x80	; 128
    340c:	5f e3       	ldi	r21, 0x3F	; 63
    340e:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    3412:	88 23       	and	r24, r24
    3414:	2c f4       	brge	.+10     	; 0x3420 <Login_System+0x9e>
		__ticks = 1;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	9c 8b       	std	Y+20, r25	; 0x14
    341c:	8b 8b       	std	Y+19, r24	; 0x13
    341e:	3f c0       	rjmp	.+126    	; 0x349e <Login_System+0x11c>
	else if (__tmp > 65535)
    3420:	6d 89       	ldd	r22, Y+21	; 0x15
    3422:	7e 89       	ldd	r23, Y+22	; 0x16
    3424:	8f 89       	ldd	r24, Y+23	; 0x17
    3426:	98 8d       	ldd	r25, Y+24	; 0x18
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	3f ef       	ldi	r19, 0xFF	; 255
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	57 e4       	ldi	r21, 0x47	; 71
    3430:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    3434:	18 16       	cp	r1, r24
    3436:	4c f5       	brge	.+82     	; 0x348a <Login_System+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3438:	69 8d       	ldd	r22, Y+25	; 0x19
    343a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    343c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    343e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e2       	ldi	r20, 0x20	; 32
    3446:	51 e4       	ldi	r21, 0x41	; 65
    3448:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	bc 01       	movw	r22, r24
    3452:	cd 01       	movw	r24, r26
    3454:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	9c 8b       	std	Y+20, r25	; 0x14
    345e:	8b 8b       	std	Y+19, r24	; 0x13
    3460:	0f c0       	rjmp	.+30     	; 0x3480 <Login_System+0xfe>
    3462:	88 ec       	ldi	r24, 0xC8	; 200
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	9a 8b       	std	Y+18, r25	; 0x12
    3468:	89 8b       	std	Y+17, r24	; 0x11
    346a:	89 89       	ldd	r24, Y+17	; 0x11
    346c:	9a 89       	ldd	r25, Y+18	; 0x12
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <Login_System+0xec>
    3472:	9a 8b       	std	Y+18, r25	; 0x12
    3474:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3476:	8b 89       	ldd	r24, Y+19	; 0x13
    3478:	9c 89       	ldd	r25, Y+20	; 0x14
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	9c 8b       	std	Y+20, r25	; 0x14
    347e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3480:	8b 89       	ldd	r24, Y+19	; 0x13
    3482:	9c 89       	ldd	r25, Y+20	; 0x14
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	69 f7       	brne	.-38     	; 0x3462 <Login_System+0xe0>
    3488:	14 c0       	rjmp	.+40     	; 0x34b2 <Login_System+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348a:	6d 89       	ldd	r22, Y+21	; 0x15
    348c:	7e 89       	ldd	r23, Y+22	; 0x16
    348e:	8f 89       	ldd	r24, Y+23	; 0x17
    3490:	98 8d       	ldd	r25, Y+24	; 0x18
    3492:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9c 8b       	std	Y+20, r25	; 0x14
    349c:	8b 8b       	std	Y+19, r24	; 0x13
    349e:	8b 89       	ldd	r24, Y+19	; 0x13
    34a0:	9c 89       	ldd	r25, Y+20	; 0x14
    34a2:	98 8b       	std	Y+16, r25	; 0x10
    34a4:	8f 87       	std	Y+15, r24	; 0x0f
    34a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a8:	98 89       	ldd	r25, Y+16	; 0x10
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <Login_System+0x128>
    34ae:	98 8b       	std	Y+16, r25	; 0x10
    34b0:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(50);
					HLCD_u8SetCursor(HLCD_u8_LINE_2,counter);
    34b2:	82 e0       	ldi	r24, 0x02	; 2
    34b4:	69 a1       	ldd	r22, Y+33	; 0x21
    34b6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
					HLCD_u8SendChar('*');
    34ba:	8a e2       	ldi	r24, 0x2A	; 42
    34bc:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <HLCD_u8SendChar>
					pass[counter++] = returnedValue;
    34c0:	89 a1       	ldd	r24, Y+33	; 0x21
    34c2:	28 2f       	mov	r18, r24
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4e a1       	ldd	r20, Y+38	; 0x26
    34c8:	ce 01       	movw	r24, r28
    34ca:	82 96       	adiw	r24, 0x22	; 34
    34cc:	fc 01       	movw	r30, r24
    34ce:	e2 0f       	add	r30, r18
    34d0:	f3 1f       	adc	r31, r19
    34d2:	40 83       	st	Z, r20
    34d4:	89 a1       	ldd	r24, Y+33	; 0x21
    34d6:	8f 5f       	subi	r24, 0xFF	; 255
    34d8:	89 a3       	std	Y+33, r24	; 0x21
    34da:	67 cf       	rjmp	.-306    	; 0x33aa <Login_System+0x28>
				}
			}
		}
		if(counter != 4){
    34dc:	89 a1       	ldd	r24, Y+33	; 0x21
    34de:	84 30       	cpi	r24, 0x04	; 4
    34e0:	89 f0       	breq	.+34     	; 0x3504 <Login_System+0x182>
			/*User entered unavailable password*/
			counter = 0;
    34e2:	19 a2       	std	Y+33, r1	; 0x21
			HLCD_u8ClearDisplay();
    34e4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
			HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_0);
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			HLCD_u8SendString("Wrong,try again",0);
    34f0:	8e ea       	ldi	r24, 0xAE	; 174
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
			HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    34fa:	82 e0       	ldi	r24, 0x02	; 2
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
    3502:	95 c0       	rjmp	.+298    	; 0x362e <Login_System+0x2ac>
		else{
			/*User entered 4 Chars password  */
			/*Check if the password is right or wrong*/
			u8 readValue;
			/*Read the password from EEPROM*/
			 Get_Pass_From_Memory();
    3504:	0e 94 86 1b 	call	0x370c	; 0x370c <Get_Pass_From_Memory>
			 passFlag =  Check_Pass(pass);
    3508:	ce 01       	movw	r24, r28
    350a:	82 96       	adiw	r24, 0x22	; 34
    350c:	0e 94 a5 1b 	call	0x374a	; 0x374a <Check_Pass>
    3510:	8f 8f       	std	Y+31, r24	; 0x1f
			if(passFlag){
    3512:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3514:	88 23       	and	r24, r24
    3516:	09 f4       	brne	.+2      	; 0x351a <Login_System+0x198>
    3518:	7d c0       	rjmp	.+250    	; 0x3614 <Login_System+0x292>
				/*Pass is right*/
				loginFlag = 1;
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	88 a3       	std	Y+32, r24	; 0x20
				counter = 0;
    351e:	19 a2       	std	Y+33, r1	; 0x21
				HLCD_u8ClearDisplay();
    3520:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
				HLCD_u8SendString("Pass is correct",0);
    3524:	8e eb       	ldi	r24, 0xBE	; 190
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	aa e7       	ldi	r26, 0x7A	; 122
    3534:	b4 e4       	ldi	r27, 0x44	; 68
    3536:	8b 87       	std	Y+11, r24	; 0x0b
    3538:	9c 87       	std	Y+12, r25	; 0x0c
    353a:	ad 87       	std	Y+13, r26	; 0x0d
    353c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3540:	7c 85       	ldd	r23, Y+12	; 0x0c
    3542:	8d 85       	ldd	r24, Y+13	; 0x0d
    3544:	9e 85       	ldd	r25, Y+14	; 0x0e
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	4a ef       	ldi	r20, 0xFA	; 250
    354c:	54 e4       	ldi	r21, 0x44	; 68
    354e:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	8f 83       	std	Y+7, r24	; 0x07
    3558:	98 87       	std	Y+8, r25	; 0x08
    355a:	a9 87       	std	Y+9, r26	; 0x09
    355c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    355e:	6f 81       	ldd	r22, Y+7	; 0x07
    3560:	78 85       	ldd	r23, Y+8	; 0x08
    3562:	89 85       	ldd	r24, Y+9	; 0x09
    3564:	9a 85       	ldd	r25, Y+10	; 0x0a
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e8       	ldi	r20, 0x80	; 128
    356c:	5f e3       	ldi	r21, 0x3F	; 63
    356e:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    3572:	88 23       	and	r24, r24
    3574:	2c f4       	brge	.+10     	; 0x3580 <Login_System+0x1fe>
		__ticks = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	3f c0       	rjmp	.+126    	; 0x35fe <Login_System+0x27c>
	else if (__tmp > 65535)
    3580:	6f 81       	ldd	r22, Y+7	; 0x07
    3582:	78 85       	ldd	r23, Y+8	; 0x08
    3584:	89 85       	ldd	r24, Y+9	; 0x09
    3586:	9a 85       	ldd	r25, Y+10	; 0x0a
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	3f ef       	ldi	r19, 0xFF	; 255
    358c:	4f e7       	ldi	r20, 0x7F	; 127
    358e:	57 e4       	ldi	r21, 0x47	; 71
    3590:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    3594:	18 16       	cp	r1, r24
    3596:	4c f5       	brge	.+82     	; 0x35ea <Login_System+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3598:	6b 85       	ldd	r22, Y+11	; 0x0b
    359a:	7c 85       	ldd	r23, Y+12	; 0x0c
    359c:	8d 85       	ldd	r24, Y+13	; 0x0d
    359e:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <Login_System+0x25e>
    35c2:	88 ec       	ldi	r24, 0xC8	; 200
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9c 83       	std	Y+4, r25	; 0x04
    35c8:	8b 83       	std	Y+3, r24	; 0x03
    35ca:	8b 81       	ldd	r24, Y+3	; 0x03
    35cc:	9c 81       	ldd	r25, Y+4	; 0x04
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <Login_System+0x24c>
    35d2:	9c 83       	std	Y+4, r25	; 0x04
    35d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d6:	8d 81       	ldd	r24, Y+5	; 0x05
    35d8:	9e 81       	ldd	r25, Y+6	; 0x06
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	9e 83       	std	Y+6, r25	; 0x06
    35de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	69 f7       	brne	.-38     	; 0x35c2 <Login_System+0x240>
    35e8:	29 c0       	rjmp	.+82     	; 0x363c <Login_System+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ea:	6f 81       	ldd	r22, Y+7	; 0x07
    35ec:	78 85       	ldd	r23, Y+8	; 0x08
    35ee:	89 85       	ldd	r24, Y+9	; 0x09
    35f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f2:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9e 83       	std	Y+6, r25	; 0x06
    35fc:	8d 83       	std	Y+5, r24	; 0x05
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	9e 81       	ldd	r25, Y+6	; 0x06
    3602:	9a 83       	std	Y+2, r25	; 0x02
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	9a 81       	ldd	r25, Y+2	; 0x02
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <Login_System+0x288>
    360e:	9a 83       	std	Y+2, r25	; 0x02
    3610:	89 83       	std	Y+1, r24	; 0x01
    3612:	14 c0       	rjmp	.+40     	; 0x363c <Login_System+0x2ba>
				_delay_ms(1000);
				break;
			}
			else{
				/*pass is wrong*/
				loginFlag = 0;
    3614:	18 a2       	std	Y+32, r1	; 0x20
				counter = 0;
    3616:	19 a2       	std	Y+33, r1	; 0x21
				HLCD_u8ClearDisplay();
    3618:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
				HLCD_u8SendString("wrong,try again",0);
    361c:	8e ec       	ldi	r24, 0xCE	; 206
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	60 e0       	ldi	r22, 0x00	; 0
    3622:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
				HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    3626:	82 e0       	ldi	r24, 0x02	; 2
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>

u8 Login_System(void){
	u8 pass[4];
	u8 counter = 0,returnedValue,loginFlag = 0,passFlag=1;
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
	for(u8 i=0 ; i < 3 ; i++){
    362e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3630:	8f 5f       	subi	r24, 0xFF	; 255
    3632:	8e 8f       	std	Y+30, r24	; 0x1e
    3634:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3636:	83 30       	cpi	r24, 0x03	; 3
    3638:	08 f4       	brcc	.+2      	; 0x363c <Login_System+0x2ba>
    363a:	b7 ce       	rjmp	.-658    	; 0x33aa <Login_System+0x28>
				HLCD_u8SendString("wrong,try again",0);
				HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
			}
		}
	}
	return loginFlag;
    363c:	88 a1       	ldd	r24, Y+32	; 0x20
}
    363e:	a6 96       	adiw	r28, 0x26	; 38
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	08 95       	ret

00003650 <Modify_Password>:


u8 Modify_Password(void){
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	00 d0       	rcall	.+0      	; 0x3656 <Modify_Password+0x6>
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
	u8 flag=0 , temp ;
    365a:	1a 82       	std	Y+2, r1	; 0x02
	HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_0);
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendString("your old pass :",0);
    3664:	8e ed       	ldi	r24, 0xDE	; 222
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	60 e0       	ldi	r22, 0x00	; 0
    366a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
	temp = Login_System();
    366e:	0e 94 c1 19 	call	0x3382	; 0x3382 <Login_System>
    3672:	89 83       	std	Y+1, r24	; 0x01
	if(temp){
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	88 23       	and	r24, r24
    3678:	a1 f0       	breq	.+40     	; 0x36a2 <Modify_Password+0x52>
		/*Correct old password*/
		flag = 1;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	8a 83       	std	Y+2, r24	; 0x02
		HLCD_u8ClearDisplay();
    367e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
		HLCD_u8SetCursor(HLCD_u8_LINE_1 ,HLCD_u8_Position_0);
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	60 e0       	ldi	r22, 0x00	; 0
    3686:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		HLCD_u8SendString("your new pass:",0);
    368a:	8e ee       	ldi	r24, 0xEE	; 238
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	60 e0       	ldi	r22, 0x00	; 0
    3690:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
		HLCD_u8SetCursor(HLCD_u8_LINE_2 , HLCD_u8_Position_0);
    3694:	82 e0       	ldi	r24, 0x02	; 2
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		/*set new password*/
		Get_Password();
    369c:	0e 94 0d 18 	call	0x301a	; 0x301a <Get_Password>
    36a0:	01 c0       	rjmp	.+2      	; 0x36a4 <Modify_Password+0x54>
	}
	else{
		/*user entered wrong old password*/
		flag = 0;
    36a2:	1a 82       	std	Y+2, r1	; 0x02
	}
	return flag;
    36a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	08 95       	ret

000036b0 <Write_Pass_To_Memory>:


void Write_Pass_To_Memory(u8 * pass){
    36b0:	df 93       	push	r29
    36b2:	cf 93       	push	r28
    36b4:	00 d0       	rcall	.+0      	; 0x36b6 <Write_Pass_To_Memory+0x6>
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    36ba:	9a 83       	std	Y+2, r25	; 0x02
    36bc:	89 83       	std	Y+1, r24	; 0x01
	HEEPROM_u8WriteByte(pass[0] , 3);
    36be:	e9 81       	ldd	r30, Y+1	; 0x01
    36c0:	fa 81       	ldd	r31, Y+2	; 0x02
    36c2:	80 81       	ld	r24, Z
    36c4:	63 e0       	ldi	r22, 0x03	; 3
    36c6:	70 e0       	ldi	r23, 0x00	; 0
    36c8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <HEEPROM_u8WriteByte>
	HEEPROM_u8WriteByte(pass[1] , 25);
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	9a 81       	ldd	r25, Y+2	; 0x02
    36d0:	fc 01       	movw	r30, r24
    36d2:	31 96       	adiw	r30, 0x01	; 1
    36d4:	80 81       	ld	r24, Z
    36d6:	69 e1       	ldi	r22, 0x19	; 25
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <HEEPROM_u8WriteByte>
	HEEPROM_u8WriteByte(pass[2] , 100);
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	fc 01       	movw	r30, r24
    36e4:	32 96       	adiw	r30, 0x02	; 2
    36e6:	80 81       	ld	r24, Z
    36e8:	64 e6       	ldi	r22, 0x64	; 100
    36ea:	70 e0       	ldi	r23, 0x00	; 0
    36ec:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <HEEPROM_u8WriteByte>
	HEEPROM_u8WriteByte(pass[3] , 125);
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	fc 01       	movw	r30, r24
    36f6:	33 96       	adiw	r30, 0x03	; 3
    36f8:	80 81       	ld	r24, Z
    36fa:	6d e7       	ldi	r22, 0x7D	; 125
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <HEEPROM_u8WriteByte>
}
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret

0000370c <Get_Pass_From_Memory>:

void Get_Pass_From_Memory(void){
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
	HEEPROM_u8ReadByte(&Byte_1 , 3);
    3714:	8f ed       	ldi	r24, 0xDF	; 223
    3716:	92 e0       	ldi	r25, 0x02	; 2
    3718:	63 e0       	ldi	r22, 0x03	; 3
    371a:	70 e0       	ldi	r23, 0x00	; 0
    371c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <HEEPROM_u8ReadByte>
	HEEPROM_u8ReadByte(&Byte_2 , 25);
    3720:	8e ed       	ldi	r24, 0xDE	; 222
    3722:	92 e0       	ldi	r25, 0x02	; 2
    3724:	69 e1       	ldi	r22, 0x19	; 25
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <HEEPROM_u8ReadByte>
	HEEPROM_u8ReadByte(&Byte_3 , 100);
    372c:	8c ed       	ldi	r24, 0xDC	; 220
    372e:	92 e0       	ldi	r25, 0x02	; 2
    3730:	64 e6       	ldi	r22, 0x64	; 100
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <HEEPROM_u8ReadByte>
	HEEPROM_u8ReadByte(&Byte_4 , 125);
    3738:	8d ed       	ldi	r24, 0xDD	; 221
    373a:	92 e0       	ldi	r25, 0x02	; 2
    373c:	6d e7       	ldi	r22, 0x7D	; 125
    373e:	70 e0       	ldi	r23, 0x00	; 0
    3740:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <HEEPROM_u8ReadByte>
}
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	08 95       	ret

0000374a <Check_Pass>:

u8 Check_Pass(u8* pass){
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	00 d0       	rcall	.+0      	; 0x3750 <Check_Pass+0x6>
    3750:	0f 92       	push	r0
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	9b 83       	std	Y+3, r25	; 0x03
    3758:	8a 83       	std	Y+2, r24	; 0x02
	u8 passFlag = 1;
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	89 83       	std	Y+1, r24	; 0x01
	if(pass[0] != Byte_1) passFlag = 0;
    375e:	ea 81       	ldd	r30, Y+2	; 0x02
    3760:	fb 81       	ldd	r31, Y+3	; 0x03
    3762:	90 81       	ld	r25, Z
    3764:	80 91 df 02 	lds	r24, 0x02DF
    3768:	98 17       	cp	r25, r24
    376a:	09 f0       	breq	.+2      	; 0x376e <Check_Pass+0x24>
    376c:	19 82       	std	Y+1, r1	; 0x01
	if(pass[1] != Byte_2) passFlag = 0;
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	9b 81       	ldd	r25, Y+3	; 0x03
    3772:	fc 01       	movw	r30, r24
    3774:	31 96       	adiw	r30, 0x01	; 1
    3776:	90 81       	ld	r25, Z
    3778:	80 91 de 02 	lds	r24, 0x02DE
    377c:	98 17       	cp	r25, r24
    377e:	09 f0       	breq	.+2      	; 0x3782 <Check_Pass+0x38>
    3780:	19 82       	std	Y+1, r1	; 0x01
	if(pass[2] != Byte_3) passFlag = 0;
    3782:	8a 81       	ldd	r24, Y+2	; 0x02
    3784:	9b 81       	ldd	r25, Y+3	; 0x03
    3786:	fc 01       	movw	r30, r24
    3788:	32 96       	adiw	r30, 0x02	; 2
    378a:	90 81       	ld	r25, Z
    378c:	80 91 dc 02 	lds	r24, 0x02DC
    3790:	98 17       	cp	r25, r24
    3792:	09 f0       	breq	.+2      	; 0x3796 <Check_Pass+0x4c>
    3794:	19 82       	std	Y+1, r1	; 0x01
	if(pass[3] != Byte_4) passFlag = 0;
    3796:	8a 81       	ldd	r24, Y+2	; 0x02
    3798:	9b 81       	ldd	r25, Y+3	; 0x03
    379a:	fc 01       	movw	r30, r24
    379c:	33 96       	adiw	r30, 0x03	; 3
    379e:	90 81       	ld	r25, Z
    37a0:	80 91 dd 02 	lds	r24, 0x02DD
    37a4:	98 17       	cp	r25, r24
    37a6:	09 f0       	breq	.+2      	; 0x37aa <Check_Pass+0x60>
    37a8:	19 82       	std	Y+1, r1	; 0x01
	return passFlag;
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	08 95       	ret

000037b8 <MDIO_u8INIT>:
#include"BIT_MATH.h"
#include"MDIO_private.h"
#include"MDIO_interface.h"
#include"MDIO_config.h"
u8 MDIO_u8INIT(void)
{
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	0f 92       	push	r0
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState=STD_TYPES_OK;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	89 83       	std	Y+1, r24	; 0x01
	/*PORTA*/
	MDIO_u8_DDRA_REG = PRIVATE_u8_CONC(MDIO_u8_PA7_DIRECTION,
    37c6:	ea e3       	ldi	r30, 0x3A	; 58
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	8f ef       	ldi	r24, 0xFF	; 255
    37cc:	80 83       	st	Z, r24
			MDIO_u8_PA3_DIRECTION,
			MDIO_u8_PA2_DIRECTION,
			MDIO_u8_PA1_DIRECTION,
			MDIO_u8_PA0_DIRECTION);

	MDIO_u8_DDRB_REG = PRIVATE_u8_CONC(MDIO_u8_PB7_DIRECTION,
    37ce:	e7 e3       	ldi	r30, 0x37	; 55
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	8f ef       	ldi	r24, 0xFF	; 255
    37d4:	80 83       	st	Z, r24
			MDIO_u8_PB3_DIRECTION,
			MDIO_u8_PB2_DIRECTION,
			MDIO_u8_PB1_DIRECTION,
			MDIO_u8_PB0_DIRECTION);

	MDIO_u8_DDRC_REG = PRIVATE_u8_CONC(MDIO_u8_PC7_DIRECTION,
    37d6:	e4 e3       	ldi	r30, 0x34	; 52
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	10 82       	st	Z, r1
			MDIO_u8_PC3_DIRECTION,
			MDIO_u8_PC2_DIRECTION,
			MDIO_u8_PC1_DIRECTION,
			MDIO_u8_PC0_DIRECTION);

	MDIO_u8_DDRD_REG = PRIVATE_u8_CONC(MDIO_u8_PD7_DIRECTION,
    37dc:	e1 e3       	ldi	r30, 0x31	; 49
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	87 e0       	ldi	r24, 0x07	; 7
    37e2:	80 83       	st	Z, r24
			MDIO_u8_PD3_DIRECTION,
			MDIO_u8_PD2_DIRECTION,
			MDIO_u8_PD1_DIRECTION,
			MDIO_u8_PD0_DIRECTION);

	MDIO_u8_PORTA_REG= PRIVATE_u8_CONC(MDIO_u8_PA7_value,
    37e4:	eb e3       	ldi	r30, 0x3B	; 59
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	8f ef       	ldi	r24, 0xFF	; 255
    37ea:	80 83       	st	Z, r24
           MDIO_u8_PA3_value,
           MDIO_u8_PA2_value,
           MDIO_u8_PA1_value,
           MDIO_u8_PA0_value);

	MDIO_u8_PORTB_REG= PRIVATE_u8_CONC(MDIO_u8_PB7_value,
    37ec:	e8 e3       	ldi	r30, 0x38	; 56
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 ef       	ldi	r24, 0xF0	; 240
    37f2:	80 83       	st	Z, r24
	       MDIO_u8_PB3_value,
	       MDIO_u8_PB2_value,
	       MDIO_u8_PB1_value,
	       MDIO_u8_PB0_value);

	MDIO_u8_PORTC_REG= PRIVATE_u8_CONC(MDIO_u8_PC7_value,
    37f4:	e5 e3       	ldi	r30, 0x35	; 53
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	10 82       	st	Z, r1
	       MDIO_u8_PC3_value,
	       MDIO_u8_PC2_value,
	       MDIO_u8_PC1_value,
	       MDIO_u8_PC0_value);

	MDIO_u8_PORTD_REG= PRIVATE_u8_CONC(MDIO_u8_PD7_value,
    37fa:	e2 e3       	ldi	r30, 0x32	; 50
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	80 ef       	ldi	r24, 0xF0	; 240
    3800:	80 83       	st	Z, r24
	       MDIO_u8_PD3_value,
	       MDIO_u8_PD2_value,
	       MDIO_u8_PD1_value,
	       MDIO_u8_PD0_value);

	return Local_u8ErrorState;
    3802:	89 81       	ldd	r24, Y+1	; 0x01
}
    3804:	0f 90       	pop	r0
    3806:	cf 91       	pop	r28
    3808:	df 91       	pop	r29
    380a:	08 95       	ret

0000380c <MDIO_u8SetPinValue>:

	return Local_u8ErrorState;
}
*/
u8 MDIO_u8SetPinValue(u8 Copy_u8_Port_Id,u8 Copy_u8_Pin_Id,u8 Copy_u8_Pin_Value)
{
    380c:	df 93       	push	r29
    380e:	cf 93       	push	r28
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
    3814:	2a 97       	sbiw	r28, 0x0a	; 10
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	8a 83       	std	Y+2, r24	; 0x02
    3822:	6b 83       	std	Y+3, r22	; 0x03
    3824:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= STD_TYPES_NOK;
    3826:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_Id<=MDIO_u8_PORTD)&&(Copy_u8_Pin_Id<=MDIO_u8_PIN_7))
    3828:	8a 81       	ldd	r24, Y+2	; 0x02
    382a:	84 30       	cpi	r24, 0x04	; 4
    382c:	08 f0       	brcs	.+2      	; 0x3830 <MDIO_u8SetPinValue+0x24>
    382e:	fa c0       	rjmp	.+500    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	88 30       	cpi	r24, 0x08	; 8
    3834:	08 f0       	brcs	.+2      	; 0x3838 <MDIO_u8SetPinValue+0x2c>
    3836:	f6 c0       	rjmp	.+492    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
	{
		Local_u8ErrorState= STD_TYPES_OK;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8_Pin_Value)
    383c:	8c 81       	ldd	r24, Y+4	; 0x04
    383e:	28 2f       	mov	r18, r24
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	3a 87       	std	Y+10, r19	; 0x0a
    3844:	29 87       	std	Y+9, r18	; 0x09
    3846:	89 85       	ldd	r24, Y+9	; 0x09
    3848:	9a 85       	ldd	r25, Y+10	; 0x0a
    384a:	00 97       	sbiw	r24, 0x00	; 0
    384c:	09 f4       	brne	.+2      	; 0x3850 <MDIO_u8SetPinValue+0x44>
    384e:	75 c0       	rjmp	.+234    	; 0x393a <MDIO_u8SetPinValue+0x12e>
    3850:	29 85       	ldd	r18, Y+9	; 0x09
    3852:	3a 85       	ldd	r19, Y+10	; 0x0a
    3854:	21 30       	cpi	r18, 0x01	; 1
    3856:	31 05       	cpc	r19, r1
    3858:	09 f0       	breq	.+2      	; 0x385c <MDIO_u8SetPinValue+0x50>
    385a:	e3 c0       	rjmp	.+454    	; 0x3a22 <MDIO_u8SetPinValue+0x216>
		{
			case MDIO_u8_HIGH:
				switch(Copy_u8_Port_Id)
    385c:	8a 81       	ldd	r24, Y+2	; 0x02
    385e:	28 2f       	mov	r18, r24
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	38 87       	std	Y+8, r19	; 0x08
    3864:	2f 83       	std	Y+7, r18	; 0x07
    3866:	8f 81       	ldd	r24, Y+7	; 0x07
    3868:	98 85       	ldd	r25, Y+8	; 0x08
    386a:	81 30       	cpi	r24, 0x01	; 1
    386c:	91 05       	cpc	r25, r1
    386e:	49 f1       	breq	.+82     	; 0x38c2 <MDIO_u8SetPinValue+0xb6>
    3870:	2f 81       	ldd	r18, Y+7	; 0x07
    3872:	38 85       	ldd	r19, Y+8	; 0x08
    3874:	22 30       	cpi	r18, 0x02	; 2
    3876:	31 05       	cpc	r19, r1
    3878:	2c f4       	brge	.+10     	; 0x3884 <MDIO_u8SetPinValue+0x78>
    387a:	8f 81       	ldd	r24, Y+7	; 0x07
    387c:	98 85       	ldd	r25, Y+8	; 0x08
    387e:	00 97       	sbiw	r24, 0x00	; 0
    3880:	61 f0       	breq	.+24     	; 0x389a <MDIO_u8SetPinValue+0x8e>
    3882:	d0 c0       	rjmp	.+416    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
    3884:	2f 81       	ldd	r18, Y+7	; 0x07
    3886:	38 85       	ldd	r19, Y+8	; 0x08
    3888:	22 30       	cpi	r18, 0x02	; 2
    388a:	31 05       	cpc	r19, r1
    388c:	71 f1       	breq	.+92     	; 0x38ea <MDIO_u8SetPinValue+0xde>
    388e:	8f 81       	ldd	r24, Y+7	; 0x07
    3890:	98 85       	ldd	r25, Y+8	; 0x08
    3892:	83 30       	cpi	r24, 0x03	; 3
    3894:	91 05       	cpc	r25, r1
    3896:	e9 f1       	breq	.+122    	; 0x3912 <MDIO_u8SetPinValue+0x106>
    3898:	c5 c0       	rjmp	.+394    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
				{
					case MDIO_u8_PORTA:
						SET_BIT(MDIO_u8_PORTA_REG,Copy_u8_Pin_Id);
    389a:	ab e3       	ldi	r26, 0x3B	; 59
    389c:	b0 e0       	ldi	r27, 0x00	; 0
    389e:	eb e3       	ldi	r30, 0x3B	; 59
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	80 81       	ld	r24, Z
    38a4:	48 2f       	mov	r20, r24
    38a6:	8b 81       	ldd	r24, Y+3	; 0x03
    38a8:	28 2f       	mov	r18, r24
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	02 2e       	mov	r0, r18
    38b2:	02 c0       	rjmp	.+4      	; 0x38b8 <MDIO_u8SetPinValue+0xac>
    38b4:	88 0f       	add	r24, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	0a 94       	dec	r0
    38ba:	e2 f7       	brpl	.-8      	; 0x38b4 <MDIO_u8SetPinValue+0xa8>
    38bc:	84 2b       	or	r24, r20
    38be:	8c 93       	st	X, r24
    38c0:	b1 c0       	rjmp	.+354    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
						break;

					case MDIO_u8_PORTB:
						SET_BIT(MDIO_u8_PORTB_REG,Copy_u8_Pin_Id);
    38c2:	a8 e3       	ldi	r26, 0x38	; 56
    38c4:	b0 e0       	ldi	r27, 0x00	; 0
    38c6:	e8 e3       	ldi	r30, 0x38	; 56
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	80 81       	ld	r24, Z
    38cc:	48 2f       	mov	r20, r24
    38ce:	8b 81       	ldd	r24, Y+3	; 0x03
    38d0:	28 2f       	mov	r18, r24
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	02 2e       	mov	r0, r18
    38da:	02 c0       	rjmp	.+4      	; 0x38e0 <MDIO_u8SetPinValue+0xd4>
    38dc:	88 0f       	add	r24, r24
    38de:	99 1f       	adc	r25, r25
    38e0:	0a 94       	dec	r0
    38e2:	e2 f7       	brpl	.-8      	; 0x38dc <MDIO_u8SetPinValue+0xd0>
    38e4:	84 2b       	or	r24, r20
    38e6:	8c 93       	st	X, r24
    38e8:	9d c0       	rjmp	.+314    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
						break;

					case MDIO_u8_PORTC:
						SET_BIT(MDIO_u8_PORTC_REG,Copy_u8_Pin_Id);
    38ea:	a5 e3       	ldi	r26, 0x35	; 53
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	e5 e3       	ldi	r30, 0x35	; 53
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	48 2f       	mov	r20, r24
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	28 2f       	mov	r18, r24
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	02 2e       	mov	r0, r18
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <MDIO_u8SetPinValue+0xfc>
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	0a 94       	dec	r0
    390a:	e2 f7       	brpl	.-8      	; 0x3904 <MDIO_u8SetPinValue+0xf8>
    390c:	84 2b       	or	r24, r20
    390e:	8c 93       	st	X, r24
    3910:	89 c0       	rjmp	.+274    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
						break;

					case MDIO_u8_PORTD:
						SET_BIT(MDIO_u8_PORTD_REG,Copy_u8_Pin_Id);
    3912:	a2 e3       	ldi	r26, 0x32	; 50
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	e2 e3       	ldi	r30, 0x32	; 50
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	80 81       	ld	r24, Z
    391c:	48 2f       	mov	r20, r24
    391e:	8b 81       	ldd	r24, Y+3	; 0x03
    3920:	28 2f       	mov	r18, r24
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	02 2e       	mov	r0, r18
    392a:	02 c0       	rjmp	.+4      	; 0x3930 <MDIO_u8SetPinValue+0x124>
    392c:	88 0f       	add	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	0a 94       	dec	r0
    3932:	e2 f7       	brpl	.-8      	; 0x392c <MDIO_u8SetPinValue+0x120>
    3934:	84 2b       	or	r24, r20
    3936:	8c 93       	st	X, r24
    3938:	75 c0       	rjmp	.+234    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
						break;
				}
			break;

			case MDIO_u8_LOW:
				switch(Copy_u8_Port_Id)
    393a:	8a 81       	ldd	r24, Y+2	; 0x02
    393c:	28 2f       	mov	r18, r24
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	3e 83       	std	Y+6, r19	; 0x06
    3942:	2d 83       	std	Y+5, r18	; 0x05
    3944:	8d 81       	ldd	r24, Y+5	; 0x05
    3946:	9e 81       	ldd	r25, Y+6	; 0x06
    3948:	81 30       	cpi	r24, 0x01	; 1
    394a:	91 05       	cpc	r25, r1
    394c:	59 f1       	breq	.+86     	; 0x39a4 <MDIO_u8SetPinValue+0x198>
    394e:	2d 81       	ldd	r18, Y+5	; 0x05
    3950:	3e 81       	ldd	r19, Y+6	; 0x06
    3952:	22 30       	cpi	r18, 0x02	; 2
    3954:	31 05       	cpc	r19, r1
    3956:	2c f4       	brge	.+10     	; 0x3962 <MDIO_u8SetPinValue+0x156>
    3958:	8d 81       	ldd	r24, Y+5	; 0x05
    395a:	9e 81       	ldd	r25, Y+6	; 0x06
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	69 f0       	breq	.+26     	; 0x397a <MDIO_u8SetPinValue+0x16e>
    3960:	61 c0       	rjmp	.+194    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
    3962:	2d 81       	ldd	r18, Y+5	; 0x05
    3964:	3e 81       	ldd	r19, Y+6	; 0x06
    3966:	22 30       	cpi	r18, 0x02	; 2
    3968:	31 05       	cpc	r19, r1
    396a:	89 f1       	breq	.+98     	; 0x39ce <MDIO_u8SetPinValue+0x1c2>
    396c:	8d 81       	ldd	r24, Y+5	; 0x05
    396e:	9e 81       	ldd	r25, Y+6	; 0x06
    3970:	83 30       	cpi	r24, 0x03	; 3
    3972:	91 05       	cpc	r25, r1
    3974:	09 f4       	brne	.+2      	; 0x3978 <MDIO_u8SetPinValue+0x16c>
    3976:	40 c0       	rjmp	.+128    	; 0x39f8 <MDIO_u8SetPinValue+0x1ec>
    3978:	55 c0       	rjmp	.+170    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
				{
					case MDIO_u8_PORTA:
						CLR_BIT(MDIO_u8_PORTA_REG,Copy_u8_Pin_Id);
    397a:	ab e3       	ldi	r26, 0x3B	; 59
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	eb e3       	ldi	r30, 0x3B	; 59
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	48 2f       	mov	r20, r24
    3986:	8b 81       	ldd	r24, Y+3	; 0x03
    3988:	28 2f       	mov	r18, r24
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	02 2e       	mov	r0, r18
    3992:	02 c0       	rjmp	.+4      	; 0x3998 <MDIO_u8SetPinValue+0x18c>
    3994:	88 0f       	add	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	0a 94       	dec	r0
    399a:	e2 f7       	brpl	.-8      	; 0x3994 <MDIO_u8SetPinValue+0x188>
    399c:	80 95       	com	r24
    399e:	84 23       	and	r24, r20
    39a0:	8c 93       	st	X, r24
    39a2:	40 c0       	rjmp	.+128    	; 0x3a24 <MDIO_u8SetPinValue+0x218>
						break;

					case MDIO_u8_PORTB:
						CLR_BIT(MDIO_u8_PORTB_REG,Copy_u8_Pin_Id);
    39a4:	a8 e3       	ldi	r26, 0x38	; 56
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	e8 e3       	ldi	r30, 0x38	; 56
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	48 2f       	mov	r20, r24
    39b0:	8b 81       	ldd	r24, Y+3	; 0x03
    39b2:	28 2f       	mov	r18, r24
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	02 2e       	mov	r0, r18
    39bc:	02 c0       	rjmp	.+4      	; 0x39c2 <MDIO_u8SetPinValue+0x1b6>
    39be:	88 0f       	add	r24, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	0a 94       	dec	r0
    39c4:	e2 f7       	brpl	.-8      	; 0x39be <MDIO_u8SetPinValue+0x1b2>
    39c6:	80 95       	com	r24
    39c8:	84 23       	and	r24, r20
    39ca:	8c 93       	st	X, r24
    39cc:	2b c0       	rjmp	.+86     	; 0x3a24 <MDIO_u8SetPinValue+0x218>
						break;

					case MDIO_u8_PORTC:
						CLR_BIT(MDIO_u8_PORTC_REG,Copy_u8_Pin_Id);
    39ce:	a5 e3       	ldi	r26, 0x35	; 53
    39d0:	b0 e0       	ldi	r27, 0x00	; 0
    39d2:	e5 e3       	ldi	r30, 0x35	; 53
    39d4:	f0 e0       	ldi	r31, 0x00	; 0
    39d6:	80 81       	ld	r24, Z
    39d8:	48 2f       	mov	r20, r24
    39da:	8b 81       	ldd	r24, Y+3	; 0x03
    39dc:	28 2f       	mov	r18, r24
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	02 2e       	mov	r0, r18
    39e6:	02 c0       	rjmp	.+4      	; 0x39ec <MDIO_u8SetPinValue+0x1e0>
    39e8:	88 0f       	add	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	0a 94       	dec	r0
    39ee:	e2 f7       	brpl	.-8      	; 0x39e8 <MDIO_u8SetPinValue+0x1dc>
    39f0:	80 95       	com	r24
    39f2:	84 23       	and	r24, r20
    39f4:	8c 93       	st	X, r24
    39f6:	16 c0       	rjmp	.+44     	; 0x3a24 <MDIO_u8SetPinValue+0x218>
						break;

					case MDIO_u8_PORTD:
						CLR_BIT(MDIO_u8_PORTD_REG,Copy_u8_Pin_Id);
    39f8:	a2 e3       	ldi	r26, 0x32	; 50
    39fa:	b0 e0       	ldi	r27, 0x00	; 0
    39fc:	e2 e3       	ldi	r30, 0x32	; 50
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	80 81       	ld	r24, Z
    3a02:	48 2f       	mov	r20, r24
    3a04:	8b 81       	ldd	r24, Y+3	; 0x03
    3a06:	28 2f       	mov	r18, r24
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	02 2e       	mov	r0, r18
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <MDIO_u8SetPinValue+0x20a>
    3a12:	88 0f       	add	r24, r24
    3a14:	99 1f       	adc	r25, r25
    3a16:	0a 94       	dec	r0
    3a18:	e2 f7       	brpl	.-8      	; 0x3a12 <MDIO_u8SetPinValue+0x206>
    3a1a:	80 95       	com	r24
    3a1c:	84 23       	and	r24, r20
    3a1e:	8c 93       	st	X, r24
    3a20:	01 c0       	rjmp	.+2      	; 0x3a24 <MDIO_u8SetPinValue+0x218>
						break;
				}
			break;

			default:
			Local_u8ErrorState=STD_TYPES_NOK;
    3a22:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorState ;
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a26:	2a 96       	adiw	r28, 0x0a	; 10
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 Copy_u8_Port_Id,u8 Copy_u8_Pin_Id,u8* Copy_Pu8_Pin_Value)
{
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	27 97       	sbiw	r28, 0x07	; 7
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	f8 94       	cli
    3a46:	de bf       	out	0x3e, r29	; 62
    3a48:	0f be       	out	0x3f, r0	; 63
    3a4a:	cd bf       	out	0x3d, r28	; 61
    3a4c:	8a 83       	std	Y+2, r24	; 0x02
    3a4e:	6b 83       	std	Y+3, r22	; 0x03
    3a50:	5d 83       	std	Y+5, r21	; 0x05
    3a52:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=STD_TYPES_NOK;
    3a54:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_Id<=MDIO_u8_PORTD)&&(Copy_u8_Pin_Id<=MDIO_u8_PIN_7)
    3a56:	8a 81       	ldd	r24, Y+2	; 0x02
    3a58:	84 30       	cpi	r24, 0x04	; 4
    3a5a:	08 f0       	brcs	.+2      	; 0x3a5e <MDIO_u8GetPinValue+0x26>
    3a5c:	7d c0       	rjmp	.+250    	; 0x3b58 <MDIO_u8GetPinValue+0x120>
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a60:	88 30       	cpi	r24, 0x08	; 8
    3a62:	08 f0       	brcs	.+2      	; 0x3a66 <MDIO_u8GetPinValue+0x2e>
    3a64:	79 c0       	rjmp	.+242    	; 0x3b58 <MDIO_u8GetPinValue+0x120>
    3a66:	8c 81       	ldd	r24, Y+4	; 0x04
    3a68:	9d 81       	ldd	r25, Y+5	; 0x05
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	09 f4       	brne	.+2      	; 0x3a70 <MDIO_u8GetPinValue+0x38>
    3a6e:	74 c0       	rjmp	.+232    	; 0x3b58 <MDIO_u8GetPinValue+0x120>
			&&(Copy_Pu8_Pin_Value!=STD_TYPES_NULL))
	{
		Local_u8ErrorState=STD_TYPES_OK;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8_Port_Id)
    3a74:	8a 81       	ldd	r24, Y+2	; 0x02
    3a76:	28 2f       	mov	r18, r24
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	3f 83       	std	Y+7, r19	; 0x07
    3a7c:	2e 83       	std	Y+6, r18	; 0x06
    3a7e:	4e 81       	ldd	r20, Y+6	; 0x06
    3a80:	5f 81       	ldd	r21, Y+7	; 0x07
    3a82:	41 30       	cpi	r20, 0x01	; 1
    3a84:	51 05       	cpc	r21, r1
    3a86:	59 f1       	breq	.+86     	; 0x3ade <MDIO_u8GetPinValue+0xa6>
    3a88:	8e 81       	ldd	r24, Y+6	; 0x06
    3a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a8c:	82 30       	cpi	r24, 0x02	; 2
    3a8e:	91 05       	cpc	r25, r1
    3a90:	34 f4       	brge	.+12     	; 0x3a9e <MDIO_u8GetPinValue+0x66>
    3a92:	2e 81       	ldd	r18, Y+6	; 0x06
    3a94:	3f 81       	ldd	r19, Y+7	; 0x07
    3a96:	21 15       	cp	r18, r1
    3a98:	31 05       	cpc	r19, r1
    3a9a:	69 f0       	breq	.+26     	; 0x3ab6 <MDIO_u8GetPinValue+0x7e>
    3a9c:	5c c0       	rjmp	.+184    	; 0x3b56 <MDIO_u8GetPinValue+0x11e>
    3a9e:	4e 81       	ldd	r20, Y+6	; 0x06
    3aa0:	5f 81       	ldd	r21, Y+7	; 0x07
    3aa2:	42 30       	cpi	r20, 0x02	; 2
    3aa4:	51 05       	cpc	r21, r1
    3aa6:	79 f1       	breq	.+94     	; 0x3b06 <MDIO_u8GetPinValue+0xce>
    3aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    3aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    3aac:	83 30       	cpi	r24, 0x03	; 3
    3aae:	91 05       	cpc	r25, r1
    3ab0:	09 f4       	brne	.+2      	; 0x3ab4 <MDIO_u8GetPinValue+0x7c>
    3ab2:	3d c0       	rjmp	.+122    	; 0x3b2e <MDIO_u8GetPinValue+0xf6>
    3ab4:	50 c0       	rjmp	.+160    	; 0x3b56 <MDIO_u8GetPinValue+0x11e>
		{
		    case MDIO_u8_PORTA:
			*Copy_Pu8_Pin_Value=GET_BIT(MDIO_u8_PINA_REG,Copy_u8_Pin_Id);
    3ab6:	e9 e3       	ldi	r30, 0x39	; 57
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	80 81       	ld	r24, Z
    3abc:	28 2f       	mov	r18, r24
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac2:	88 2f       	mov	r24, r24
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	a9 01       	movw	r20, r18
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <MDIO_u8GetPinValue+0x96>
    3aca:	55 95       	asr	r21
    3acc:	47 95       	ror	r20
    3ace:	8a 95       	dec	r24
    3ad0:	e2 f7       	brpl	.-8      	; 0x3aca <MDIO_u8GetPinValue+0x92>
    3ad2:	ca 01       	movw	r24, r20
    3ad4:	81 70       	andi	r24, 0x01	; 1
    3ad6:	ec 81       	ldd	r30, Y+4	; 0x04
    3ad8:	fd 81       	ldd	r31, Y+5	; 0x05
    3ada:	80 83       	st	Z, r24
    3adc:	3d c0       	rjmp	.+122    	; 0x3b58 <MDIO_u8GetPinValue+0x120>
			break;

		    case MDIO_u8_PORTB:
		    *Copy_Pu8_Pin_Value=GET_BIT(MDIO_u8_PINB_REG,Copy_u8_Pin_Id);
    3ade:	e6 e3       	ldi	r30, 0x36	; 54
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	28 2f       	mov	r18, r24
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aea:	88 2f       	mov	r24, r24
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	a9 01       	movw	r20, r18
    3af0:	02 c0       	rjmp	.+4      	; 0x3af6 <MDIO_u8GetPinValue+0xbe>
    3af2:	55 95       	asr	r21
    3af4:	47 95       	ror	r20
    3af6:	8a 95       	dec	r24
    3af8:	e2 f7       	brpl	.-8      	; 0x3af2 <MDIO_u8GetPinValue+0xba>
    3afa:	ca 01       	movw	r24, r20
    3afc:	81 70       	andi	r24, 0x01	; 1
    3afe:	ec 81       	ldd	r30, Y+4	; 0x04
    3b00:	fd 81       	ldd	r31, Y+5	; 0x05
    3b02:	80 83       	st	Z, r24
    3b04:	29 c0       	rjmp	.+82     	; 0x3b58 <MDIO_u8GetPinValue+0x120>
			break;

		    case MDIO_u8_PORTC:
		    *Copy_Pu8_Pin_Value=GET_BIT(MDIO_u8_PINC_REG,Copy_u8_Pin_Id);
    3b06:	e3 e3       	ldi	r30, 0x33	; 51
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	80 81       	ld	r24, Z
    3b0c:	28 2f       	mov	r18, r24
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	8b 81       	ldd	r24, Y+3	; 0x03
    3b12:	88 2f       	mov	r24, r24
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	a9 01       	movw	r20, r18
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <MDIO_u8GetPinValue+0xe6>
    3b1a:	55 95       	asr	r21
    3b1c:	47 95       	ror	r20
    3b1e:	8a 95       	dec	r24
    3b20:	e2 f7       	brpl	.-8      	; 0x3b1a <MDIO_u8GetPinValue+0xe2>
    3b22:	ca 01       	movw	r24, r20
    3b24:	81 70       	andi	r24, 0x01	; 1
    3b26:	ec 81       	ldd	r30, Y+4	; 0x04
    3b28:	fd 81       	ldd	r31, Y+5	; 0x05
    3b2a:	80 83       	st	Z, r24
    3b2c:	15 c0       	rjmp	.+42     	; 0x3b58 <MDIO_u8GetPinValue+0x120>
			break;

		    case MDIO_u8_PORTD:
		    *Copy_Pu8_Pin_Value=GET_BIT(MDIO_u8_PIND_REG,Copy_u8_Pin_Id);
    3b2e:	e0 e3       	ldi	r30, 0x30	; 48
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	80 81       	ld	r24, Z
    3b34:	28 2f       	mov	r18, r24
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3a:	88 2f       	mov	r24, r24
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	a9 01       	movw	r20, r18
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <MDIO_u8GetPinValue+0x10e>
    3b42:	55 95       	asr	r21
    3b44:	47 95       	ror	r20
    3b46:	8a 95       	dec	r24
    3b48:	e2 f7       	brpl	.-8      	; 0x3b42 <MDIO_u8GetPinValue+0x10a>
    3b4a:	ca 01       	movw	r24, r20
    3b4c:	81 70       	andi	r24, 0x01	; 1
    3b4e:	ec 81       	ldd	r30, Y+4	; 0x04
    3b50:	fd 81       	ldd	r31, Y+5	; 0x05
    3b52:	80 83       	st	Z, r24
    3b54:	01 c0       	rjmp	.+2      	; 0x3b58 <MDIO_u8GetPinValue+0x120>
			break;

		    default:
		    Local_u8ErrorState=STD_TYPES_NOK;
    3b56:	19 82       	std	Y+1, r1	; 0x01
		    break;
		}
	}

	return Local_u8ErrorState;
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b5a:	27 96       	adiw	r28, 0x07	; 7
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <MDIO_u8SetPortValue>:
	}
	return Local_u8ErrorState;
}
*/
u8 MDIO_u8SetPortValue(u8 Copy_u8_Port_Id,u8 Copy_u8_Port_Value)
{
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	00 d0       	rcall	.+0      	; 0x3b72 <MDIO_u8SetPortValue+0x6>
    3b72:	00 d0       	rcall	.+0      	; 0x3b74 <MDIO_u8SetPortValue+0x8>
    3b74:	0f 92       	push	r0
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
    3b7a:	8a 83       	std	Y+2, r24	; 0x02
    3b7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=STD_TYPES_NOK;
    3b7e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8_Port_Id<=MDIO_u8_PORTD)
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	84 30       	cpi	r24, 0x04	; 4
    3b84:	a0 f5       	brcc	.+104    	; 0x3bee <MDIO_u8SetPortValue+0x82>
	{
		Local_u8ErrorState=STD_TYPES_OK;
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8_Port_Id)
    3b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8c:	28 2f       	mov	r18, r24
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	3d 83       	std	Y+5, r19	; 0x05
    3b92:	2c 83       	std	Y+4, r18	; 0x04
    3b94:	8c 81       	ldd	r24, Y+4	; 0x04
    3b96:	9d 81       	ldd	r25, Y+5	; 0x05
    3b98:	81 30       	cpi	r24, 0x01	; 1
    3b9a:	91 05       	cpc	r25, r1
    3b9c:	d1 f0       	breq	.+52     	; 0x3bd2 <MDIO_u8SetPortValue+0x66>
    3b9e:	2c 81       	ldd	r18, Y+4	; 0x04
    3ba0:	3d 81       	ldd	r19, Y+5	; 0x05
    3ba2:	22 30       	cpi	r18, 0x02	; 2
    3ba4:	31 05       	cpc	r19, r1
    3ba6:	2c f4       	brge	.+10     	; 0x3bb2 <MDIO_u8SetPortValue+0x46>
    3ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    3baa:	9d 81       	ldd	r25, Y+5	; 0x05
    3bac:	00 97       	sbiw	r24, 0x00	; 0
    3bae:	61 f0       	breq	.+24     	; 0x3bc8 <MDIO_u8SetPortValue+0x5c>
    3bb0:	1e c0       	rjmp	.+60     	; 0x3bee <MDIO_u8SetPortValue+0x82>
    3bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    3bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    3bb6:	22 30       	cpi	r18, 0x02	; 2
    3bb8:	31 05       	cpc	r19, r1
    3bba:	81 f0       	breq	.+32     	; 0x3bdc <MDIO_u8SetPortValue+0x70>
    3bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    3bc0:	83 30       	cpi	r24, 0x03	; 3
    3bc2:	91 05       	cpc	r25, r1
    3bc4:	81 f0       	breq	.+32     	; 0x3be6 <MDIO_u8SetPortValue+0x7a>
    3bc6:	13 c0       	rjmp	.+38     	; 0x3bee <MDIO_u8SetPortValue+0x82>
		{
		case MDIO_u8_PORTA:
			MDIO_u8_PORTA_REG=Copy_u8_Port_Value;
    3bc8:	eb e3       	ldi	r30, 0x3B	; 59
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bce:	80 83       	st	Z, r24
    3bd0:	0e c0       	rjmp	.+28     	; 0x3bee <MDIO_u8SetPortValue+0x82>
			break;

		case MDIO_u8_PORTB:
			MDIO_u8_PORTB_REG=Copy_u8_Port_Value;
    3bd2:	e8 e3       	ldi	r30, 0x38	; 56
    3bd4:	f0 e0       	ldi	r31, 0x00	; 0
    3bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd8:	80 83       	st	Z, r24
    3bda:	09 c0       	rjmp	.+18     	; 0x3bee <MDIO_u8SetPortValue+0x82>
			break;

		case MDIO_u8_PORTC:
			MDIO_u8_PORTC_REG=Copy_u8_Port_Value;
    3bdc:	e5 e3       	ldi	r30, 0x35	; 53
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	8b 81       	ldd	r24, Y+3	; 0x03
    3be2:	80 83       	st	Z, r24
    3be4:	04 c0       	rjmp	.+8      	; 0x3bee <MDIO_u8SetPortValue+0x82>
			break;

		case MDIO_u8_PORTD:
			MDIO_u8_PORTD_REG=Copy_u8_Port_Value;
    3be6:	e2 e3       	ldi	r30, 0x32	; 50
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	80 83       	st	Z, r24
			break;
		}
	}


	return Local_u8ErrorState;
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	08 95       	ret

00003c00 <MTMR_u8Timer0Init>:
//static u32 totalCTCNumbers = 0;

/* TIMER 0*/

/* Initialization of Timer0 */
u8 MTMR_u8Timer0Init(void){
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	0f 92       	push	r0
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState=STD_TYPES_OK;
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	89 83       	std	Y+1, r24	; 0x01
	/* Choose Timer0 Mode */
	MTMR_u8_TCCR0_REG &= 0xf8; //to clear the first three bits
    3c0e:	a3 e5       	ldi	r26, 0x53	; 83
    3c10:	b0 e0       	ldi	r27, 0x00	; 0
    3c12:	e3 e5       	ldi	r30, 0x53	; 83
    3c14:	f0 e0       	ldi	r31, 0x00	; 0
    3c16:	80 81       	ld	r24, Z
    3c18:	88 7f       	andi	r24, 0xF8	; 248
    3c1a:	8c 93       	st	X, r24
	MTMR_u8_TCCR0_REG |= MTMR_u8_Timer_Mode;
    3c1c:	a3 e5       	ldi	r26, 0x53	; 83
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	e3 e5       	ldi	r30, 0x53	; 83
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	80 81       	ld	r24, Z
    3c26:	8c 93       	st	X, r24
	/* Switch on timer mode to enable the interrupt or set pin value (OC0) */
	switch(MTMR_u8_Timer_Mode){
		case MTMR_u8_Normal_Mode:{
			/* Enable Interrupt */
			SET_BIT(MTMR_u8_TIMSK_REG,0);
    3c28:	a9 e5       	ldi	r26, 0x59	; 89
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	e9 e5       	ldi	r30, 0x59	; 89
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	80 81       	ld	r24, Z
    3c32:	81 60       	ori	r24, 0x01	; 1
    3c34:	8c 93       	st	X, r24
			MTMR_u8_TCCR0_REG |= MTMR_u8_Phase_Correct_PWM_OC0_MODE;
			break;
		}
	}
	/* set preScaler Value in a global Variable*/
	SetPreScaler();
    3c36:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <SetPreScaler>
	return Local_u8ErrorState;
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c3c:	0f 90       	pop	r0
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	08 95       	ret

00003c44 <SetPreScaler>:

void SetPreScaler(){
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
	/* set prescaler value in a globla variable*/
	switch(MTMR_PRESCALER_VALUE){
		case NO_PRESCALING: prescalerValue = 1;    break;
		case PRESCALER_8 :  prescalerValue = 8;    break;
    3c4c:	88 e0       	ldi	r24, 0x08	; 8
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	a0 e0       	ldi	r26, 0x00	; 0
    3c52:	b0 e0       	ldi	r27, 0x00	; 0
    3c54:	80 93 ca 02 	sts	0x02CA, r24
    3c58:	90 93 cb 02 	sts	0x02CB, r25
    3c5c:	a0 93 cc 02 	sts	0x02CC, r26
    3c60:	b0 93 cd 02 	sts	0x02CD, r27
		case PRESCALER_64:  prescalerValue = 64;   break;
		case PRESCALER_256: prescalerValue = 256;  break;
		case PRESCALER_1024:prescalerValue = 1024; break;
	}
}
    3c64:	cf 91       	pop	r28
    3c66:	df 91       	pop	r29
    3c68:	08 95       	ret

00003c6a <MTMR_u8StopTimer>:

void MTMR_u8StopTimer(){
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
	MTMR_u8_TCCR0_REG &= 0xf8;
    3c72:	a3 e5       	ldi	r26, 0x53	; 83
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	e3 e5       	ldi	r30, 0x53	; 83
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	88 7f       	andi	r24, 0xF8	; 248
    3c7e:	8c 93       	st	X, r24
}
    3c80:	cf 91       	pop	r28
    3c82:	df 91       	pop	r29
    3c84:	08 95       	ret

00003c86 <MTMR_u8Timer0NormalModeTimeMapping>:
	/*update the register of compare match value*/
	//MTMR_u8_OCR0_REG = Copy_u16CompareMatchValue;
	//MTMR_u8_TCCR0_REG |= MTMR_PRESCALER_VALUE;
//}

u8 MTMR_u8Timer0NormalModeTimeMapping(u8 hours,u16 minutes,u16 seconds,u16 milliSecond,u16 microSecond){
    3c86:	af 92       	push	r10
    3c88:	bf 92       	push	r11
    3c8a:	cf 92       	push	r12
    3c8c:	df 92       	push	r13
    3c8e:	ef 92       	push	r14
    3c90:	ff 92       	push	r15
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	df 93       	push	r29
    3c98:	cf 93       	push	r28
    3c9a:	cd b7       	in	r28, 0x3d	; 61
    3c9c:	de b7       	in	r29, 0x3e	; 62
    3c9e:	c6 5d       	subi	r28, 0xD6	; 214
    3ca0:	d0 40       	sbci	r29, 0x00	; 0
    3ca2:	0f b6       	in	r0, 0x3f	; 63
    3ca4:	f8 94       	cli
    3ca6:	de bf       	out	0x3e, r29	; 62
    3ca8:	0f be       	out	0x3f, r0	; 63
    3caa:	cd bf       	out	0x3d, r28	; 61
    3cac:	8a a3       	std	Y+34, r24	; 0x22
    3cae:	7c a3       	std	Y+36, r23	; 0x24
    3cb0:	6b a3       	std	Y+35, r22	; 0x23
    3cb2:	5e a3       	std	Y+38, r21	; 0x26
    3cb4:	4d a3       	std	Y+37, r20	; 0x25
    3cb6:	38 a7       	std	Y+40, r19	; 0x28
    3cb8:	2f a3       	std	Y+39, r18	; 0x27
    3cba:	1a a7       	std	Y+42, r17	; 0x2a
    3cbc:	09 a7       	std	Y+41, r16	; 0x29
	u8 Local_u8ErrorState= STD_TYPES_OK;
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	89 a3       	std	Y+33, r24	; 0x21
	u64 timeOfOneTick,timeOfOverflow,numberOfOverlflow,desiredTime;
	if(hours==0 && minutes==0 && seconds==0 && milliSecond==0 && microSecond==0){
    3cc2:	8a a1       	ldd	r24, Y+34	; 0x22
    3cc4:	88 23       	and	r24, r24
    3cc6:	a9 f4       	brne	.+42     	; 0x3cf2 <MTMR_u8Timer0NormalModeTimeMapping+0x6c>
    3cc8:	8b a1       	ldd	r24, Y+35	; 0x23
    3cca:	9c a1       	ldd	r25, Y+36	; 0x24
    3ccc:	00 97       	sbiw	r24, 0x00	; 0
    3cce:	89 f4       	brne	.+34     	; 0x3cf2 <MTMR_u8Timer0NormalModeTimeMapping+0x6c>
    3cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    3cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	69 f4       	brne	.+26     	; 0x3cf2 <MTMR_u8Timer0NormalModeTimeMapping+0x6c>
    3cd8:	8f a1       	ldd	r24, Y+39	; 0x27
    3cda:	98 a5       	ldd	r25, Y+40	; 0x28
    3cdc:	00 97       	sbiw	r24, 0x00	; 0
    3cde:	49 f4       	brne	.+18     	; 0x3cf2 <MTMR_u8Timer0NormalModeTimeMapping+0x6c>
    3ce0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ce2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	29 f4       	brne	.+10     	; 0x3cf2 <MTMR_u8Timer0NormalModeTimeMapping+0x6c>
		MTMR_u8StopTimer();
    3ce8:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MTMR_u8StopTimer>
		Local_u8ErrorState = STD_TYPES_NOK;
    3cec:	19 a2       	std	Y+33, r1	; 0x21
    3cee:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <MTMR_u8Timer0NormalModeTimeMapping+0x17c0>
	}
	else{
	  timeOfOneTick=prescalerValue/8; //in microsecond
    3cf2:	80 91 ca 02 	lds	r24, 0x02CA
    3cf6:	90 91 cb 02 	lds	r25, 0x02CB
    3cfa:	a0 91 cc 02 	lds	r26, 0x02CC
    3cfe:	b0 91 cd 02 	lds	r27, 0x02CD
    3d02:	68 94       	set
    3d04:	12 f8       	bld	r1, 2
    3d06:	b6 95       	lsr	r27
    3d08:	a7 95       	ror	r26
    3d0a:	97 95       	ror	r25
    3d0c:	87 95       	ror	r24
    3d0e:	16 94       	lsr	r1
    3d10:	d1 f7       	brne	.-12     	; 0x3d06 <MTMR_u8Timer0NormalModeTimeMapping+0x80>
    3d12:	9c 01       	movw	r18, r24
    3d14:	ad 01       	movw	r20, r26
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	29 8f       	std	Y+25, r18	; 0x19
    3d20:	3a 8f       	std	Y+26, r19	; 0x1a
    3d22:	4b 8f       	std	Y+27, r20	; 0x1b
    3d24:	5c 8f       	std	Y+28, r21	; 0x1c
    3d26:	6d 8f       	std	Y+29, r22	; 0x1d
    3d28:	7e 8f       	std	Y+30, r23	; 0x1e
    3d2a:	8f 8f       	std	Y+31, r24	; 0x1f
    3d2c:	98 a3       	std	Y+32, r25	; 0x20
	  timeOfOverflow=256*timeOfOneTick; //in microsecond
    3d2e:	29 8d       	ldd	r18, Y+25	; 0x19
    3d30:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3d32:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3d34:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3d36:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3d38:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3d3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d3c:	98 a1       	ldd	r25, Y+32	; 0x20
    3d3e:	08 e0       	ldi	r16, 0x08	; 8
    3d40:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3d44:	a2 2e       	mov	r10, r18
    3d46:	b3 2e       	mov	r11, r19
    3d48:	c4 2e       	mov	r12, r20
    3d4a:	d5 2e       	mov	r13, r21
    3d4c:	e6 2e       	mov	r14, r22
    3d4e:	f7 2e       	mov	r15, r23
    3d50:	08 2f       	mov	r16, r24
    3d52:	19 2f       	mov	r17, r25
    3d54:	a9 8a       	std	Y+17, r10	; 0x11
    3d56:	ba 8a       	std	Y+18, r11	; 0x12
    3d58:	cb 8a       	std	Y+19, r12	; 0x13
    3d5a:	dc 8a       	std	Y+20, r13	; 0x14
    3d5c:	ed 8a       	std	Y+21, r14	; 0x15
    3d5e:	fe 8a       	std	Y+22, r15	; 0x16
    3d60:	0f 8b       	std	Y+23, r16	; 0x17
    3d62:	18 8f       	std	Y+24, r17	; 0x18
	  desiredTime=((hours*3600000000UL));
    3d64:	8a a1       	ldd	r24, Y+34	; 0x22
    3d66:	88 2f       	mov	r24, r24
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	a0 e0       	ldi	r26, 0x00	; 0
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	34 ea       	ldi	r19, 0xA4	; 164
    3d72:	43 e9       	ldi	r20, 0x93	; 147
    3d74:	56 ed       	ldi	r21, 0xD6	; 214
    3d76:	bc 01       	movw	r22, r24
    3d78:	cd 01       	movw	r24, r26
    3d7a:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	9c 01       	movw	r18, r24
    3d84:	ad 01       	movw	r20, r26
    3d86:	60 e0       	ldi	r22, 0x00	; 0
    3d88:	70 e0       	ldi	r23, 0x00	; 0
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	29 83       	std	Y+1, r18	; 0x01
    3d90:	3a 83       	std	Y+2, r19	; 0x02
    3d92:	4b 83       	std	Y+3, r20	; 0x03
    3d94:	5c 83       	std	Y+4, r21	; 0x04
    3d96:	6d 83       	std	Y+5, r22	; 0x05
    3d98:	7e 83       	std	Y+6, r23	; 0x06
    3d9a:	8f 83       	std	Y+7, r24	; 0x07
    3d9c:	98 87       	std	Y+8, r25	; 0x08
	  desiredTime+=(minutes*60000000UL);
    3d9e:	8b a1       	ldd	r24, Y+35	; 0x23
    3da0:	9c a1       	ldd	r25, Y+36	; 0x24
    3da2:	cc 01       	movw	r24, r24
    3da4:	a0 e0       	ldi	r26, 0x00	; 0
    3da6:	b0 e0       	ldi	r27, 0x00	; 0
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	37 e8       	ldi	r19, 0x87	; 135
    3dac:	43 e9       	ldi	r20, 0x93	; 147
    3dae:	53 e0       	ldi	r21, 0x03	; 3
    3db0:	bc 01       	movw	r22, r24
    3db2:	cd 01       	movw	r24, r26
    3db4:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	8c 01       	movw	r16, r24
    3dbe:	9d 01       	movw	r18, r26
    3dc0:	40 e0       	ldi	r20, 0x00	; 0
    3dc2:	50 e0       	ldi	r21, 0x00	; 0
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	70 e0       	ldi	r23, 0x00	; 0
    3dc8:	24 96       	adiw	r28, 0x04	; 4
    3dca:	0f af       	std	Y+63, r16	; 0x3f
    3dcc:	24 97       	sbiw	r28, 0x04	; 4
    3dce:	25 96       	adiw	r28, 0x05	; 5
    3dd0:	1f af       	std	Y+63, r17	; 0x3f
    3dd2:	25 97       	sbiw	r28, 0x05	; 5
    3dd4:	26 96       	adiw	r28, 0x06	; 6
    3dd6:	2f af       	std	Y+63, r18	; 0x3f
    3dd8:	26 97       	sbiw	r28, 0x06	; 6
    3dda:	27 96       	adiw	r28, 0x07	; 7
    3ddc:	3f af       	std	Y+63, r19	; 0x3f
    3dde:	27 97       	sbiw	r28, 0x07	; 7
    3de0:	28 96       	adiw	r28, 0x08	; 8
    3de2:	4f af       	std	Y+63, r20	; 0x3f
    3de4:	28 97       	sbiw	r28, 0x08	; 8
    3de6:	29 96       	adiw	r28, 0x09	; 9
    3de8:	5f af       	std	Y+63, r21	; 0x3f
    3dea:	29 97       	sbiw	r28, 0x09	; 9
    3dec:	2a 96       	adiw	r28, 0x0a	; 10
    3dee:	6f af       	std	Y+63, r22	; 0x3f
    3df0:	2a 97       	sbiw	r28, 0x0a	; 10
    3df2:	2b 96       	adiw	r28, 0x0b	; 11
    3df4:	7f af       	std	Y+63, r23	; 0x3f
    3df6:	2b 97       	sbiw	r28, 0x0b	; 11
    3df8:	19 81       	ldd	r17, Y+1	; 0x01
    3dfa:	2c 96       	adiw	r28, 0x0c	; 12
    3dfc:	1f af       	std	Y+63, r17	; 0x3f
    3dfe:	2c 97       	sbiw	r28, 0x0c	; 12
    3e00:	2a 81       	ldd	r18, Y+2	; 0x02
    3e02:	2d 96       	adiw	r28, 0x0d	; 13
    3e04:	2f af       	std	Y+63, r18	; 0x3f
    3e06:	2d 97       	sbiw	r28, 0x0d	; 13
    3e08:	3b 81       	ldd	r19, Y+3	; 0x03
    3e0a:	2e 96       	adiw	r28, 0x0e	; 14
    3e0c:	3f af       	std	Y+63, r19	; 0x3f
    3e0e:	2e 97       	sbiw	r28, 0x0e	; 14
    3e10:	4c 81       	ldd	r20, Y+4	; 0x04
    3e12:	2f 96       	adiw	r28, 0x0f	; 15
    3e14:	4f af       	std	Y+63, r20	; 0x3f
    3e16:	2f 97       	sbiw	r28, 0x0f	; 15
    3e18:	5d 81       	ldd	r21, Y+5	; 0x05
    3e1a:	60 96       	adiw	r28, 0x10	; 16
    3e1c:	5f af       	std	Y+63, r21	; 0x3f
    3e1e:	60 97       	sbiw	r28, 0x10	; 16
    3e20:	6e 81       	ldd	r22, Y+6	; 0x06
    3e22:	61 96       	adiw	r28, 0x11	; 17
    3e24:	6f af       	std	Y+63, r22	; 0x3f
    3e26:	61 97       	sbiw	r28, 0x11	; 17
    3e28:	7f 81       	ldd	r23, Y+7	; 0x07
    3e2a:	62 96       	adiw	r28, 0x12	; 18
    3e2c:	7f af       	std	Y+63, r23	; 0x3f
    3e2e:	62 97       	sbiw	r28, 0x12	; 18
    3e30:	88 85       	ldd	r24, Y+8	; 0x08
    3e32:	63 96       	adiw	r28, 0x13	; 19
    3e34:	8f af       	std	Y+63, r24	; 0x3f
    3e36:	63 97       	sbiw	r28, 0x13	; 19
    3e38:	2c 96       	adiw	r28, 0x0c	; 12
    3e3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e3c:	2c 97       	sbiw	r28, 0x0c	; 12
    3e3e:	24 96       	adiw	r28, 0x04	; 4
    3e40:	0f ad       	ldd	r16, Y+63	; 0x3f
    3e42:	24 97       	sbiw	r28, 0x04	; 4
    3e44:	90 0f       	add	r25, r16
    3e46:	64 96       	adiw	r28, 0x14	; 20
    3e48:	9f af       	std	Y+63, r25	; 0x3f
    3e4a:	64 97       	sbiw	r28, 0x14	; 20
    3e4c:	11 e0       	ldi	r17, 0x01	; 1
    3e4e:	6c 96       	adiw	r28, 0x1c	; 28
    3e50:	1f af       	std	Y+63, r17	; 0x3f
    3e52:	6c 97       	sbiw	r28, 0x1c	; 28
    3e54:	64 96       	adiw	r28, 0x14	; 20
    3e56:	2f ad       	ldd	r18, Y+63	; 0x3f
    3e58:	64 97       	sbiw	r28, 0x14	; 20
    3e5a:	2c 96       	adiw	r28, 0x0c	; 12
    3e5c:	3f ad       	ldd	r19, Y+63	; 0x3f
    3e5e:	2c 97       	sbiw	r28, 0x0c	; 12
    3e60:	23 17       	cp	r18, r19
    3e62:	18 f0       	brcs	.+6      	; 0x3e6a <MTMR_u8Timer0NormalModeTimeMapping+0x1e4>
    3e64:	6c 96       	adiw	r28, 0x1c	; 28
    3e66:	1f ae       	std	Y+63, r1	; 0x3f
    3e68:	6c 97       	sbiw	r28, 0x1c	; 28
    3e6a:	2d 96       	adiw	r28, 0x0d	; 13
    3e6c:	4f ad       	ldd	r20, Y+63	; 0x3f
    3e6e:	2d 97       	sbiw	r28, 0x0d	; 13
    3e70:	25 96       	adiw	r28, 0x05	; 5
    3e72:	5f ad       	ldd	r21, Y+63	; 0x3f
    3e74:	25 97       	sbiw	r28, 0x05	; 5
    3e76:	45 0f       	add	r20, r21
    3e78:	65 96       	adiw	r28, 0x15	; 21
    3e7a:	4f af       	std	Y+63, r20	; 0x3f
    3e7c:	65 97       	sbiw	r28, 0x15	; 21
    3e7e:	61 e0       	ldi	r22, 0x01	; 1
    3e80:	6d 96       	adiw	r28, 0x1d	; 29
    3e82:	6f af       	std	Y+63, r22	; 0x3f
    3e84:	6d 97       	sbiw	r28, 0x1d	; 29
    3e86:	65 96       	adiw	r28, 0x15	; 21
    3e88:	7f ad       	ldd	r23, Y+63	; 0x3f
    3e8a:	65 97       	sbiw	r28, 0x15	; 21
    3e8c:	2d 96       	adiw	r28, 0x0d	; 13
    3e8e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e90:	2d 97       	sbiw	r28, 0x0d	; 13
    3e92:	78 17       	cp	r23, r24
    3e94:	18 f0       	brcs	.+6      	; 0x3e9c <MTMR_u8Timer0NormalModeTimeMapping+0x216>
    3e96:	6d 96       	adiw	r28, 0x1d	; 29
    3e98:	1f ae       	std	Y+63, r1	; 0x3f
    3e9a:	6d 97       	sbiw	r28, 0x1d	; 29
    3e9c:	6c 96       	adiw	r28, 0x1c	; 28
    3e9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ea0:	6c 97       	sbiw	r28, 0x1c	; 28
    3ea2:	65 96       	adiw	r28, 0x15	; 21
    3ea4:	0f ad       	ldd	r16, Y+63	; 0x3f
    3ea6:	65 97       	sbiw	r28, 0x15	; 21
    3ea8:	90 0f       	add	r25, r16
    3eaa:	6e 96       	adiw	r28, 0x1e	; 30
    3eac:	9f af       	std	Y+63, r25	; 0x3f
    3eae:	6e 97       	sbiw	r28, 0x1e	; 30
    3eb0:	11 e0       	ldi	r17, 0x01	; 1
    3eb2:	6f 96       	adiw	r28, 0x1f	; 31
    3eb4:	1f af       	std	Y+63, r17	; 0x3f
    3eb6:	6f 97       	sbiw	r28, 0x1f	; 31
    3eb8:	6e 96       	adiw	r28, 0x1e	; 30
    3eba:	2f ad       	ldd	r18, Y+63	; 0x3f
    3ebc:	6e 97       	sbiw	r28, 0x1e	; 30
    3ebe:	65 96       	adiw	r28, 0x15	; 21
    3ec0:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ec2:	65 97       	sbiw	r28, 0x15	; 21
    3ec4:	23 17       	cp	r18, r19
    3ec6:	18 f0       	brcs	.+6      	; 0x3ece <MTMR_u8Timer0NormalModeTimeMapping+0x248>
    3ec8:	6f 96       	adiw	r28, 0x1f	; 31
    3eca:	1f ae       	std	Y+63, r1	; 0x3f
    3ecc:	6f 97       	sbiw	r28, 0x1f	; 31
    3ece:	6d 96       	adiw	r28, 0x1d	; 29
    3ed0:	4f ad       	ldd	r20, Y+63	; 0x3f
    3ed2:	6d 97       	sbiw	r28, 0x1d	; 29
    3ed4:	6f 96       	adiw	r28, 0x1f	; 31
    3ed6:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ed8:	6f 97       	sbiw	r28, 0x1f	; 31
    3eda:	45 2b       	or	r20, r21
    3edc:	6d 96       	adiw	r28, 0x1d	; 29
    3ede:	4f af       	std	Y+63, r20	; 0x3f
    3ee0:	6d 97       	sbiw	r28, 0x1d	; 29
    3ee2:	6e 96       	adiw	r28, 0x1e	; 30
    3ee4:	6f ad       	ldd	r22, Y+63	; 0x3f
    3ee6:	6e 97       	sbiw	r28, 0x1e	; 30
    3ee8:	65 96       	adiw	r28, 0x15	; 21
    3eea:	6f af       	std	Y+63, r22	; 0x3f
    3eec:	65 97       	sbiw	r28, 0x15	; 21
    3eee:	2e 96       	adiw	r28, 0x0e	; 14
    3ef0:	7f ad       	ldd	r23, Y+63	; 0x3f
    3ef2:	2e 97       	sbiw	r28, 0x0e	; 14
    3ef4:	26 96       	adiw	r28, 0x06	; 6
    3ef6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ef8:	26 97       	sbiw	r28, 0x06	; 6
    3efa:	78 0f       	add	r23, r24
    3efc:	66 96       	adiw	r28, 0x16	; 22
    3efe:	7f af       	std	Y+63, r23	; 0x3f
    3f00:	66 97       	sbiw	r28, 0x16	; 22
    3f02:	91 e0       	ldi	r25, 0x01	; 1
    3f04:	a0 96       	adiw	r28, 0x20	; 32
    3f06:	9f af       	std	Y+63, r25	; 0x3f
    3f08:	a0 97       	sbiw	r28, 0x20	; 32
    3f0a:	66 96       	adiw	r28, 0x16	; 22
    3f0c:	0f ad       	ldd	r16, Y+63	; 0x3f
    3f0e:	66 97       	sbiw	r28, 0x16	; 22
    3f10:	2e 96       	adiw	r28, 0x0e	; 14
    3f12:	1f ad       	ldd	r17, Y+63	; 0x3f
    3f14:	2e 97       	sbiw	r28, 0x0e	; 14
    3f16:	01 17       	cp	r16, r17
    3f18:	18 f0       	brcs	.+6      	; 0x3f20 <MTMR_u8Timer0NormalModeTimeMapping+0x29a>
    3f1a:	a0 96       	adiw	r28, 0x20	; 32
    3f1c:	1f ae       	std	Y+63, r1	; 0x3f
    3f1e:	a0 97       	sbiw	r28, 0x20	; 32
    3f20:	6d 96       	adiw	r28, 0x1d	; 29
    3f22:	2f ad       	ldd	r18, Y+63	; 0x3f
    3f24:	6d 97       	sbiw	r28, 0x1d	; 29
    3f26:	66 96       	adiw	r28, 0x16	; 22
    3f28:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f2a:	66 97       	sbiw	r28, 0x16	; 22
    3f2c:	23 0f       	add	r18, r19
    3f2e:	a1 96       	adiw	r28, 0x21	; 33
    3f30:	2f af       	std	Y+63, r18	; 0x3f
    3f32:	a1 97       	sbiw	r28, 0x21	; 33
    3f34:	41 e0       	ldi	r20, 0x01	; 1
    3f36:	a2 96       	adiw	r28, 0x22	; 34
    3f38:	4f af       	std	Y+63, r20	; 0x3f
    3f3a:	a2 97       	sbiw	r28, 0x22	; 34
    3f3c:	a1 96       	adiw	r28, 0x21	; 33
    3f3e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3f40:	a1 97       	sbiw	r28, 0x21	; 33
    3f42:	66 96       	adiw	r28, 0x16	; 22
    3f44:	6f ad       	ldd	r22, Y+63	; 0x3f
    3f46:	66 97       	sbiw	r28, 0x16	; 22
    3f48:	56 17       	cp	r21, r22
    3f4a:	18 f0       	brcs	.+6      	; 0x3f52 <MTMR_u8Timer0NormalModeTimeMapping+0x2cc>
    3f4c:	a2 96       	adiw	r28, 0x22	; 34
    3f4e:	1f ae       	std	Y+63, r1	; 0x3f
    3f50:	a2 97       	sbiw	r28, 0x22	; 34
    3f52:	a0 96       	adiw	r28, 0x20	; 32
    3f54:	7f ad       	ldd	r23, Y+63	; 0x3f
    3f56:	a0 97       	sbiw	r28, 0x20	; 32
    3f58:	a2 96       	adiw	r28, 0x22	; 34
    3f5a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f5c:	a2 97       	sbiw	r28, 0x22	; 34
    3f5e:	78 2b       	or	r23, r24
    3f60:	a0 96       	adiw	r28, 0x20	; 32
    3f62:	7f af       	std	Y+63, r23	; 0x3f
    3f64:	a0 97       	sbiw	r28, 0x20	; 32
    3f66:	a1 96       	adiw	r28, 0x21	; 33
    3f68:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f6a:	a1 97       	sbiw	r28, 0x21	; 33
    3f6c:	66 96       	adiw	r28, 0x16	; 22
    3f6e:	9f af       	std	Y+63, r25	; 0x3f
    3f70:	66 97       	sbiw	r28, 0x16	; 22
    3f72:	2f 96       	adiw	r28, 0x0f	; 15
    3f74:	0f ad       	ldd	r16, Y+63	; 0x3f
    3f76:	2f 97       	sbiw	r28, 0x0f	; 15
    3f78:	27 96       	adiw	r28, 0x07	; 7
    3f7a:	1f ad       	ldd	r17, Y+63	; 0x3f
    3f7c:	27 97       	sbiw	r28, 0x07	; 7
    3f7e:	01 0f       	add	r16, r17
    3f80:	67 96       	adiw	r28, 0x17	; 23
    3f82:	0f af       	std	Y+63, r16	; 0x3f
    3f84:	67 97       	sbiw	r28, 0x17	; 23
    3f86:	21 e0       	ldi	r18, 0x01	; 1
    3f88:	a3 96       	adiw	r28, 0x23	; 35
    3f8a:	2f af       	std	Y+63, r18	; 0x3f
    3f8c:	a3 97       	sbiw	r28, 0x23	; 35
    3f8e:	67 96       	adiw	r28, 0x17	; 23
    3f90:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f92:	67 97       	sbiw	r28, 0x17	; 23
    3f94:	2f 96       	adiw	r28, 0x0f	; 15
    3f96:	4f ad       	ldd	r20, Y+63	; 0x3f
    3f98:	2f 97       	sbiw	r28, 0x0f	; 15
    3f9a:	34 17       	cp	r19, r20
    3f9c:	18 f0       	brcs	.+6      	; 0x3fa4 <MTMR_u8Timer0NormalModeTimeMapping+0x31e>
    3f9e:	a3 96       	adiw	r28, 0x23	; 35
    3fa0:	1f ae       	std	Y+63, r1	; 0x3f
    3fa2:	a3 97       	sbiw	r28, 0x23	; 35
    3fa4:	a0 96       	adiw	r28, 0x20	; 32
    3fa6:	5f ad       	ldd	r21, Y+63	; 0x3f
    3fa8:	a0 97       	sbiw	r28, 0x20	; 32
    3faa:	67 96       	adiw	r28, 0x17	; 23
    3fac:	6f ad       	ldd	r22, Y+63	; 0x3f
    3fae:	67 97       	sbiw	r28, 0x17	; 23
    3fb0:	56 0f       	add	r21, r22
    3fb2:	a4 96       	adiw	r28, 0x24	; 36
    3fb4:	5f af       	std	Y+63, r21	; 0x3f
    3fb6:	a4 97       	sbiw	r28, 0x24	; 36
    3fb8:	71 e0       	ldi	r23, 0x01	; 1
    3fba:	a5 96       	adiw	r28, 0x25	; 37
    3fbc:	7f af       	std	Y+63, r23	; 0x3f
    3fbe:	a5 97       	sbiw	r28, 0x25	; 37
    3fc0:	a4 96       	adiw	r28, 0x24	; 36
    3fc2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fc4:	a4 97       	sbiw	r28, 0x24	; 36
    3fc6:	67 96       	adiw	r28, 0x17	; 23
    3fc8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fca:	67 97       	sbiw	r28, 0x17	; 23
    3fcc:	89 17       	cp	r24, r25
    3fce:	18 f0       	brcs	.+6      	; 0x3fd6 <MTMR_u8Timer0NormalModeTimeMapping+0x350>
    3fd0:	a5 96       	adiw	r28, 0x25	; 37
    3fd2:	1f ae       	std	Y+63, r1	; 0x3f
    3fd4:	a5 97       	sbiw	r28, 0x25	; 37
    3fd6:	a3 96       	adiw	r28, 0x23	; 35
    3fd8:	0f ad       	ldd	r16, Y+63	; 0x3f
    3fda:	a3 97       	sbiw	r28, 0x23	; 35
    3fdc:	a5 96       	adiw	r28, 0x25	; 37
    3fde:	1f ad       	ldd	r17, Y+63	; 0x3f
    3fe0:	a5 97       	sbiw	r28, 0x25	; 37
    3fe2:	01 2b       	or	r16, r17
    3fe4:	a3 96       	adiw	r28, 0x23	; 35
    3fe6:	0f af       	std	Y+63, r16	; 0x3f
    3fe8:	a3 97       	sbiw	r28, 0x23	; 35
    3fea:	a4 96       	adiw	r28, 0x24	; 36
    3fec:	2f ad       	ldd	r18, Y+63	; 0x3f
    3fee:	a4 97       	sbiw	r28, 0x24	; 36
    3ff0:	67 96       	adiw	r28, 0x17	; 23
    3ff2:	2f af       	std	Y+63, r18	; 0x3f
    3ff4:	67 97       	sbiw	r28, 0x17	; 23
    3ff6:	60 96       	adiw	r28, 0x10	; 16
    3ff8:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ffa:	60 97       	sbiw	r28, 0x10	; 16
    3ffc:	28 96       	adiw	r28, 0x08	; 8
    3ffe:	4f ad       	ldd	r20, Y+63	; 0x3f
    4000:	28 97       	sbiw	r28, 0x08	; 8
    4002:	34 0f       	add	r19, r20
    4004:	68 96       	adiw	r28, 0x18	; 24
    4006:	3f af       	std	Y+63, r19	; 0x3f
    4008:	68 97       	sbiw	r28, 0x18	; 24
    400a:	51 e0       	ldi	r21, 0x01	; 1
    400c:	a6 96       	adiw	r28, 0x26	; 38
    400e:	5f af       	std	Y+63, r21	; 0x3f
    4010:	a6 97       	sbiw	r28, 0x26	; 38
    4012:	68 96       	adiw	r28, 0x18	; 24
    4014:	6f ad       	ldd	r22, Y+63	; 0x3f
    4016:	68 97       	sbiw	r28, 0x18	; 24
    4018:	60 96       	adiw	r28, 0x10	; 16
    401a:	7f ad       	ldd	r23, Y+63	; 0x3f
    401c:	60 97       	sbiw	r28, 0x10	; 16
    401e:	67 17       	cp	r22, r23
    4020:	18 f0       	brcs	.+6      	; 0x4028 <MTMR_u8Timer0NormalModeTimeMapping+0x3a2>
    4022:	a6 96       	adiw	r28, 0x26	; 38
    4024:	1f ae       	std	Y+63, r1	; 0x3f
    4026:	a6 97       	sbiw	r28, 0x26	; 38
    4028:	a3 96       	adiw	r28, 0x23	; 35
    402a:	8f ad       	ldd	r24, Y+63	; 0x3f
    402c:	a3 97       	sbiw	r28, 0x23	; 35
    402e:	68 96       	adiw	r28, 0x18	; 24
    4030:	9f ad       	ldd	r25, Y+63	; 0x3f
    4032:	68 97       	sbiw	r28, 0x18	; 24
    4034:	89 0f       	add	r24, r25
    4036:	a7 96       	adiw	r28, 0x27	; 39
    4038:	8f af       	std	Y+63, r24	; 0x3f
    403a:	a7 97       	sbiw	r28, 0x27	; 39
    403c:	01 e0       	ldi	r16, 0x01	; 1
    403e:	a8 96       	adiw	r28, 0x28	; 40
    4040:	0f af       	std	Y+63, r16	; 0x3f
    4042:	a8 97       	sbiw	r28, 0x28	; 40
    4044:	a7 96       	adiw	r28, 0x27	; 39
    4046:	1f ad       	ldd	r17, Y+63	; 0x3f
    4048:	a7 97       	sbiw	r28, 0x27	; 39
    404a:	68 96       	adiw	r28, 0x18	; 24
    404c:	2f ad       	ldd	r18, Y+63	; 0x3f
    404e:	68 97       	sbiw	r28, 0x18	; 24
    4050:	12 17       	cp	r17, r18
    4052:	18 f0       	brcs	.+6      	; 0x405a <MTMR_u8Timer0NormalModeTimeMapping+0x3d4>
    4054:	a8 96       	adiw	r28, 0x28	; 40
    4056:	1f ae       	std	Y+63, r1	; 0x3f
    4058:	a8 97       	sbiw	r28, 0x28	; 40
    405a:	a6 96       	adiw	r28, 0x26	; 38
    405c:	3f ad       	ldd	r19, Y+63	; 0x3f
    405e:	a6 97       	sbiw	r28, 0x26	; 38
    4060:	a8 96       	adiw	r28, 0x28	; 40
    4062:	4f ad       	ldd	r20, Y+63	; 0x3f
    4064:	a8 97       	sbiw	r28, 0x28	; 40
    4066:	34 2b       	or	r19, r20
    4068:	a6 96       	adiw	r28, 0x26	; 38
    406a:	3f af       	std	Y+63, r19	; 0x3f
    406c:	a6 97       	sbiw	r28, 0x26	; 38
    406e:	a7 96       	adiw	r28, 0x27	; 39
    4070:	5f ad       	ldd	r21, Y+63	; 0x3f
    4072:	a7 97       	sbiw	r28, 0x27	; 39
    4074:	68 96       	adiw	r28, 0x18	; 24
    4076:	5f af       	std	Y+63, r21	; 0x3f
    4078:	68 97       	sbiw	r28, 0x18	; 24
    407a:	61 96       	adiw	r28, 0x11	; 17
    407c:	6f ad       	ldd	r22, Y+63	; 0x3f
    407e:	61 97       	sbiw	r28, 0x11	; 17
    4080:	29 96       	adiw	r28, 0x09	; 9
    4082:	7f ad       	ldd	r23, Y+63	; 0x3f
    4084:	29 97       	sbiw	r28, 0x09	; 9
    4086:	67 0f       	add	r22, r23
    4088:	69 96       	adiw	r28, 0x19	; 25
    408a:	6f af       	std	Y+63, r22	; 0x3f
    408c:	69 97       	sbiw	r28, 0x19	; 25
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	a9 96       	adiw	r28, 0x29	; 41
    4092:	8f af       	std	Y+63, r24	; 0x3f
    4094:	a9 97       	sbiw	r28, 0x29	; 41
    4096:	69 96       	adiw	r28, 0x19	; 25
    4098:	9f ad       	ldd	r25, Y+63	; 0x3f
    409a:	69 97       	sbiw	r28, 0x19	; 25
    409c:	61 96       	adiw	r28, 0x11	; 17
    409e:	0f ad       	ldd	r16, Y+63	; 0x3f
    40a0:	61 97       	sbiw	r28, 0x11	; 17
    40a2:	90 17       	cp	r25, r16
    40a4:	18 f0       	brcs	.+6      	; 0x40ac <MTMR_u8Timer0NormalModeTimeMapping+0x426>
    40a6:	a9 96       	adiw	r28, 0x29	; 41
    40a8:	1f ae       	std	Y+63, r1	; 0x3f
    40aa:	a9 97       	sbiw	r28, 0x29	; 41
    40ac:	a6 96       	adiw	r28, 0x26	; 38
    40ae:	1f ad       	ldd	r17, Y+63	; 0x3f
    40b0:	a6 97       	sbiw	r28, 0x26	; 38
    40b2:	69 96       	adiw	r28, 0x19	; 25
    40b4:	2f ad       	ldd	r18, Y+63	; 0x3f
    40b6:	69 97       	sbiw	r28, 0x19	; 25
    40b8:	12 0f       	add	r17, r18
    40ba:	aa 96       	adiw	r28, 0x2a	; 42
    40bc:	1f af       	std	Y+63, r17	; 0x3f
    40be:	aa 97       	sbiw	r28, 0x2a	; 42
    40c0:	31 e0       	ldi	r19, 0x01	; 1
    40c2:	ab 96       	adiw	r28, 0x2b	; 43
    40c4:	3f af       	std	Y+63, r19	; 0x3f
    40c6:	ab 97       	sbiw	r28, 0x2b	; 43
    40c8:	aa 96       	adiw	r28, 0x2a	; 42
    40ca:	4f ad       	ldd	r20, Y+63	; 0x3f
    40cc:	aa 97       	sbiw	r28, 0x2a	; 42
    40ce:	69 96       	adiw	r28, 0x19	; 25
    40d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    40d2:	69 97       	sbiw	r28, 0x19	; 25
    40d4:	45 17       	cp	r20, r21
    40d6:	18 f0       	brcs	.+6      	; 0x40de <MTMR_u8Timer0NormalModeTimeMapping+0x458>
    40d8:	ab 96       	adiw	r28, 0x2b	; 43
    40da:	1f ae       	std	Y+63, r1	; 0x3f
    40dc:	ab 97       	sbiw	r28, 0x2b	; 43
    40de:	a9 96       	adiw	r28, 0x29	; 41
    40e0:	6f ad       	ldd	r22, Y+63	; 0x3f
    40e2:	a9 97       	sbiw	r28, 0x29	; 41
    40e4:	ab 96       	adiw	r28, 0x2b	; 43
    40e6:	7f ad       	ldd	r23, Y+63	; 0x3f
    40e8:	ab 97       	sbiw	r28, 0x2b	; 43
    40ea:	67 2b       	or	r22, r23
    40ec:	a9 96       	adiw	r28, 0x29	; 41
    40ee:	6f af       	std	Y+63, r22	; 0x3f
    40f0:	a9 97       	sbiw	r28, 0x29	; 41
    40f2:	aa 96       	adiw	r28, 0x2a	; 42
    40f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    40f6:	aa 97       	sbiw	r28, 0x2a	; 42
    40f8:	69 96       	adiw	r28, 0x19	; 25
    40fa:	8f af       	std	Y+63, r24	; 0x3f
    40fc:	69 97       	sbiw	r28, 0x19	; 25
    40fe:	62 96       	adiw	r28, 0x12	; 18
    4100:	9f ad       	ldd	r25, Y+63	; 0x3f
    4102:	62 97       	sbiw	r28, 0x12	; 18
    4104:	2a 96       	adiw	r28, 0x0a	; 10
    4106:	0f ad       	ldd	r16, Y+63	; 0x3f
    4108:	2a 97       	sbiw	r28, 0x0a	; 10
    410a:	90 0f       	add	r25, r16
    410c:	6a 96       	adiw	r28, 0x1a	; 26
    410e:	9f af       	std	Y+63, r25	; 0x3f
    4110:	6a 97       	sbiw	r28, 0x1a	; 26
    4112:	11 e0       	ldi	r17, 0x01	; 1
    4114:	ac 96       	adiw	r28, 0x2c	; 44
    4116:	1f af       	std	Y+63, r17	; 0x3f
    4118:	ac 97       	sbiw	r28, 0x2c	; 44
    411a:	6a 96       	adiw	r28, 0x1a	; 26
    411c:	2f ad       	ldd	r18, Y+63	; 0x3f
    411e:	6a 97       	sbiw	r28, 0x1a	; 26
    4120:	62 96       	adiw	r28, 0x12	; 18
    4122:	3f ad       	ldd	r19, Y+63	; 0x3f
    4124:	62 97       	sbiw	r28, 0x12	; 18
    4126:	23 17       	cp	r18, r19
    4128:	18 f0       	brcs	.+6      	; 0x4130 <MTMR_u8Timer0NormalModeTimeMapping+0x4aa>
    412a:	ac 96       	adiw	r28, 0x2c	; 44
    412c:	1f ae       	std	Y+63, r1	; 0x3f
    412e:	ac 97       	sbiw	r28, 0x2c	; 44
    4130:	a9 96       	adiw	r28, 0x29	; 41
    4132:	4f ad       	ldd	r20, Y+63	; 0x3f
    4134:	a9 97       	sbiw	r28, 0x29	; 41
    4136:	6a 96       	adiw	r28, 0x1a	; 26
    4138:	5f ad       	ldd	r21, Y+63	; 0x3f
    413a:	6a 97       	sbiw	r28, 0x1a	; 26
    413c:	45 0f       	add	r20, r21
    413e:	ad 96       	adiw	r28, 0x2d	; 45
    4140:	4f af       	std	Y+63, r20	; 0x3f
    4142:	ad 97       	sbiw	r28, 0x2d	; 45
    4144:	61 e0       	ldi	r22, 0x01	; 1
    4146:	ae 96       	adiw	r28, 0x2e	; 46
    4148:	6f af       	std	Y+63, r22	; 0x3f
    414a:	ae 97       	sbiw	r28, 0x2e	; 46
    414c:	ad 96       	adiw	r28, 0x2d	; 45
    414e:	7f ad       	ldd	r23, Y+63	; 0x3f
    4150:	ad 97       	sbiw	r28, 0x2d	; 45
    4152:	6a 96       	adiw	r28, 0x1a	; 26
    4154:	8f ad       	ldd	r24, Y+63	; 0x3f
    4156:	6a 97       	sbiw	r28, 0x1a	; 26
    4158:	78 17       	cp	r23, r24
    415a:	18 f0       	brcs	.+6      	; 0x4162 <MTMR_u8Timer0NormalModeTimeMapping+0x4dc>
    415c:	ae 96       	adiw	r28, 0x2e	; 46
    415e:	1f ae       	std	Y+63, r1	; 0x3f
    4160:	ae 97       	sbiw	r28, 0x2e	; 46
    4162:	ac 96       	adiw	r28, 0x2c	; 44
    4164:	9f ad       	ldd	r25, Y+63	; 0x3f
    4166:	ac 97       	sbiw	r28, 0x2c	; 44
    4168:	ae 96       	adiw	r28, 0x2e	; 46
    416a:	0f ad       	ldd	r16, Y+63	; 0x3f
    416c:	ae 97       	sbiw	r28, 0x2e	; 46
    416e:	90 2b       	or	r25, r16
    4170:	ac 96       	adiw	r28, 0x2c	; 44
    4172:	9f af       	std	Y+63, r25	; 0x3f
    4174:	ac 97       	sbiw	r28, 0x2c	; 44
    4176:	ad 96       	adiw	r28, 0x2d	; 45
    4178:	1f ad       	ldd	r17, Y+63	; 0x3f
    417a:	ad 97       	sbiw	r28, 0x2d	; 45
    417c:	6a 96       	adiw	r28, 0x1a	; 26
    417e:	1f af       	std	Y+63, r17	; 0x3f
    4180:	6a 97       	sbiw	r28, 0x1a	; 26
    4182:	63 96       	adiw	r28, 0x13	; 19
    4184:	2f ad       	ldd	r18, Y+63	; 0x3f
    4186:	63 97       	sbiw	r28, 0x13	; 19
    4188:	2b 96       	adiw	r28, 0x0b	; 11
    418a:	3f ad       	ldd	r19, Y+63	; 0x3f
    418c:	2b 97       	sbiw	r28, 0x0b	; 11
    418e:	23 0f       	add	r18, r19
    4190:	6b 96       	adiw	r28, 0x1b	; 27
    4192:	2f af       	std	Y+63, r18	; 0x3f
    4194:	6b 97       	sbiw	r28, 0x1b	; 27
    4196:	ac 96       	adiw	r28, 0x2c	; 44
    4198:	8f ad       	ldd	r24, Y+63	; 0x3f
    419a:	ac 97       	sbiw	r28, 0x2c	; 44
    419c:	6b 96       	adiw	r28, 0x1b	; 27
    419e:	4f ad       	ldd	r20, Y+63	; 0x3f
    41a0:	6b 97       	sbiw	r28, 0x1b	; 27
    41a2:	84 0f       	add	r24, r20
    41a4:	6b 96       	adiw	r28, 0x1b	; 27
    41a6:	8f af       	std	Y+63, r24	; 0x3f
    41a8:	6b 97       	sbiw	r28, 0x1b	; 27
    41aa:	64 96       	adiw	r28, 0x14	; 20
    41ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    41ae:	64 97       	sbiw	r28, 0x14	; 20
    41b0:	59 83       	std	Y+1, r21	; 0x01
    41b2:	65 96       	adiw	r28, 0x15	; 21
    41b4:	6f ad       	ldd	r22, Y+63	; 0x3f
    41b6:	65 97       	sbiw	r28, 0x15	; 21
    41b8:	6a 83       	std	Y+2, r22	; 0x02
    41ba:	66 96       	adiw	r28, 0x16	; 22
    41bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    41be:	66 97       	sbiw	r28, 0x16	; 22
    41c0:	7b 83       	std	Y+3, r23	; 0x03
    41c2:	67 96       	adiw	r28, 0x17	; 23
    41c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    41c6:	67 97       	sbiw	r28, 0x17	; 23
    41c8:	8c 83       	std	Y+4, r24	; 0x04
    41ca:	68 96       	adiw	r28, 0x18	; 24
    41cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    41ce:	68 97       	sbiw	r28, 0x18	; 24
    41d0:	9d 83       	std	Y+5, r25	; 0x05
    41d2:	69 96       	adiw	r28, 0x19	; 25
    41d4:	0f ad       	ldd	r16, Y+63	; 0x3f
    41d6:	69 97       	sbiw	r28, 0x19	; 25
    41d8:	0e 83       	std	Y+6, r16	; 0x06
    41da:	6a 96       	adiw	r28, 0x1a	; 26
    41dc:	1f ad       	ldd	r17, Y+63	; 0x3f
    41de:	6a 97       	sbiw	r28, 0x1a	; 26
    41e0:	1f 83       	std	Y+7, r17	; 0x07
    41e2:	6b 96       	adiw	r28, 0x1b	; 27
    41e4:	2f ad       	ldd	r18, Y+63	; 0x3f
    41e6:	6b 97       	sbiw	r28, 0x1b	; 27
    41e8:	28 87       	std	Y+8, r18	; 0x08
	  desiredTime+=(seconds*1000000UL);
    41ea:	8d a1       	ldd	r24, Y+37	; 0x25
    41ec:	9e a1       	ldd	r25, Y+38	; 0x26
    41ee:	cc 01       	movw	r24, r24
    41f0:	a0 e0       	ldi	r26, 0x00	; 0
    41f2:	b0 e0       	ldi	r27, 0x00	; 0
    41f4:	20 e4       	ldi	r18, 0x40	; 64
    41f6:	32 e4       	ldi	r19, 0x42	; 66
    41f8:	4f e0       	ldi	r20, 0x0F	; 15
    41fa:	50 e0       	ldi	r21, 0x00	; 0
    41fc:	bc 01       	movw	r22, r24
    41fe:	cd 01       	movw	r24, r26
    4200:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__mulsi3>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	8c 01       	movw	r16, r24
    420a:	9d 01       	movw	r18, r26
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	50 e0       	ldi	r21, 0x00	; 0
    4210:	60 e0       	ldi	r22, 0x00	; 0
    4212:	70 e0       	ldi	r23, 0x00	; 0
    4214:	0b af       	std	Y+59, r16	; 0x3b
    4216:	1c af       	std	Y+60, r17	; 0x3c
    4218:	2d af       	std	Y+61, r18	; 0x3d
    421a:	3e af       	std	Y+62, r19	; 0x3e
    421c:	4f af       	std	Y+63, r20	; 0x3f
    421e:	21 96       	adiw	r28, 0x01	; 1
    4220:	5f af       	std	Y+63, r21	; 0x3f
    4222:	21 97       	sbiw	r28, 0x01	; 1
    4224:	22 96       	adiw	r28, 0x02	; 2
    4226:	6f af       	std	Y+63, r22	; 0x3f
    4228:	22 97       	sbiw	r28, 0x02	; 2
    422a:	23 96       	adiw	r28, 0x03	; 3
    422c:	7f af       	std	Y+63, r23	; 0x3f
    422e:	23 97       	sbiw	r28, 0x03	; 3
    4230:	19 81       	ldd	r17, Y+1	; 0x01
    4232:	af 96       	adiw	r28, 0x2f	; 47
    4234:	1f af       	std	Y+63, r17	; 0x3f
    4236:	af 97       	sbiw	r28, 0x2f	; 47
    4238:	2a 81       	ldd	r18, Y+2	; 0x02
    423a:	e0 96       	adiw	r28, 0x30	; 48
    423c:	2f af       	std	Y+63, r18	; 0x3f
    423e:	e0 97       	sbiw	r28, 0x30	; 48
    4240:	3b 81       	ldd	r19, Y+3	; 0x03
    4242:	e1 96       	adiw	r28, 0x31	; 49
    4244:	3f af       	std	Y+63, r19	; 0x3f
    4246:	e1 97       	sbiw	r28, 0x31	; 49
    4248:	4c 81       	ldd	r20, Y+4	; 0x04
    424a:	e2 96       	adiw	r28, 0x32	; 50
    424c:	4f af       	std	Y+63, r20	; 0x3f
    424e:	e2 97       	sbiw	r28, 0x32	; 50
    4250:	5d 81       	ldd	r21, Y+5	; 0x05
    4252:	e3 96       	adiw	r28, 0x33	; 51
    4254:	5f af       	std	Y+63, r21	; 0x3f
    4256:	e3 97       	sbiw	r28, 0x33	; 51
    4258:	6e 81       	ldd	r22, Y+6	; 0x06
    425a:	e4 96       	adiw	r28, 0x34	; 52
    425c:	6f af       	std	Y+63, r22	; 0x3f
    425e:	e4 97       	sbiw	r28, 0x34	; 52
    4260:	7f 81       	ldd	r23, Y+7	; 0x07
    4262:	e5 96       	adiw	r28, 0x35	; 53
    4264:	7f af       	std	Y+63, r23	; 0x3f
    4266:	e5 97       	sbiw	r28, 0x35	; 53
    4268:	88 85       	ldd	r24, Y+8	; 0x08
    426a:	e6 96       	adiw	r28, 0x36	; 54
    426c:	8f af       	std	Y+63, r24	; 0x3f
    426e:	e6 97       	sbiw	r28, 0x36	; 54
    4270:	af 96       	adiw	r28, 0x2f	; 47
    4272:	9f ad       	ldd	r25, Y+63	; 0x3f
    4274:	af 97       	sbiw	r28, 0x2f	; 47
    4276:	0b ad       	ldd	r16, Y+59	; 0x3b
    4278:	90 0f       	add	r25, r16
    427a:	e7 96       	adiw	r28, 0x37	; 55
    427c:	9f af       	std	Y+63, r25	; 0x3f
    427e:	e7 97       	sbiw	r28, 0x37	; 55
    4280:	11 e0       	ldi	r17, 0x01	; 1
    4282:	ef 96       	adiw	r28, 0x3f	; 63
    4284:	1f af       	std	Y+63, r17	; 0x3f
    4286:	ef 97       	sbiw	r28, 0x3f	; 63
    4288:	e7 96       	adiw	r28, 0x37	; 55
    428a:	2f ad       	ldd	r18, Y+63	; 0x3f
    428c:	e7 97       	sbiw	r28, 0x37	; 55
    428e:	af 96       	adiw	r28, 0x2f	; 47
    4290:	3f ad       	ldd	r19, Y+63	; 0x3f
    4292:	af 97       	sbiw	r28, 0x2f	; 47
    4294:	23 17       	cp	r18, r19
    4296:	18 f0       	brcs	.+6      	; 0x429e <MTMR_u8Timer0NormalModeTimeMapping+0x618>
    4298:	ef 96       	adiw	r28, 0x3f	; 63
    429a:	1f ae       	std	Y+63, r1	; 0x3f
    429c:	ef 97       	sbiw	r28, 0x3f	; 63
    429e:	e0 96       	adiw	r28, 0x30	; 48
    42a0:	4f ad       	ldd	r20, Y+63	; 0x3f
    42a2:	e0 97       	sbiw	r28, 0x30	; 48
    42a4:	5c ad       	ldd	r21, Y+60	; 0x3c
    42a6:	45 0f       	add	r20, r21
    42a8:	e8 96       	adiw	r28, 0x38	; 56
    42aa:	4f af       	std	Y+63, r20	; 0x3f
    42ac:	e8 97       	sbiw	r28, 0x38	; 56
    42ae:	61 e0       	ldi	r22, 0x01	; 1
    42b0:	c1 58       	subi	r28, 0x81	; 129
    42b2:	df 4f       	sbci	r29, 0xFF	; 255
    42b4:	68 83       	st	Y, r22
    42b6:	cf 57       	subi	r28, 0x7F	; 127
    42b8:	d0 40       	sbci	r29, 0x00	; 0
    42ba:	e8 96       	adiw	r28, 0x38	; 56
    42bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    42be:	e8 97       	sbiw	r28, 0x38	; 56
    42c0:	e0 96       	adiw	r28, 0x30	; 48
    42c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    42c4:	e0 97       	sbiw	r28, 0x30	; 48
    42c6:	78 17       	cp	r23, r24
    42c8:	28 f0       	brcs	.+10     	; 0x42d4 <MTMR_u8Timer0NormalModeTimeMapping+0x64e>
    42ca:	c1 58       	subi	r28, 0x81	; 129
    42cc:	df 4f       	sbci	r29, 0xFF	; 255
    42ce:	18 82       	st	Y, r1
    42d0:	cf 57       	subi	r28, 0x7F	; 127
    42d2:	d0 40       	sbci	r29, 0x00	; 0
    42d4:	ef 96       	adiw	r28, 0x3f	; 63
    42d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    42d8:	ef 97       	sbiw	r28, 0x3f	; 63
    42da:	e8 96       	adiw	r28, 0x38	; 56
    42dc:	0f ad       	ldd	r16, Y+63	; 0x3f
    42de:	e8 97       	sbiw	r28, 0x38	; 56
    42e0:	90 0f       	add	r25, r16
    42e2:	c0 58       	subi	r28, 0x80	; 128
    42e4:	df 4f       	sbci	r29, 0xFF	; 255
    42e6:	98 83       	st	Y, r25
    42e8:	c0 58       	subi	r28, 0x80	; 128
    42ea:	d0 40       	sbci	r29, 0x00	; 0
    42ec:	11 e0       	ldi	r17, 0x01	; 1
    42ee:	cf 57       	subi	r28, 0x7F	; 127
    42f0:	df 4f       	sbci	r29, 0xFF	; 255
    42f2:	18 83       	st	Y, r17
    42f4:	c1 58       	subi	r28, 0x81	; 129
    42f6:	d0 40       	sbci	r29, 0x00	; 0
    42f8:	c0 58       	subi	r28, 0x80	; 128
    42fa:	df 4f       	sbci	r29, 0xFF	; 255
    42fc:	28 81       	ld	r18, Y
    42fe:	c0 58       	subi	r28, 0x80	; 128
    4300:	d0 40       	sbci	r29, 0x00	; 0
    4302:	e8 96       	adiw	r28, 0x38	; 56
    4304:	3f ad       	ldd	r19, Y+63	; 0x3f
    4306:	e8 97       	sbiw	r28, 0x38	; 56
    4308:	23 17       	cp	r18, r19
    430a:	28 f0       	brcs	.+10     	; 0x4316 <MTMR_u8Timer0NormalModeTimeMapping+0x690>
    430c:	cf 57       	subi	r28, 0x7F	; 127
    430e:	df 4f       	sbci	r29, 0xFF	; 255
    4310:	18 82       	st	Y, r1
    4312:	c1 58       	subi	r28, 0x81	; 129
    4314:	d0 40       	sbci	r29, 0x00	; 0
    4316:	c1 58       	subi	r28, 0x81	; 129
    4318:	df 4f       	sbci	r29, 0xFF	; 255
    431a:	48 81       	ld	r20, Y
    431c:	cf 57       	subi	r28, 0x7F	; 127
    431e:	d0 40       	sbci	r29, 0x00	; 0
    4320:	cf 57       	subi	r28, 0x7F	; 127
    4322:	df 4f       	sbci	r29, 0xFF	; 255
    4324:	58 81       	ld	r21, Y
    4326:	c1 58       	subi	r28, 0x81	; 129
    4328:	d0 40       	sbci	r29, 0x00	; 0
    432a:	45 2b       	or	r20, r21
    432c:	c1 58       	subi	r28, 0x81	; 129
    432e:	df 4f       	sbci	r29, 0xFF	; 255
    4330:	48 83       	st	Y, r20
    4332:	cf 57       	subi	r28, 0x7F	; 127
    4334:	d0 40       	sbci	r29, 0x00	; 0
    4336:	c0 58       	subi	r28, 0x80	; 128
    4338:	df 4f       	sbci	r29, 0xFF	; 255
    433a:	68 81       	ld	r22, Y
    433c:	c0 58       	subi	r28, 0x80	; 128
    433e:	d0 40       	sbci	r29, 0x00	; 0
    4340:	e8 96       	adiw	r28, 0x38	; 56
    4342:	6f af       	std	Y+63, r22	; 0x3f
    4344:	e8 97       	sbiw	r28, 0x38	; 56
    4346:	e1 96       	adiw	r28, 0x31	; 49
    4348:	7f ad       	ldd	r23, Y+63	; 0x3f
    434a:	e1 97       	sbiw	r28, 0x31	; 49
    434c:	8d ad       	ldd	r24, Y+61	; 0x3d
    434e:	78 0f       	add	r23, r24
    4350:	e9 96       	adiw	r28, 0x39	; 57
    4352:	7f af       	std	Y+63, r23	; 0x3f
    4354:	e9 97       	sbiw	r28, 0x39	; 57
    4356:	91 e0       	ldi	r25, 0x01	; 1
    4358:	ce 57       	subi	r28, 0x7E	; 126
    435a:	df 4f       	sbci	r29, 0xFF	; 255
    435c:	98 83       	st	Y, r25
    435e:	c2 58       	subi	r28, 0x82	; 130
    4360:	d0 40       	sbci	r29, 0x00	; 0
    4362:	e9 96       	adiw	r28, 0x39	; 57
    4364:	0f ad       	ldd	r16, Y+63	; 0x3f
    4366:	e9 97       	sbiw	r28, 0x39	; 57
    4368:	e1 96       	adiw	r28, 0x31	; 49
    436a:	1f ad       	ldd	r17, Y+63	; 0x3f
    436c:	e1 97       	sbiw	r28, 0x31	; 49
    436e:	01 17       	cp	r16, r17
    4370:	28 f0       	brcs	.+10     	; 0x437c <MTMR_u8Timer0NormalModeTimeMapping+0x6f6>
    4372:	ce 57       	subi	r28, 0x7E	; 126
    4374:	df 4f       	sbci	r29, 0xFF	; 255
    4376:	18 82       	st	Y, r1
    4378:	c2 58       	subi	r28, 0x82	; 130
    437a:	d0 40       	sbci	r29, 0x00	; 0
    437c:	c1 58       	subi	r28, 0x81	; 129
    437e:	df 4f       	sbci	r29, 0xFF	; 255
    4380:	28 81       	ld	r18, Y
    4382:	cf 57       	subi	r28, 0x7F	; 127
    4384:	d0 40       	sbci	r29, 0x00	; 0
    4386:	e9 96       	adiw	r28, 0x39	; 57
    4388:	3f ad       	ldd	r19, Y+63	; 0x3f
    438a:	e9 97       	sbiw	r28, 0x39	; 57
    438c:	23 0f       	add	r18, r19
    438e:	cd 57       	subi	r28, 0x7D	; 125
    4390:	df 4f       	sbci	r29, 0xFF	; 255
    4392:	28 83       	st	Y, r18
    4394:	c3 58       	subi	r28, 0x83	; 131
    4396:	d0 40       	sbci	r29, 0x00	; 0
    4398:	41 e0       	ldi	r20, 0x01	; 1
    439a:	cc 57       	subi	r28, 0x7C	; 124
    439c:	df 4f       	sbci	r29, 0xFF	; 255
    439e:	48 83       	st	Y, r20
    43a0:	c4 58       	subi	r28, 0x84	; 132
    43a2:	d0 40       	sbci	r29, 0x00	; 0
    43a4:	cd 57       	subi	r28, 0x7D	; 125
    43a6:	df 4f       	sbci	r29, 0xFF	; 255
    43a8:	58 81       	ld	r21, Y
    43aa:	c3 58       	subi	r28, 0x83	; 131
    43ac:	d0 40       	sbci	r29, 0x00	; 0
    43ae:	e9 96       	adiw	r28, 0x39	; 57
    43b0:	6f ad       	ldd	r22, Y+63	; 0x3f
    43b2:	e9 97       	sbiw	r28, 0x39	; 57
    43b4:	56 17       	cp	r21, r22
    43b6:	28 f0       	brcs	.+10     	; 0x43c2 <MTMR_u8Timer0NormalModeTimeMapping+0x73c>
    43b8:	cc 57       	subi	r28, 0x7C	; 124
    43ba:	df 4f       	sbci	r29, 0xFF	; 255
    43bc:	18 82       	st	Y, r1
    43be:	c4 58       	subi	r28, 0x84	; 132
    43c0:	d0 40       	sbci	r29, 0x00	; 0
    43c2:	ce 57       	subi	r28, 0x7E	; 126
    43c4:	df 4f       	sbci	r29, 0xFF	; 255
    43c6:	78 81       	ld	r23, Y
    43c8:	c2 58       	subi	r28, 0x82	; 130
    43ca:	d0 40       	sbci	r29, 0x00	; 0
    43cc:	cc 57       	subi	r28, 0x7C	; 124
    43ce:	df 4f       	sbci	r29, 0xFF	; 255
    43d0:	88 81       	ld	r24, Y
    43d2:	c4 58       	subi	r28, 0x84	; 132
    43d4:	d0 40       	sbci	r29, 0x00	; 0
    43d6:	78 2b       	or	r23, r24
    43d8:	ce 57       	subi	r28, 0x7E	; 126
    43da:	df 4f       	sbci	r29, 0xFF	; 255
    43dc:	78 83       	st	Y, r23
    43de:	c2 58       	subi	r28, 0x82	; 130
    43e0:	d0 40       	sbci	r29, 0x00	; 0
    43e2:	cd 57       	subi	r28, 0x7D	; 125
    43e4:	df 4f       	sbci	r29, 0xFF	; 255
    43e6:	98 81       	ld	r25, Y
    43e8:	c3 58       	subi	r28, 0x83	; 131
    43ea:	d0 40       	sbci	r29, 0x00	; 0
    43ec:	e9 96       	adiw	r28, 0x39	; 57
    43ee:	9f af       	std	Y+63, r25	; 0x3f
    43f0:	e9 97       	sbiw	r28, 0x39	; 57
    43f2:	e2 96       	adiw	r28, 0x32	; 50
    43f4:	0f ad       	ldd	r16, Y+63	; 0x3f
    43f6:	e2 97       	sbiw	r28, 0x32	; 50
    43f8:	1e ad       	ldd	r17, Y+62	; 0x3e
    43fa:	01 0f       	add	r16, r17
    43fc:	ea 96       	adiw	r28, 0x3a	; 58
    43fe:	0f af       	std	Y+63, r16	; 0x3f
    4400:	ea 97       	sbiw	r28, 0x3a	; 58
    4402:	21 e0       	ldi	r18, 0x01	; 1
    4404:	cb 57       	subi	r28, 0x7B	; 123
    4406:	df 4f       	sbci	r29, 0xFF	; 255
    4408:	28 83       	st	Y, r18
    440a:	c5 58       	subi	r28, 0x85	; 133
    440c:	d0 40       	sbci	r29, 0x00	; 0
    440e:	ea 96       	adiw	r28, 0x3a	; 58
    4410:	3f ad       	ldd	r19, Y+63	; 0x3f
    4412:	ea 97       	sbiw	r28, 0x3a	; 58
    4414:	e2 96       	adiw	r28, 0x32	; 50
    4416:	4f ad       	ldd	r20, Y+63	; 0x3f
    4418:	e2 97       	sbiw	r28, 0x32	; 50
    441a:	34 17       	cp	r19, r20
    441c:	28 f0       	brcs	.+10     	; 0x4428 <MTMR_u8Timer0NormalModeTimeMapping+0x7a2>
    441e:	cb 57       	subi	r28, 0x7B	; 123
    4420:	df 4f       	sbci	r29, 0xFF	; 255
    4422:	18 82       	st	Y, r1
    4424:	c5 58       	subi	r28, 0x85	; 133
    4426:	d0 40       	sbci	r29, 0x00	; 0
    4428:	ce 57       	subi	r28, 0x7E	; 126
    442a:	df 4f       	sbci	r29, 0xFF	; 255
    442c:	58 81       	ld	r21, Y
    442e:	c2 58       	subi	r28, 0x82	; 130
    4430:	d0 40       	sbci	r29, 0x00	; 0
    4432:	ea 96       	adiw	r28, 0x3a	; 58
    4434:	6f ad       	ldd	r22, Y+63	; 0x3f
    4436:	ea 97       	sbiw	r28, 0x3a	; 58
    4438:	56 0f       	add	r21, r22
    443a:	ca 57       	subi	r28, 0x7A	; 122
    443c:	df 4f       	sbci	r29, 0xFF	; 255
    443e:	58 83       	st	Y, r21
    4440:	c6 58       	subi	r28, 0x86	; 134
    4442:	d0 40       	sbci	r29, 0x00	; 0
    4444:	71 e0       	ldi	r23, 0x01	; 1
    4446:	c9 57       	subi	r28, 0x79	; 121
    4448:	df 4f       	sbci	r29, 0xFF	; 255
    444a:	78 83       	st	Y, r23
    444c:	c7 58       	subi	r28, 0x87	; 135
    444e:	d0 40       	sbci	r29, 0x00	; 0
    4450:	ca 57       	subi	r28, 0x7A	; 122
    4452:	df 4f       	sbci	r29, 0xFF	; 255
    4454:	88 81       	ld	r24, Y
    4456:	c6 58       	subi	r28, 0x86	; 134
    4458:	d0 40       	sbci	r29, 0x00	; 0
    445a:	ea 96       	adiw	r28, 0x3a	; 58
    445c:	9f ad       	ldd	r25, Y+63	; 0x3f
    445e:	ea 97       	sbiw	r28, 0x3a	; 58
    4460:	89 17       	cp	r24, r25
    4462:	28 f0       	brcs	.+10     	; 0x446e <MTMR_u8Timer0NormalModeTimeMapping+0x7e8>
    4464:	c9 57       	subi	r28, 0x79	; 121
    4466:	df 4f       	sbci	r29, 0xFF	; 255
    4468:	18 82       	st	Y, r1
    446a:	c7 58       	subi	r28, 0x87	; 135
    446c:	d0 40       	sbci	r29, 0x00	; 0
    446e:	cb 57       	subi	r28, 0x7B	; 123
    4470:	df 4f       	sbci	r29, 0xFF	; 255
    4472:	08 81       	ld	r16, Y
    4474:	c5 58       	subi	r28, 0x85	; 133
    4476:	d0 40       	sbci	r29, 0x00	; 0
    4478:	c9 57       	subi	r28, 0x79	; 121
    447a:	df 4f       	sbci	r29, 0xFF	; 255
    447c:	18 81       	ld	r17, Y
    447e:	c7 58       	subi	r28, 0x87	; 135
    4480:	d0 40       	sbci	r29, 0x00	; 0
    4482:	01 2b       	or	r16, r17
    4484:	cb 57       	subi	r28, 0x7B	; 123
    4486:	df 4f       	sbci	r29, 0xFF	; 255
    4488:	08 83       	st	Y, r16
    448a:	c5 58       	subi	r28, 0x85	; 133
    448c:	d0 40       	sbci	r29, 0x00	; 0
    448e:	ca 57       	subi	r28, 0x7A	; 122
    4490:	df 4f       	sbci	r29, 0xFF	; 255
    4492:	28 81       	ld	r18, Y
    4494:	c6 58       	subi	r28, 0x86	; 134
    4496:	d0 40       	sbci	r29, 0x00	; 0
    4498:	ea 96       	adiw	r28, 0x3a	; 58
    449a:	2f af       	std	Y+63, r18	; 0x3f
    449c:	ea 97       	sbiw	r28, 0x3a	; 58
    449e:	e3 96       	adiw	r28, 0x33	; 51
    44a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    44a2:	e3 97       	sbiw	r28, 0x33	; 51
    44a4:	4f ad       	ldd	r20, Y+63	; 0x3f
    44a6:	34 0f       	add	r19, r20
    44a8:	eb 96       	adiw	r28, 0x3b	; 59
    44aa:	3f af       	std	Y+63, r19	; 0x3f
    44ac:	eb 97       	sbiw	r28, 0x3b	; 59
    44ae:	51 e0       	ldi	r21, 0x01	; 1
    44b0:	c8 57       	subi	r28, 0x78	; 120
    44b2:	df 4f       	sbci	r29, 0xFF	; 255
    44b4:	58 83       	st	Y, r21
    44b6:	c8 58       	subi	r28, 0x88	; 136
    44b8:	d0 40       	sbci	r29, 0x00	; 0
    44ba:	eb 96       	adiw	r28, 0x3b	; 59
    44bc:	6f ad       	ldd	r22, Y+63	; 0x3f
    44be:	eb 97       	sbiw	r28, 0x3b	; 59
    44c0:	e3 96       	adiw	r28, 0x33	; 51
    44c2:	7f ad       	ldd	r23, Y+63	; 0x3f
    44c4:	e3 97       	sbiw	r28, 0x33	; 51
    44c6:	67 17       	cp	r22, r23
    44c8:	28 f0       	brcs	.+10     	; 0x44d4 <MTMR_u8Timer0NormalModeTimeMapping+0x84e>
    44ca:	c8 57       	subi	r28, 0x78	; 120
    44cc:	df 4f       	sbci	r29, 0xFF	; 255
    44ce:	18 82       	st	Y, r1
    44d0:	c8 58       	subi	r28, 0x88	; 136
    44d2:	d0 40       	sbci	r29, 0x00	; 0
    44d4:	cb 57       	subi	r28, 0x7B	; 123
    44d6:	df 4f       	sbci	r29, 0xFF	; 255
    44d8:	88 81       	ld	r24, Y
    44da:	c5 58       	subi	r28, 0x85	; 133
    44dc:	d0 40       	sbci	r29, 0x00	; 0
    44de:	eb 96       	adiw	r28, 0x3b	; 59
    44e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    44e2:	eb 97       	sbiw	r28, 0x3b	; 59
    44e4:	89 0f       	add	r24, r25
    44e6:	c7 57       	subi	r28, 0x77	; 119
    44e8:	df 4f       	sbci	r29, 0xFF	; 255
    44ea:	88 83       	st	Y, r24
    44ec:	c9 58       	subi	r28, 0x89	; 137
    44ee:	d0 40       	sbci	r29, 0x00	; 0
    44f0:	01 e0       	ldi	r16, 0x01	; 1
    44f2:	c6 57       	subi	r28, 0x76	; 118
    44f4:	df 4f       	sbci	r29, 0xFF	; 255
    44f6:	08 83       	st	Y, r16
    44f8:	ca 58       	subi	r28, 0x8A	; 138
    44fa:	d0 40       	sbci	r29, 0x00	; 0
    44fc:	c7 57       	subi	r28, 0x77	; 119
    44fe:	df 4f       	sbci	r29, 0xFF	; 255
    4500:	18 81       	ld	r17, Y
    4502:	c9 58       	subi	r28, 0x89	; 137
    4504:	d0 40       	sbci	r29, 0x00	; 0
    4506:	eb 96       	adiw	r28, 0x3b	; 59
    4508:	2f ad       	ldd	r18, Y+63	; 0x3f
    450a:	eb 97       	sbiw	r28, 0x3b	; 59
    450c:	12 17       	cp	r17, r18
    450e:	28 f0       	brcs	.+10     	; 0x451a <MTMR_u8Timer0NormalModeTimeMapping+0x894>
    4510:	c6 57       	subi	r28, 0x76	; 118
    4512:	df 4f       	sbci	r29, 0xFF	; 255
    4514:	18 82       	st	Y, r1
    4516:	ca 58       	subi	r28, 0x8A	; 138
    4518:	d0 40       	sbci	r29, 0x00	; 0
    451a:	c8 57       	subi	r28, 0x78	; 120
    451c:	df 4f       	sbci	r29, 0xFF	; 255
    451e:	38 81       	ld	r19, Y
    4520:	c8 58       	subi	r28, 0x88	; 136
    4522:	d0 40       	sbci	r29, 0x00	; 0
    4524:	c6 57       	subi	r28, 0x76	; 118
    4526:	df 4f       	sbci	r29, 0xFF	; 255
    4528:	48 81       	ld	r20, Y
    452a:	ca 58       	subi	r28, 0x8A	; 138
    452c:	d0 40       	sbci	r29, 0x00	; 0
    452e:	34 2b       	or	r19, r20
    4530:	c8 57       	subi	r28, 0x78	; 120
    4532:	df 4f       	sbci	r29, 0xFF	; 255
    4534:	38 83       	st	Y, r19
    4536:	c8 58       	subi	r28, 0x88	; 136
    4538:	d0 40       	sbci	r29, 0x00	; 0
    453a:	c7 57       	subi	r28, 0x77	; 119
    453c:	df 4f       	sbci	r29, 0xFF	; 255
    453e:	58 81       	ld	r21, Y
    4540:	c9 58       	subi	r28, 0x89	; 137
    4542:	d0 40       	sbci	r29, 0x00	; 0
    4544:	eb 96       	adiw	r28, 0x3b	; 59
    4546:	5f af       	std	Y+63, r21	; 0x3f
    4548:	eb 97       	sbiw	r28, 0x3b	; 59
    454a:	e4 96       	adiw	r28, 0x34	; 52
    454c:	6f ad       	ldd	r22, Y+63	; 0x3f
    454e:	e4 97       	sbiw	r28, 0x34	; 52
    4550:	21 96       	adiw	r28, 0x01	; 1
    4552:	7f ad       	ldd	r23, Y+63	; 0x3f
    4554:	21 97       	sbiw	r28, 0x01	; 1
    4556:	67 0f       	add	r22, r23
    4558:	ec 96       	adiw	r28, 0x3c	; 60
    455a:	6f af       	std	Y+63, r22	; 0x3f
    455c:	ec 97       	sbiw	r28, 0x3c	; 60
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	c5 57       	subi	r28, 0x75	; 117
    4562:	df 4f       	sbci	r29, 0xFF	; 255
    4564:	88 83       	st	Y, r24
    4566:	cb 58       	subi	r28, 0x8B	; 139
    4568:	d0 40       	sbci	r29, 0x00	; 0
    456a:	ec 96       	adiw	r28, 0x3c	; 60
    456c:	9f ad       	ldd	r25, Y+63	; 0x3f
    456e:	ec 97       	sbiw	r28, 0x3c	; 60
    4570:	e4 96       	adiw	r28, 0x34	; 52
    4572:	0f ad       	ldd	r16, Y+63	; 0x3f
    4574:	e4 97       	sbiw	r28, 0x34	; 52
    4576:	90 17       	cp	r25, r16
    4578:	28 f0       	brcs	.+10     	; 0x4584 <MTMR_u8Timer0NormalModeTimeMapping+0x8fe>
    457a:	c5 57       	subi	r28, 0x75	; 117
    457c:	df 4f       	sbci	r29, 0xFF	; 255
    457e:	18 82       	st	Y, r1
    4580:	cb 58       	subi	r28, 0x8B	; 139
    4582:	d0 40       	sbci	r29, 0x00	; 0
    4584:	c8 57       	subi	r28, 0x78	; 120
    4586:	df 4f       	sbci	r29, 0xFF	; 255
    4588:	18 81       	ld	r17, Y
    458a:	c8 58       	subi	r28, 0x88	; 136
    458c:	d0 40       	sbci	r29, 0x00	; 0
    458e:	ec 96       	adiw	r28, 0x3c	; 60
    4590:	2f ad       	ldd	r18, Y+63	; 0x3f
    4592:	ec 97       	sbiw	r28, 0x3c	; 60
    4594:	12 0f       	add	r17, r18
    4596:	c4 57       	subi	r28, 0x74	; 116
    4598:	df 4f       	sbci	r29, 0xFF	; 255
    459a:	18 83       	st	Y, r17
    459c:	cc 58       	subi	r28, 0x8C	; 140
    459e:	d0 40       	sbci	r29, 0x00	; 0
    45a0:	31 e0       	ldi	r19, 0x01	; 1
    45a2:	c3 57       	subi	r28, 0x73	; 115
    45a4:	df 4f       	sbci	r29, 0xFF	; 255
    45a6:	38 83       	st	Y, r19
    45a8:	cd 58       	subi	r28, 0x8D	; 141
    45aa:	d0 40       	sbci	r29, 0x00	; 0
    45ac:	c4 57       	subi	r28, 0x74	; 116
    45ae:	df 4f       	sbci	r29, 0xFF	; 255
    45b0:	48 81       	ld	r20, Y
    45b2:	cc 58       	subi	r28, 0x8C	; 140
    45b4:	d0 40       	sbci	r29, 0x00	; 0
    45b6:	ec 96       	adiw	r28, 0x3c	; 60
    45b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    45ba:	ec 97       	sbiw	r28, 0x3c	; 60
    45bc:	45 17       	cp	r20, r21
    45be:	28 f0       	brcs	.+10     	; 0x45ca <MTMR_u8Timer0NormalModeTimeMapping+0x944>
    45c0:	c3 57       	subi	r28, 0x73	; 115
    45c2:	df 4f       	sbci	r29, 0xFF	; 255
    45c4:	18 82       	st	Y, r1
    45c6:	cd 58       	subi	r28, 0x8D	; 141
    45c8:	d0 40       	sbci	r29, 0x00	; 0
    45ca:	c5 57       	subi	r28, 0x75	; 117
    45cc:	df 4f       	sbci	r29, 0xFF	; 255
    45ce:	68 81       	ld	r22, Y
    45d0:	cb 58       	subi	r28, 0x8B	; 139
    45d2:	d0 40       	sbci	r29, 0x00	; 0
    45d4:	c3 57       	subi	r28, 0x73	; 115
    45d6:	df 4f       	sbci	r29, 0xFF	; 255
    45d8:	78 81       	ld	r23, Y
    45da:	cd 58       	subi	r28, 0x8D	; 141
    45dc:	d0 40       	sbci	r29, 0x00	; 0
    45de:	67 2b       	or	r22, r23
    45e0:	c5 57       	subi	r28, 0x75	; 117
    45e2:	df 4f       	sbci	r29, 0xFF	; 255
    45e4:	68 83       	st	Y, r22
    45e6:	cb 58       	subi	r28, 0x8B	; 139
    45e8:	d0 40       	sbci	r29, 0x00	; 0
    45ea:	c4 57       	subi	r28, 0x74	; 116
    45ec:	df 4f       	sbci	r29, 0xFF	; 255
    45ee:	88 81       	ld	r24, Y
    45f0:	cc 58       	subi	r28, 0x8C	; 140
    45f2:	d0 40       	sbci	r29, 0x00	; 0
    45f4:	ec 96       	adiw	r28, 0x3c	; 60
    45f6:	8f af       	std	Y+63, r24	; 0x3f
    45f8:	ec 97       	sbiw	r28, 0x3c	; 60
    45fa:	e5 96       	adiw	r28, 0x35	; 53
    45fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    45fe:	e5 97       	sbiw	r28, 0x35	; 53
    4600:	22 96       	adiw	r28, 0x02	; 2
    4602:	0f ad       	ldd	r16, Y+63	; 0x3f
    4604:	22 97       	sbiw	r28, 0x02	; 2
    4606:	90 0f       	add	r25, r16
    4608:	ed 96       	adiw	r28, 0x3d	; 61
    460a:	9f af       	std	Y+63, r25	; 0x3f
    460c:	ed 97       	sbiw	r28, 0x3d	; 61
    460e:	11 e0       	ldi	r17, 0x01	; 1
    4610:	c2 57       	subi	r28, 0x72	; 114
    4612:	df 4f       	sbci	r29, 0xFF	; 255
    4614:	18 83       	st	Y, r17
    4616:	ce 58       	subi	r28, 0x8E	; 142
    4618:	d0 40       	sbci	r29, 0x00	; 0
    461a:	ed 96       	adiw	r28, 0x3d	; 61
    461c:	2f ad       	ldd	r18, Y+63	; 0x3f
    461e:	ed 97       	sbiw	r28, 0x3d	; 61
    4620:	e5 96       	adiw	r28, 0x35	; 53
    4622:	3f ad       	ldd	r19, Y+63	; 0x3f
    4624:	e5 97       	sbiw	r28, 0x35	; 53
    4626:	23 17       	cp	r18, r19
    4628:	28 f0       	brcs	.+10     	; 0x4634 <MTMR_u8Timer0NormalModeTimeMapping+0x9ae>
    462a:	c2 57       	subi	r28, 0x72	; 114
    462c:	df 4f       	sbci	r29, 0xFF	; 255
    462e:	18 82       	st	Y, r1
    4630:	ce 58       	subi	r28, 0x8E	; 142
    4632:	d0 40       	sbci	r29, 0x00	; 0
    4634:	c5 57       	subi	r28, 0x75	; 117
    4636:	df 4f       	sbci	r29, 0xFF	; 255
    4638:	48 81       	ld	r20, Y
    463a:	cb 58       	subi	r28, 0x8B	; 139
    463c:	d0 40       	sbci	r29, 0x00	; 0
    463e:	ed 96       	adiw	r28, 0x3d	; 61
    4640:	5f ad       	ldd	r21, Y+63	; 0x3f
    4642:	ed 97       	sbiw	r28, 0x3d	; 61
    4644:	45 0f       	add	r20, r21
    4646:	c1 57       	subi	r28, 0x71	; 113
    4648:	df 4f       	sbci	r29, 0xFF	; 255
    464a:	48 83       	st	Y, r20
    464c:	cf 58       	subi	r28, 0x8F	; 143
    464e:	d0 40       	sbci	r29, 0x00	; 0
    4650:	61 e0       	ldi	r22, 0x01	; 1
    4652:	c0 57       	subi	r28, 0x70	; 112
    4654:	df 4f       	sbci	r29, 0xFF	; 255
    4656:	68 83       	st	Y, r22
    4658:	c0 59       	subi	r28, 0x90	; 144
    465a:	d0 40       	sbci	r29, 0x00	; 0
    465c:	c1 57       	subi	r28, 0x71	; 113
    465e:	df 4f       	sbci	r29, 0xFF	; 255
    4660:	78 81       	ld	r23, Y
    4662:	cf 58       	subi	r28, 0x8F	; 143
    4664:	d0 40       	sbci	r29, 0x00	; 0
    4666:	ed 96       	adiw	r28, 0x3d	; 61
    4668:	8f ad       	ldd	r24, Y+63	; 0x3f
    466a:	ed 97       	sbiw	r28, 0x3d	; 61
    466c:	78 17       	cp	r23, r24
    466e:	28 f0       	brcs	.+10     	; 0x467a <MTMR_u8Timer0NormalModeTimeMapping+0x9f4>
    4670:	c0 57       	subi	r28, 0x70	; 112
    4672:	df 4f       	sbci	r29, 0xFF	; 255
    4674:	18 82       	st	Y, r1
    4676:	c0 59       	subi	r28, 0x90	; 144
    4678:	d0 40       	sbci	r29, 0x00	; 0
    467a:	c2 57       	subi	r28, 0x72	; 114
    467c:	df 4f       	sbci	r29, 0xFF	; 255
    467e:	98 81       	ld	r25, Y
    4680:	ce 58       	subi	r28, 0x8E	; 142
    4682:	d0 40       	sbci	r29, 0x00	; 0
    4684:	c0 57       	subi	r28, 0x70	; 112
    4686:	df 4f       	sbci	r29, 0xFF	; 255
    4688:	08 81       	ld	r16, Y
    468a:	c0 59       	subi	r28, 0x90	; 144
    468c:	d0 40       	sbci	r29, 0x00	; 0
    468e:	90 2b       	or	r25, r16
    4690:	c2 57       	subi	r28, 0x72	; 114
    4692:	df 4f       	sbci	r29, 0xFF	; 255
    4694:	98 83       	st	Y, r25
    4696:	ce 58       	subi	r28, 0x8E	; 142
    4698:	d0 40       	sbci	r29, 0x00	; 0
    469a:	c1 57       	subi	r28, 0x71	; 113
    469c:	df 4f       	sbci	r29, 0xFF	; 255
    469e:	18 81       	ld	r17, Y
    46a0:	cf 58       	subi	r28, 0x8F	; 143
    46a2:	d0 40       	sbci	r29, 0x00	; 0
    46a4:	ed 96       	adiw	r28, 0x3d	; 61
    46a6:	1f af       	std	Y+63, r17	; 0x3f
    46a8:	ed 97       	sbiw	r28, 0x3d	; 61
    46aa:	e6 96       	adiw	r28, 0x36	; 54
    46ac:	2f ad       	ldd	r18, Y+63	; 0x3f
    46ae:	e6 97       	sbiw	r28, 0x36	; 54
    46b0:	23 96       	adiw	r28, 0x03	; 3
    46b2:	3f ad       	ldd	r19, Y+63	; 0x3f
    46b4:	23 97       	sbiw	r28, 0x03	; 3
    46b6:	23 0f       	add	r18, r19
    46b8:	ee 96       	adiw	r28, 0x3e	; 62
    46ba:	2f af       	std	Y+63, r18	; 0x3f
    46bc:	ee 97       	sbiw	r28, 0x3e	; 62
    46be:	c2 57       	subi	r28, 0x72	; 114
    46c0:	df 4f       	sbci	r29, 0xFF	; 255
    46c2:	88 81       	ld	r24, Y
    46c4:	ce 58       	subi	r28, 0x8E	; 142
    46c6:	d0 40       	sbci	r29, 0x00	; 0
    46c8:	ee 96       	adiw	r28, 0x3e	; 62
    46ca:	4f ad       	ldd	r20, Y+63	; 0x3f
    46cc:	ee 97       	sbiw	r28, 0x3e	; 62
    46ce:	84 0f       	add	r24, r20
    46d0:	ee 96       	adiw	r28, 0x3e	; 62
    46d2:	8f af       	std	Y+63, r24	; 0x3f
    46d4:	ee 97       	sbiw	r28, 0x3e	; 62
    46d6:	e7 96       	adiw	r28, 0x37	; 55
    46d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    46da:	e7 97       	sbiw	r28, 0x37	; 55
    46dc:	59 83       	std	Y+1, r21	; 0x01
    46de:	e8 96       	adiw	r28, 0x38	; 56
    46e0:	6f ad       	ldd	r22, Y+63	; 0x3f
    46e2:	e8 97       	sbiw	r28, 0x38	; 56
    46e4:	6a 83       	std	Y+2, r22	; 0x02
    46e6:	e9 96       	adiw	r28, 0x39	; 57
    46e8:	7f ad       	ldd	r23, Y+63	; 0x3f
    46ea:	e9 97       	sbiw	r28, 0x39	; 57
    46ec:	7b 83       	std	Y+3, r23	; 0x03
    46ee:	ea 96       	adiw	r28, 0x3a	; 58
    46f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    46f2:	ea 97       	sbiw	r28, 0x3a	; 58
    46f4:	8c 83       	std	Y+4, r24	; 0x04
    46f6:	eb 96       	adiw	r28, 0x3b	; 59
    46f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    46fa:	eb 97       	sbiw	r28, 0x3b	; 59
    46fc:	9d 83       	std	Y+5, r25	; 0x05
    46fe:	ec 96       	adiw	r28, 0x3c	; 60
    4700:	0f ad       	ldd	r16, Y+63	; 0x3f
    4702:	ec 97       	sbiw	r28, 0x3c	; 60
    4704:	0e 83       	std	Y+6, r16	; 0x06
    4706:	ed 96       	adiw	r28, 0x3d	; 61
    4708:	1f ad       	ldd	r17, Y+63	; 0x3f
    470a:	ed 97       	sbiw	r28, 0x3d	; 61
    470c:	1f 83       	std	Y+7, r17	; 0x07
    470e:	ee 96       	adiw	r28, 0x3e	; 62
    4710:	2f ad       	ldd	r18, Y+63	; 0x3f
    4712:	ee 97       	sbiw	r28, 0x3e	; 62
    4714:	28 87       	std	Y+8, r18	; 0x08
	  desiredTime+=(milliSecond*1000);
    4716:	2f a1       	ldd	r18, Y+39	; 0x27
    4718:	38 a5       	ldd	r19, Y+40	; 0x28
    471a:	88 ee       	ldi	r24, 0xE8	; 232
    471c:	93 e0       	ldi	r25, 0x03	; 3
    471e:	ac 01       	movw	r20, r24
    4720:	24 9f       	mul	r18, r20
    4722:	c0 01       	movw	r24, r0
    4724:	25 9f       	mul	r18, r21
    4726:	90 0d       	add	r25, r0
    4728:	34 9f       	mul	r19, r20
    472a:	90 0d       	add	r25, r0
    472c:	11 24       	eor	r1, r1
    472e:	8c 01       	movw	r16, r24
    4730:	20 e0       	ldi	r18, 0x00	; 0
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	40 e0       	ldi	r20, 0x00	; 0
    4736:	50 e0       	ldi	r21, 0x00	; 0
    4738:	60 e0       	ldi	r22, 0x00	; 0
    473a:	70 e0       	ldi	r23, 0x00	; 0
    473c:	0b ab       	std	Y+51, r16	; 0x33
    473e:	1c ab       	std	Y+52, r17	; 0x34
    4740:	2d ab       	std	Y+53, r18	; 0x35
    4742:	3e ab       	std	Y+54, r19	; 0x36
    4744:	4f ab       	std	Y+55, r20	; 0x37
    4746:	58 af       	std	Y+56, r21	; 0x38
    4748:	69 af       	std	Y+57, r22	; 0x39
    474a:	7a af       	std	Y+58, r23	; 0x3a
    474c:	19 81       	ldd	r17, Y+1	; 0x01
    474e:	cf 56       	subi	r28, 0x6F	; 111
    4750:	df 4f       	sbci	r29, 0xFF	; 255
    4752:	18 83       	st	Y, r17
    4754:	c1 59       	subi	r28, 0x91	; 145
    4756:	d0 40       	sbci	r29, 0x00	; 0
    4758:	2a 81       	ldd	r18, Y+2	; 0x02
    475a:	ce 56       	subi	r28, 0x6E	; 110
    475c:	df 4f       	sbci	r29, 0xFF	; 255
    475e:	28 83       	st	Y, r18
    4760:	c2 59       	subi	r28, 0x92	; 146
    4762:	d0 40       	sbci	r29, 0x00	; 0
    4764:	3b 81       	ldd	r19, Y+3	; 0x03
    4766:	cd 56       	subi	r28, 0x6D	; 109
    4768:	df 4f       	sbci	r29, 0xFF	; 255
    476a:	38 83       	st	Y, r19
    476c:	c3 59       	subi	r28, 0x93	; 147
    476e:	d0 40       	sbci	r29, 0x00	; 0
    4770:	4c 81       	ldd	r20, Y+4	; 0x04
    4772:	cc 56       	subi	r28, 0x6C	; 108
    4774:	df 4f       	sbci	r29, 0xFF	; 255
    4776:	48 83       	st	Y, r20
    4778:	c4 59       	subi	r28, 0x94	; 148
    477a:	d0 40       	sbci	r29, 0x00	; 0
    477c:	5d 81       	ldd	r21, Y+5	; 0x05
    477e:	cb 56       	subi	r28, 0x6B	; 107
    4780:	df 4f       	sbci	r29, 0xFF	; 255
    4782:	58 83       	st	Y, r21
    4784:	c5 59       	subi	r28, 0x95	; 149
    4786:	d0 40       	sbci	r29, 0x00	; 0
    4788:	6e 81       	ldd	r22, Y+6	; 0x06
    478a:	ca 56       	subi	r28, 0x6A	; 106
    478c:	df 4f       	sbci	r29, 0xFF	; 255
    478e:	68 83       	st	Y, r22
    4790:	c6 59       	subi	r28, 0x96	; 150
    4792:	d0 40       	sbci	r29, 0x00	; 0
    4794:	7f 81       	ldd	r23, Y+7	; 0x07
    4796:	c9 56       	subi	r28, 0x69	; 105
    4798:	df 4f       	sbci	r29, 0xFF	; 255
    479a:	78 83       	st	Y, r23
    479c:	c7 59       	subi	r28, 0x97	; 151
    479e:	d0 40       	sbci	r29, 0x00	; 0
    47a0:	88 85       	ldd	r24, Y+8	; 0x08
    47a2:	c8 56       	subi	r28, 0x68	; 104
    47a4:	df 4f       	sbci	r29, 0xFF	; 255
    47a6:	88 83       	st	Y, r24
    47a8:	c8 59       	subi	r28, 0x98	; 152
    47aa:	d0 40       	sbci	r29, 0x00	; 0
    47ac:	cf 56       	subi	r28, 0x6F	; 111
    47ae:	df 4f       	sbci	r29, 0xFF	; 255
    47b0:	98 81       	ld	r25, Y
    47b2:	c1 59       	subi	r28, 0x91	; 145
    47b4:	d0 40       	sbci	r29, 0x00	; 0
    47b6:	0b a9       	ldd	r16, Y+51	; 0x33
    47b8:	90 0f       	add	r25, r16
    47ba:	c7 56       	subi	r28, 0x67	; 103
    47bc:	df 4f       	sbci	r29, 0xFF	; 255
    47be:	98 83       	st	Y, r25
    47c0:	c9 59       	subi	r28, 0x99	; 153
    47c2:	d0 40       	sbci	r29, 0x00	; 0
    47c4:	11 e0       	ldi	r17, 0x01	; 1
    47c6:	cf 55       	subi	r28, 0x5F	; 95
    47c8:	df 4f       	sbci	r29, 0xFF	; 255
    47ca:	18 83       	st	Y, r17
    47cc:	c1 5a       	subi	r28, 0xA1	; 161
    47ce:	d0 40       	sbci	r29, 0x00	; 0
    47d0:	c7 56       	subi	r28, 0x67	; 103
    47d2:	df 4f       	sbci	r29, 0xFF	; 255
    47d4:	28 81       	ld	r18, Y
    47d6:	c9 59       	subi	r28, 0x99	; 153
    47d8:	d0 40       	sbci	r29, 0x00	; 0
    47da:	cf 56       	subi	r28, 0x6F	; 111
    47dc:	df 4f       	sbci	r29, 0xFF	; 255
    47de:	38 81       	ld	r19, Y
    47e0:	c1 59       	subi	r28, 0x91	; 145
    47e2:	d0 40       	sbci	r29, 0x00	; 0
    47e4:	23 17       	cp	r18, r19
    47e6:	28 f0       	brcs	.+10     	; 0x47f2 <MTMR_u8Timer0NormalModeTimeMapping+0xb6c>
    47e8:	cf 55       	subi	r28, 0x5F	; 95
    47ea:	df 4f       	sbci	r29, 0xFF	; 255
    47ec:	18 82       	st	Y, r1
    47ee:	c1 5a       	subi	r28, 0xA1	; 161
    47f0:	d0 40       	sbci	r29, 0x00	; 0
    47f2:	ce 56       	subi	r28, 0x6E	; 110
    47f4:	df 4f       	sbci	r29, 0xFF	; 255
    47f6:	48 81       	ld	r20, Y
    47f8:	c2 59       	subi	r28, 0x92	; 146
    47fa:	d0 40       	sbci	r29, 0x00	; 0
    47fc:	5c a9       	ldd	r21, Y+52	; 0x34
    47fe:	45 0f       	add	r20, r21
    4800:	c6 56       	subi	r28, 0x66	; 102
    4802:	df 4f       	sbci	r29, 0xFF	; 255
    4804:	48 83       	st	Y, r20
    4806:	ca 59       	subi	r28, 0x9A	; 154
    4808:	d0 40       	sbci	r29, 0x00	; 0
    480a:	61 e0       	ldi	r22, 0x01	; 1
    480c:	ce 55       	subi	r28, 0x5E	; 94
    480e:	df 4f       	sbci	r29, 0xFF	; 255
    4810:	68 83       	st	Y, r22
    4812:	c2 5a       	subi	r28, 0xA2	; 162
    4814:	d0 40       	sbci	r29, 0x00	; 0
    4816:	c6 56       	subi	r28, 0x66	; 102
    4818:	df 4f       	sbci	r29, 0xFF	; 255
    481a:	78 81       	ld	r23, Y
    481c:	ca 59       	subi	r28, 0x9A	; 154
    481e:	d0 40       	sbci	r29, 0x00	; 0
    4820:	ce 56       	subi	r28, 0x6E	; 110
    4822:	df 4f       	sbci	r29, 0xFF	; 255
    4824:	88 81       	ld	r24, Y
    4826:	c2 59       	subi	r28, 0x92	; 146
    4828:	d0 40       	sbci	r29, 0x00	; 0
    482a:	78 17       	cp	r23, r24
    482c:	28 f0       	brcs	.+10     	; 0x4838 <MTMR_u8Timer0NormalModeTimeMapping+0xbb2>
    482e:	ce 55       	subi	r28, 0x5E	; 94
    4830:	df 4f       	sbci	r29, 0xFF	; 255
    4832:	18 82       	st	Y, r1
    4834:	c2 5a       	subi	r28, 0xA2	; 162
    4836:	d0 40       	sbci	r29, 0x00	; 0
    4838:	cf 55       	subi	r28, 0x5F	; 95
    483a:	df 4f       	sbci	r29, 0xFF	; 255
    483c:	98 81       	ld	r25, Y
    483e:	c1 5a       	subi	r28, 0xA1	; 161
    4840:	d0 40       	sbci	r29, 0x00	; 0
    4842:	c6 56       	subi	r28, 0x66	; 102
    4844:	df 4f       	sbci	r29, 0xFF	; 255
    4846:	08 81       	ld	r16, Y
    4848:	ca 59       	subi	r28, 0x9A	; 154
    484a:	d0 40       	sbci	r29, 0x00	; 0
    484c:	90 0f       	add	r25, r16
    484e:	cd 55       	subi	r28, 0x5D	; 93
    4850:	df 4f       	sbci	r29, 0xFF	; 255
    4852:	98 83       	st	Y, r25
    4854:	c3 5a       	subi	r28, 0xA3	; 163
    4856:	d0 40       	sbci	r29, 0x00	; 0
    4858:	11 e0       	ldi	r17, 0x01	; 1
    485a:	cc 55       	subi	r28, 0x5C	; 92
    485c:	df 4f       	sbci	r29, 0xFF	; 255
    485e:	18 83       	st	Y, r17
    4860:	c4 5a       	subi	r28, 0xA4	; 164
    4862:	d0 40       	sbci	r29, 0x00	; 0
    4864:	cd 55       	subi	r28, 0x5D	; 93
    4866:	df 4f       	sbci	r29, 0xFF	; 255
    4868:	28 81       	ld	r18, Y
    486a:	c3 5a       	subi	r28, 0xA3	; 163
    486c:	d0 40       	sbci	r29, 0x00	; 0
    486e:	c6 56       	subi	r28, 0x66	; 102
    4870:	df 4f       	sbci	r29, 0xFF	; 255
    4872:	38 81       	ld	r19, Y
    4874:	ca 59       	subi	r28, 0x9A	; 154
    4876:	d0 40       	sbci	r29, 0x00	; 0
    4878:	23 17       	cp	r18, r19
    487a:	28 f0       	brcs	.+10     	; 0x4886 <MTMR_u8Timer0NormalModeTimeMapping+0xc00>
    487c:	cc 55       	subi	r28, 0x5C	; 92
    487e:	df 4f       	sbci	r29, 0xFF	; 255
    4880:	18 82       	st	Y, r1
    4882:	c4 5a       	subi	r28, 0xA4	; 164
    4884:	d0 40       	sbci	r29, 0x00	; 0
    4886:	ce 55       	subi	r28, 0x5E	; 94
    4888:	df 4f       	sbci	r29, 0xFF	; 255
    488a:	48 81       	ld	r20, Y
    488c:	c2 5a       	subi	r28, 0xA2	; 162
    488e:	d0 40       	sbci	r29, 0x00	; 0
    4890:	cc 55       	subi	r28, 0x5C	; 92
    4892:	df 4f       	sbci	r29, 0xFF	; 255
    4894:	58 81       	ld	r21, Y
    4896:	c4 5a       	subi	r28, 0xA4	; 164
    4898:	d0 40       	sbci	r29, 0x00	; 0
    489a:	45 2b       	or	r20, r21
    489c:	ce 55       	subi	r28, 0x5E	; 94
    489e:	df 4f       	sbci	r29, 0xFF	; 255
    48a0:	48 83       	st	Y, r20
    48a2:	c2 5a       	subi	r28, 0xA2	; 162
    48a4:	d0 40       	sbci	r29, 0x00	; 0
    48a6:	cd 55       	subi	r28, 0x5D	; 93
    48a8:	df 4f       	sbci	r29, 0xFF	; 255
    48aa:	68 81       	ld	r22, Y
    48ac:	c3 5a       	subi	r28, 0xA3	; 163
    48ae:	d0 40       	sbci	r29, 0x00	; 0
    48b0:	c6 56       	subi	r28, 0x66	; 102
    48b2:	df 4f       	sbci	r29, 0xFF	; 255
    48b4:	68 83       	st	Y, r22
    48b6:	ca 59       	subi	r28, 0x9A	; 154
    48b8:	d0 40       	sbci	r29, 0x00	; 0
    48ba:	cd 56       	subi	r28, 0x6D	; 109
    48bc:	df 4f       	sbci	r29, 0xFF	; 255
    48be:	78 81       	ld	r23, Y
    48c0:	c3 59       	subi	r28, 0x93	; 147
    48c2:	d0 40       	sbci	r29, 0x00	; 0
    48c4:	8d a9       	ldd	r24, Y+53	; 0x35
    48c6:	78 0f       	add	r23, r24
    48c8:	c5 56       	subi	r28, 0x65	; 101
    48ca:	df 4f       	sbci	r29, 0xFF	; 255
    48cc:	78 83       	st	Y, r23
    48ce:	cb 59       	subi	r28, 0x9B	; 155
    48d0:	d0 40       	sbci	r29, 0x00	; 0
    48d2:	91 e0       	ldi	r25, 0x01	; 1
    48d4:	cb 55       	subi	r28, 0x5B	; 91
    48d6:	df 4f       	sbci	r29, 0xFF	; 255
    48d8:	98 83       	st	Y, r25
    48da:	c5 5a       	subi	r28, 0xA5	; 165
    48dc:	d0 40       	sbci	r29, 0x00	; 0
    48de:	c5 56       	subi	r28, 0x65	; 101
    48e0:	df 4f       	sbci	r29, 0xFF	; 255
    48e2:	08 81       	ld	r16, Y
    48e4:	cb 59       	subi	r28, 0x9B	; 155
    48e6:	d0 40       	sbci	r29, 0x00	; 0
    48e8:	cd 56       	subi	r28, 0x6D	; 109
    48ea:	df 4f       	sbci	r29, 0xFF	; 255
    48ec:	18 81       	ld	r17, Y
    48ee:	c3 59       	subi	r28, 0x93	; 147
    48f0:	d0 40       	sbci	r29, 0x00	; 0
    48f2:	01 17       	cp	r16, r17
    48f4:	28 f0       	brcs	.+10     	; 0x4900 <MTMR_u8Timer0NormalModeTimeMapping+0xc7a>
    48f6:	cb 55       	subi	r28, 0x5B	; 91
    48f8:	df 4f       	sbci	r29, 0xFF	; 255
    48fa:	18 82       	st	Y, r1
    48fc:	c5 5a       	subi	r28, 0xA5	; 165
    48fe:	d0 40       	sbci	r29, 0x00	; 0
    4900:	ce 55       	subi	r28, 0x5E	; 94
    4902:	df 4f       	sbci	r29, 0xFF	; 255
    4904:	28 81       	ld	r18, Y
    4906:	c2 5a       	subi	r28, 0xA2	; 162
    4908:	d0 40       	sbci	r29, 0x00	; 0
    490a:	c5 56       	subi	r28, 0x65	; 101
    490c:	df 4f       	sbci	r29, 0xFF	; 255
    490e:	38 81       	ld	r19, Y
    4910:	cb 59       	subi	r28, 0x9B	; 155
    4912:	d0 40       	sbci	r29, 0x00	; 0
    4914:	23 0f       	add	r18, r19
    4916:	ca 55       	subi	r28, 0x5A	; 90
    4918:	df 4f       	sbci	r29, 0xFF	; 255
    491a:	28 83       	st	Y, r18
    491c:	c6 5a       	subi	r28, 0xA6	; 166
    491e:	d0 40       	sbci	r29, 0x00	; 0
    4920:	41 e0       	ldi	r20, 0x01	; 1
    4922:	c9 55       	subi	r28, 0x59	; 89
    4924:	df 4f       	sbci	r29, 0xFF	; 255
    4926:	48 83       	st	Y, r20
    4928:	c7 5a       	subi	r28, 0xA7	; 167
    492a:	d0 40       	sbci	r29, 0x00	; 0
    492c:	ca 55       	subi	r28, 0x5A	; 90
    492e:	df 4f       	sbci	r29, 0xFF	; 255
    4930:	58 81       	ld	r21, Y
    4932:	c6 5a       	subi	r28, 0xA6	; 166
    4934:	d0 40       	sbci	r29, 0x00	; 0
    4936:	c5 56       	subi	r28, 0x65	; 101
    4938:	df 4f       	sbci	r29, 0xFF	; 255
    493a:	68 81       	ld	r22, Y
    493c:	cb 59       	subi	r28, 0x9B	; 155
    493e:	d0 40       	sbci	r29, 0x00	; 0
    4940:	56 17       	cp	r21, r22
    4942:	28 f0       	brcs	.+10     	; 0x494e <MTMR_u8Timer0NormalModeTimeMapping+0xcc8>
    4944:	c9 55       	subi	r28, 0x59	; 89
    4946:	df 4f       	sbci	r29, 0xFF	; 255
    4948:	18 82       	st	Y, r1
    494a:	c7 5a       	subi	r28, 0xA7	; 167
    494c:	d0 40       	sbci	r29, 0x00	; 0
    494e:	cb 55       	subi	r28, 0x5B	; 91
    4950:	df 4f       	sbci	r29, 0xFF	; 255
    4952:	78 81       	ld	r23, Y
    4954:	c5 5a       	subi	r28, 0xA5	; 165
    4956:	d0 40       	sbci	r29, 0x00	; 0
    4958:	c9 55       	subi	r28, 0x59	; 89
    495a:	df 4f       	sbci	r29, 0xFF	; 255
    495c:	88 81       	ld	r24, Y
    495e:	c7 5a       	subi	r28, 0xA7	; 167
    4960:	d0 40       	sbci	r29, 0x00	; 0
    4962:	78 2b       	or	r23, r24
    4964:	cb 55       	subi	r28, 0x5B	; 91
    4966:	df 4f       	sbci	r29, 0xFF	; 255
    4968:	78 83       	st	Y, r23
    496a:	c5 5a       	subi	r28, 0xA5	; 165
    496c:	d0 40       	sbci	r29, 0x00	; 0
    496e:	ca 55       	subi	r28, 0x5A	; 90
    4970:	df 4f       	sbci	r29, 0xFF	; 255
    4972:	98 81       	ld	r25, Y
    4974:	c6 5a       	subi	r28, 0xA6	; 166
    4976:	d0 40       	sbci	r29, 0x00	; 0
    4978:	c5 56       	subi	r28, 0x65	; 101
    497a:	df 4f       	sbci	r29, 0xFF	; 255
    497c:	98 83       	st	Y, r25
    497e:	cb 59       	subi	r28, 0x9B	; 155
    4980:	d0 40       	sbci	r29, 0x00	; 0
    4982:	cc 56       	subi	r28, 0x6C	; 108
    4984:	df 4f       	sbci	r29, 0xFF	; 255
    4986:	08 81       	ld	r16, Y
    4988:	c4 59       	subi	r28, 0x94	; 148
    498a:	d0 40       	sbci	r29, 0x00	; 0
    498c:	1e a9       	ldd	r17, Y+54	; 0x36
    498e:	01 0f       	add	r16, r17
    4990:	c4 56       	subi	r28, 0x64	; 100
    4992:	df 4f       	sbci	r29, 0xFF	; 255
    4994:	08 83       	st	Y, r16
    4996:	cc 59       	subi	r28, 0x9C	; 156
    4998:	d0 40       	sbci	r29, 0x00	; 0
    499a:	21 e0       	ldi	r18, 0x01	; 1
    499c:	c8 55       	subi	r28, 0x58	; 88
    499e:	df 4f       	sbci	r29, 0xFF	; 255
    49a0:	28 83       	st	Y, r18
    49a2:	c8 5a       	subi	r28, 0xA8	; 168
    49a4:	d0 40       	sbci	r29, 0x00	; 0
    49a6:	c4 56       	subi	r28, 0x64	; 100
    49a8:	df 4f       	sbci	r29, 0xFF	; 255
    49aa:	38 81       	ld	r19, Y
    49ac:	cc 59       	subi	r28, 0x9C	; 156
    49ae:	d0 40       	sbci	r29, 0x00	; 0
    49b0:	cc 56       	subi	r28, 0x6C	; 108
    49b2:	df 4f       	sbci	r29, 0xFF	; 255
    49b4:	48 81       	ld	r20, Y
    49b6:	c4 59       	subi	r28, 0x94	; 148
    49b8:	d0 40       	sbci	r29, 0x00	; 0
    49ba:	34 17       	cp	r19, r20
    49bc:	28 f0       	brcs	.+10     	; 0x49c8 <MTMR_u8Timer0NormalModeTimeMapping+0xd42>
    49be:	c8 55       	subi	r28, 0x58	; 88
    49c0:	df 4f       	sbci	r29, 0xFF	; 255
    49c2:	18 82       	st	Y, r1
    49c4:	c8 5a       	subi	r28, 0xA8	; 168
    49c6:	d0 40       	sbci	r29, 0x00	; 0
    49c8:	cb 55       	subi	r28, 0x5B	; 91
    49ca:	df 4f       	sbci	r29, 0xFF	; 255
    49cc:	58 81       	ld	r21, Y
    49ce:	c5 5a       	subi	r28, 0xA5	; 165
    49d0:	d0 40       	sbci	r29, 0x00	; 0
    49d2:	c4 56       	subi	r28, 0x64	; 100
    49d4:	df 4f       	sbci	r29, 0xFF	; 255
    49d6:	68 81       	ld	r22, Y
    49d8:	cc 59       	subi	r28, 0x9C	; 156
    49da:	d0 40       	sbci	r29, 0x00	; 0
    49dc:	56 0f       	add	r21, r22
    49de:	c7 55       	subi	r28, 0x57	; 87
    49e0:	df 4f       	sbci	r29, 0xFF	; 255
    49e2:	58 83       	st	Y, r21
    49e4:	c9 5a       	subi	r28, 0xA9	; 169
    49e6:	d0 40       	sbci	r29, 0x00	; 0
    49e8:	71 e0       	ldi	r23, 0x01	; 1
    49ea:	c6 55       	subi	r28, 0x56	; 86
    49ec:	df 4f       	sbci	r29, 0xFF	; 255
    49ee:	78 83       	st	Y, r23
    49f0:	ca 5a       	subi	r28, 0xAA	; 170
    49f2:	d0 40       	sbci	r29, 0x00	; 0
    49f4:	c7 55       	subi	r28, 0x57	; 87
    49f6:	df 4f       	sbci	r29, 0xFF	; 255
    49f8:	88 81       	ld	r24, Y
    49fa:	c9 5a       	subi	r28, 0xA9	; 169
    49fc:	d0 40       	sbci	r29, 0x00	; 0
    49fe:	c4 56       	subi	r28, 0x64	; 100
    4a00:	df 4f       	sbci	r29, 0xFF	; 255
    4a02:	98 81       	ld	r25, Y
    4a04:	cc 59       	subi	r28, 0x9C	; 156
    4a06:	d0 40       	sbci	r29, 0x00	; 0
    4a08:	89 17       	cp	r24, r25
    4a0a:	28 f0       	brcs	.+10     	; 0x4a16 <MTMR_u8Timer0NormalModeTimeMapping+0xd90>
    4a0c:	c6 55       	subi	r28, 0x56	; 86
    4a0e:	df 4f       	sbci	r29, 0xFF	; 255
    4a10:	18 82       	st	Y, r1
    4a12:	ca 5a       	subi	r28, 0xAA	; 170
    4a14:	d0 40       	sbci	r29, 0x00	; 0
    4a16:	c8 55       	subi	r28, 0x58	; 88
    4a18:	df 4f       	sbci	r29, 0xFF	; 255
    4a1a:	08 81       	ld	r16, Y
    4a1c:	c8 5a       	subi	r28, 0xA8	; 168
    4a1e:	d0 40       	sbci	r29, 0x00	; 0
    4a20:	c6 55       	subi	r28, 0x56	; 86
    4a22:	df 4f       	sbci	r29, 0xFF	; 255
    4a24:	18 81       	ld	r17, Y
    4a26:	ca 5a       	subi	r28, 0xAA	; 170
    4a28:	d0 40       	sbci	r29, 0x00	; 0
    4a2a:	01 2b       	or	r16, r17
    4a2c:	c8 55       	subi	r28, 0x58	; 88
    4a2e:	df 4f       	sbci	r29, 0xFF	; 255
    4a30:	08 83       	st	Y, r16
    4a32:	c8 5a       	subi	r28, 0xA8	; 168
    4a34:	d0 40       	sbci	r29, 0x00	; 0
    4a36:	c7 55       	subi	r28, 0x57	; 87
    4a38:	df 4f       	sbci	r29, 0xFF	; 255
    4a3a:	28 81       	ld	r18, Y
    4a3c:	c9 5a       	subi	r28, 0xA9	; 169
    4a3e:	d0 40       	sbci	r29, 0x00	; 0
    4a40:	c4 56       	subi	r28, 0x64	; 100
    4a42:	df 4f       	sbci	r29, 0xFF	; 255
    4a44:	28 83       	st	Y, r18
    4a46:	cc 59       	subi	r28, 0x9C	; 156
    4a48:	d0 40       	sbci	r29, 0x00	; 0
    4a4a:	cb 56       	subi	r28, 0x6B	; 107
    4a4c:	df 4f       	sbci	r29, 0xFF	; 255
    4a4e:	38 81       	ld	r19, Y
    4a50:	c5 59       	subi	r28, 0x95	; 149
    4a52:	d0 40       	sbci	r29, 0x00	; 0
    4a54:	4f a9       	ldd	r20, Y+55	; 0x37
    4a56:	34 0f       	add	r19, r20
    4a58:	c3 56       	subi	r28, 0x63	; 99
    4a5a:	df 4f       	sbci	r29, 0xFF	; 255
    4a5c:	38 83       	st	Y, r19
    4a5e:	cd 59       	subi	r28, 0x9D	; 157
    4a60:	d0 40       	sbci	r29, 0x00	; 0
    4a62:	51 e0       	ldi	r21, 0x01	; 1
    4a64:	c5 55       	subi	r28, 0x55	; 85
    4a66:	df 4f       	sbci	r29, 0xFF	; 255
    4a68:	58 83       	st	Y, r21
    4a6a:	cb 5a       	subi	r28, 0xAB	; 171
    4a6c:	d0 40       	sbci	r29, 0x00	; 0
    4a6e:	c3 56       	subi	r28, 0x63	; 99
    4a70:	df 4f       	sbci	r29, 0xFF	; 255
    4a72:	68 81       	ld	r22, Y
    4a74:	cd 59       	subi	r28, 0x9D	; 157
    4a76:	d0 40       	sbci	r29, 0x00	; 0
    4a78:	cb 56       	subi	r28, 0x6B	; 107
    4a7a:	df 4f       	sbci	r29, 0xFF	; 255
    4a7c:	78 81       	ld	r23, Y
    4a7e:	c5 59       	subi	r28, 0x95	; 149
    4a80:	d0 40       	sbci	r29, 0x00	; 0
    4a82:	67 17       	cp	r22, r23
    4a84:	28 f0       	brcs	.+10     	; 0x4a90 <MTMR_u8Timer0NormalModeTimeMapping+0xe0a>
    4a86:	c5 55       	subi	r28, 0x55	; 85
    4a88:	df 4f       	sbci	r29, 0xFF	; 255
    4a8a:	18 82       	st	Y, r1
    4a8c:	cb 5a       	subi	r28, 0xAB	; 171
    4a8e:	d0 40       	sbci	r29, 0x00	; 0
    4a90:	c8 55       	subi	r28, 0x58	; 88
    4a92:	df 4f       	sbci	r29, 0xFF	; 255
    4a94:	88 81       	ld	r24, Y
    4a96:	c8 5a       	subi	r28, 0xA8	; 168
    4a98:	d0 40       	sbci	r29, 0x00	; 0
    4a9a:	c3 56       	subi	r28, 0x63	; 99
    4a9c:	df 4f       	sbci	r29, 0xFF	; 255
    4a9e:	98 81       	ld	r25, Y
    4aa0:	cd 59       	subi	r28, 0x9D	; 157
    4aa2:	d0 40       	sbci	r29, 0x00	; 0
    4aa4:	89 0f       	add	r24, r25
    4aa6:	c4 55       	subi	r28, 0x54	; 84
    4aa8:	df 4f       	sbci	r29, 0xFF	; 255
    4aaa:	88 83       	st	Y, r24
    4aac:	cc 5a       	subi	r28, 0xAC	; 172
    4aae:	d0 40       	sbci	r29, 0x00	; 0
    4ab0:	01 e0       	ldi	r16, 0x01	; 1
    4ab2:	c3 55       	subi	r28, 0x53	; 83
    4ab4:	df 4f       	sbci	r29, 0xFF	; 255
    4ab6:	08 83       	st	Y, r16
    4ab8:	cd 5a       	subi	r28, 0xAD	; 173
    4aba:	d0 40       	sbci	r29, 0x00	; 0
    4abc:	c4 55       	subi	r28, 0x54	; 84
    4abe:	df 4f       	sbci	r29, 0xFF	; 255
    4ac0:	18 81       	ld	r17, Y
    4ac2:	cc 5a       	subi	r28, 0xAC	; 172
    4ac4:	d0 40       	sbci	r29, 0x00	; 0
    4ac6:	c3 56       	subi	r28, 0x63	; 99
    4ac8:	df 4f       	sbci	r29, 0xFF	; 255
    4aca:	28 81       	ld	r18, Y
    4acc:	cd 59       	subi	r28, 0x9D	; 157
    4ace:	d0 40       	sbci	r29, 0x00	; 0
    4ad0:	12 17       	cp	r17, r18
    4ad2:	28 f0       	brcs	.+10     	; 0x4ade <MTMR_u8Timer0NormalModeTimeMapping+0xe58>
    4ad4:	c3 55       	subi	r28, 0x53	; 83
    4ad6:	df 4f       	sbci	r29, 0xFF	; 255
    4ad8:	18 82       	st	Y, r1
    4ada:	cd 5a       	subi	r28, 0xAD	; 173
    4adc:	d0 40       	sbci	r29, 0x00	; 0
    4ade:	c5 55       	subi	r28, 0x55	; 85
    4ae0:	df 4f       	sbci	r29, 0xFF	; 255
    4ae2:	38 81       	ld	r19, Y
    4ae4:	cb 5a       	subi	r28, 0xAB	; 171
    4ae6:	d0 40       	sbci	r29, 0x00	; 0
    4ae8:	c3 55       	subi	r28, 0x53	; 83
    4aea:	df 4f       	sbci	r29, 0xFF	; 255
    4aec:	48 81       	ld	r20, Y
    4aee:	cd 5a       	subi	r28, 0xAD	; 173
    4af0:	d0 40       	sbci	r29, 0x00	; 0
    4af2:	34 2b       	or	r19, r20
    4af4:	c5 55       	subi	r28, 0x55	; 85
    4af6:	df 4f       	sbci	r29, 0xFF	; 255
    4af8:	38 83       	st	Y, r19
    4afa:	cb 5a       	subi	r28, 0xAB	; 171
    4afc:	d0 40       	sbci	r29, 0x00	; 0
    4afe:	c4 55       	subi	r28, 0x54	; 84
    4b00:	df 4f       	sbci	r29, 0xFF	; 255
    4b02:	58 81       	ld	r21, Y
    4b04:	cc 5a       	subi	r28, 0xAC	; 172
    4b06:	d0 40       	sbci	r29, 0x00	; 0
    4b08:	c3 56       	subi	r28, 0x63	; 99
    4b0a:	df 4f       	sbci	r29, 0xFF	; 255
    4b0c:	58 83       	st	Y, r21
    4b0e:	cd 59       	subi	r28, 0x9D	; 157
    4b10:	d0 40       	sbci	r29, 0x00	; 0
    4b12:	ca 56       	subi	r28, 0x6A	; 106
    4b14:	df 4f       	sbci	r29, 0xFF	; 255
    4b16:	68 81       	ld	r22, Y
    4b18:	c6 59       	subi	r28, 0x96	; 150
    4b1a:	d0 40       	sbci	r29, 0x00	; 0
    4b1c:	78 ad       	ldd	r23, Y+56	; 0x38
    4b1e:	67 0f       	add	r22, r23
    4b20:	c2 56       	subi	r28, 0x62	; 98
    4b22:	df 4f       	sbci	r29, 0xFF	; 255
    4b24:	68 83       	st	Y, r22
    4b26:	ce 59       	subi	r28, 0x9E	; 158
    4b28:	d0 40       	sbci	r29, 0x00	; 0
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	c2 55       	subi	r28, 0x52	; 82
    4b2e:	df 4f       	sbci	r29, 0xFF	; 255
    4b30:	88 83       	st	Y, r24
    4b32:	ce 5a       	subi	r28, 0xAE	; 174
    4b34:	d0 40       	sbci	r29, 0x00	; 0
    4b36:	c2 56       	subi	r28, 0x62	; 98
    4b38:	df 4f       	sbci	r29, 0xFF	; 255
    4b3a:	98 81       	ld	r25, Y
    4b3c:	ce 59       	subi	r28, 0x9E	; 158
    4b3e:	d0 40       	sbci	r29, 0x00	; 0
    4b40:	ca 56       	subi	r28, 0x6A	; 106
    4b42:	df 4f       	sbci	r29, 0xFF	; 255
    4b44:	08 81       	ld	r16, Y
    4b46:	c6 59       	subi	r28, 0x96	; 150
    4b48:	d0 40       	sbci	r29, 0x00	; 0
    4b4a:	90 17       	cp	r25, r16
    4b4c:	28 f0       	brcs	.+10     	; 0x4b58 <MTMR_u8Timer0NormalModeTimeMapping+0xed2>
    4b4e:	c2 55       	subi	r28, 0x52	; 82
    4b50:	df 4f       	sbci	r29, 0xFF	; 255
    4b52:	18 82       	st	Y, r1
    4b54:	ce 5a       	subi	r28, 0xAE	; 174
    4b56:	d0 40       	sbci	r29, 0x00	; 0
    4b58:	c5 55       	subi	r28, 0x55	; 85
    4b5a:	df 4f       	sbci	r29, 0xFF	; 255
    4b5c:	18 81       	ld	r17, Y
    4b5e:	cb 5a       	subi	r28, 0xAB	; 171
    4b60:	d0 40       	sbci	r29, 0x00	; 0
    4b62:	c2 56       	subi	r28, 0x62	; 98
    4b64:	df 4f       	sbci	r29, 0xFF	; 255
    4b66:	28 81       	ld	r18, Y
    4b68:	ce 59       	subi	r28, 0x9E	; 158
    4b6a:	d0 40       	sbci	r29, 0x00	; 0
    4b6c:	12 0f       	add	r17, r18
    4b6e:	c1 55       	subi	r28, 0x51	; 81
    4b70:	df 4f       	sbci	r29, 0xFF	; 255
    4b72:	18 83       	st	Y, r17
    4b74:	cf 5a       	subi	r28, 0xAF	; 175
    4b76:	d0 40       	sbci	r29, 0x00	; 0
    4b78:	31 e0       	ldi	r19, 0x01	; 1
    4b7a:	c0 55       	subi	r28, 0x50	; 80
    4b7c:	df 4f       	sbci	r29, 0xFF	; 255
    4b7e:	38 83       	st	Y, r19
    4b80:	c0 5b       	subi	r28, 0xB0	; 176
    4b82:	d0 40       	sbci	r29, 0x00	; 0
    4b84:	c1 55       	subi	r28, 0x51	; 81
    4b86:	df 4f       	sbci	r29, 0xFF	; 255
    4b88:	48 81       	ld	r20, Y
    4b8a:	cf 5a       	subi	r28, 0xAF	; 175
    4b8c:	d0 40       	sbci	r29, 0x00	; 0
    4b8e:	c2 56       	subi	r28, 0x62	; 98
    4b90:	df 4f       	sbci	r29, 0xFF	; 255
    4b92:	58 81       	ld	r21, Y
    4b94:	ce 59       	subi	r28, 0x9E	; 158
    4b96:	d0 40       	sbci	r29, 0x00	; 0
    4b98:	45 17       	cp	r20, r21
    4b9a:	28 f0       	brcs	.+10     	; 0x4ba6 <MTMR_u8Timer0NormalModeTimeMapping+0xf20>
    4b9c:	c0 55       	subi	r28, 0x50	; 80
    4b9e:	df 4f       	sbci	r29, 0xFF	; 255
    4ba0:	18 82       	st	Y, r1
    4ba2:	c0 5b       	subi	r28, 0xB0	; 176
    4ba4:	d0 40       	sbci	r29, 0x00	; 0
    4ba6:	c2 55       	subi	r28, 0x52	; 82
    4ba8:	df 4f       	sbci	r29, 0xFF	; 255
    4baa:	68 81       	ld	r22, Y
    4bac:	ce 5a       	subi	r28, 0xAE	; 174
    4bae:	d0 40       	sbci	r29, 0x00	; 0
    4bb0:	c0 55       	subi	r28, 0x50	; 80
    4bb2:	df 4f       	sbci	r29, 0xFF	; 255
    4bb4:	78 81       	ld	r23, Y
    4bb6:	c0 5b       	subi	r28, 0xB0	; 176
    4bb8:	d0 40       	sbci	r29, 0x00	; 0
    4bba:	67 2b       	or	r22, r23
    4bbc:	c2 55       	subi	r28, 0x52	; 82
    4bbe:	df 4f       	sbci	r29, 0xFF	; 255
    4bc0:	68 83       	st	Y, r22
    4bc2:	ce 5a       	subi	r28, 0xAE	; 174
    4bc4:	d0 40       	sbci	r29, 0x00	; 0
    4bc6:	c1 55       	subi	r28, 0x51	; 81
    4bc8:	df 4f       	sbci	r29, 0xFF	; 255
    4bca:	88 81       	ld	r24, Y
    4bcc:	cf 5a       	subi	r28, 0xAF	; 175
    4bce:	d0 40       	sbci	r29, 0x00	; 0
    4bd0:	c2 56       	subi	r28, 0x62	; 98
    4bd2:	df 4f       	sbci	r29, 0xFF	; 255
    4bd4:	88 83       	st	Y, r24
    4bd6:	ce 59       	subi	r28, 0x9E	; 158
    4bd8:	d0 40       	sbci	r29, 0x00	; 0
    4bda:	c9 56       	subi	r28, 0x69	; 105
    4bdc:	df 4f       	sbci	r29, 0xFF	; 255
    4bde:	98 81       	ld	r25, Y
    4be0:	c7 59       	subi	r28, 0x97	; 151
    4be2:	d0 40       	sbci	r29, 0x00	; 0
    4be4:	09 ad       	ldd	r16, Y+57	; 0x39
    4be6:	90 0f       	add	r25, r16
    4be8:	c1 56       	subi	r28, 0x61	; 97
    4bea:	df 4f       	sbci	r29, 0xFF	; 255
    4bec:	98 83       	st	Y, r25
    4bee:	cf 59       	subi	r28, 0x9F	; 159
    4bf0:	d0 40       	sbci	r29, 0x00	; 0
    4bf2:	11 e0       	ldi	r17, 0x01	; 1
    4bf4:	cf 54       	subi	r28, 0x4F	; 79
    4bf6:	df 4f       	sbci	r29, 0xFF	; 255
    4bf8:	18 83       	st	Y, r17
    4bfa:	c1 5b       	subi	r28, 0xB1	; 177
    4bfc:	d0 40       	sbci	r29, 0x00	; 0
    4bfe:	c1 56       	subi	r28, 0x61	; 97
    4c00:	df 4f       	sbci	r29, 0xFF	; 255
    4c02:	28 81       	ld	r18, Y
    4c04:	cf 59       	subi	r28, 0x9F	; 159
    4c06:	d0 40       	sbci	r29, 0x00	; 0
    4c08:	c9 56       	subi	r28, 0x69	; 105
    4c0a:	df 4f       	sbci	r29, 0xFF	; 255
    4c0c:	38 81       	ld	r19, Y
    4c0e:	c7 59       	subi	r28, 0x97	; 151
    4c10:	d0 40       	sbci	r29, 0x00	; 0
    4c12:	23 17       	cp	r18, r19
    4c14:	28 f0       	brcs	.+10     	; 0x4c20 <MTMR_u8Timer0NormalModeTimeMapping+0xf9a>
    4c16:	cf 54       	subi	r28, 0x4F	; 79
    4c18:	df 4f       	sbci	r29, 0xFF	; 255
    4c1a:	18 82       	st	Y, r1
    4c1c:	c1 5b       	subi	r28, 0xB1	; 177
    4c1e:	d0 40       	sbci	r29, 0x00	; 0
    4c20:	c2 55       	subi	r28, 0x52	; 82
    4c22:	df 4f       	sbci	r29, 0xFF	; 255
    4c24:	48 81       	ld	r20, Y
    4c26:	ce 5a       	subi	r28, 0xAE	; 174
    4c28:	d0 40       	sbci	r29, 0x00	; 0
    4c2a:	c1 56       	subi	r28, 0x61	; 97
    4c2c:	df 4f       	sbci	r29, 0xFF	; 255
    4c2e:	58 81       	ld	r21, Y
    4c30:	cf 59       	subi	r28, 0x9F	; 159
    4c32:	d0 40       	sbci	r29, 0x00	; 0
    4c34:	45 0f       	add	r20, r21
    4c36:	ce 54       	subi	r28, 0x4E	; 78
    4c38:	df 4f       	sbci	r29, 0xFF	; 255
    4c3a:	48 83       	st	Y, r20
    4c3c:	c2 5b       	subi	r28, 0xB2	; 178
    4c3e:	d0 40       	sbci	r29, 0x00	; 0
    4c40:	61 e0       	ldi	r22, 0x01	; 1
    4c42:	cd 54       	subi	r28, 0x4D	; 77
    4c44:	df 4f       	sbci	r29, 0xFF	; 255
    4c46:	68 83       	st	Y, r22
    4c48:	c3 5b       	subi	r28, 0xB3	; 179
    4c4a:	d0 40       	sbci	r29, 0x00	; 0
    4c4c:	ce 54       	subi	r28, 0x4E	; 78
    4c4e:	df 4f       	sbci	r29, 0xFF	; 255
    4c50:	78 81       	ld	r23, Y
    4c52:	c2 5b       	subi	r28, 0xB2	; 178
    4c54:	d0 40       	sbci	r29, 0x00	; 0
    4c56:	c1 56       	subi	r28, 0x61	; 97
    4c58:	df 4f       	sbci	r29, 0xFF	; 255
    4c5a:	88 81       	ld	r24, Y
    4c5c:	cf 59       	subi	r28, 0x9F	; 159
    4c5e:	d0 40       	sbci	r29, 0x00	; 0
    4c60:	78 17       	cp	r23, r24
    4c62:	28 f0       	brcs	.+10     	; 0x4c6e <MTMR_u8Timer0NormalModeTimeMapping+0xfe8>
    4c64:	cd 54       	subi	r28, 0x4D	; 77
    4c66:	df 4f       	sbci	r29, 0xFF	; 255
    4c68:	18 82       	st	Y, r1
    4c6a:	c3 5b       	subi	r28, 0xB3	; 179
    4c6c:	d0 40       	sbci	r29, 0x00	; 0
    4c6e:	cf 54       	subi	r28, 0x4F	; 79
    4c70:	df 4f       	sbci	r29, 0xFF	; 255
    4c72:	98 81       	ld	r25, Y
    4c74:	c1 5b       	subi	r28, 0xB1	; 177
    4c76:	d0 40       	sbci	r29, 0x00	; 0
    4c78:	cd 54       	subi	r28, 0x4D	; 77
    4c7a:	df 4f       	sbci	r29, 0xFF	; 255
    4c7c:	08 81       	ld	r16, Y
    4c7e:	c3 5b       	subi	r28, 0xB3	; 179
    4c80:	d0 40       	sbci	r29, 0x00	; 0
    4c82:	90 2b       	or	r25, r16
    4c84:	cf 54       	subi	r28, 0x4F	; 79
    4c86:	df 4f       	sbci	r29, 0xFF	; 255
    4c88:	98 83       	st	Y, r25
    4c8a:	c1 5b       	subi	r28, 0xB1	; 177
    4c8c:	d0 40       	sbci	r29, 0x00	; 0
    4c8e:	ce 54       	subi	r28, 0x4E	; 78
    4c90:	df 4f       	sbci	r29, 0xFF	; 255
    4c92:	18 81       	ld	r17, Y
    4c94:	c2 5b       	subi	r28, 0xB2	; 178
    4c96:	d0 40       	sbci	r29, 0x00	; 0
    4c98:	c1 56       	subi	r28, 0x61	; 97
    4c9a:	df 4f       	sbci	r29, 0xFF	; 255
    4c9c:	18 83       	st	Y, r17
    4c9e:	cf 59       	subi	r28, 0x9F	; 159
    4ca0:	d0 40       	sbci	r29, 0x00	; 0
    4ca2:	c8 56       	subi	r28, 0x68	; 104
    4ca4:	df 4f       	sbci	r29, 0xFF	; 255
    4ca6:	28 81       	ld	r18, Y
    4ca8:	c8 59       	subi	r28, 0x98	; 152
    4caa:	d0 40       	sbci	r29, 0x00	; 0
    4cac:	3a ad       	ldd	r19, Y+58	; 0x3a
    4cae:	23 0f       	add	r18, r19
    4cb0:	c0 56       	subi	r28, 0x60	; 96
    4cb2:	df 4f       	sbci	r29, 0xFF	; 255
    4cb4:	28 83       	st	Y, r18
    4cb6:	c0 5a       	subi	r28, 0xA0	; 160
    4cb8:	d0 40       	sbci	r29, 0x00	; 0
    4cba:	cf 54       	subi	r28, 0x4F	; 79
    4cbc:	df 4f       	sbci	r29, 0xFF	; 255
    4cbe:	88 81       	ld	r24, Y
    4cc0:	c1 5b       	subi	r28, 0xB1	; 177
    4cc2:	d0 40       	sbci	r29, 0x00	; 0
    4cc4:	c0 56       	subi	r28, 0x60	; 96
    4cc6:	df 4f       	sbci	r29, 0xFF	; 255
    4cc8:	48 81       	ld	r20, Y
    4cca:	c0 5a       	subi	r28, 0xA0	; 160
    4ccc:	d0 40       	sbci	r29, 0x00	; 0
    4cce:	84 0f       	add	r24, r20
    4cd0:	c0 56       	subi	r28, 0x60	; 96
    4cd2:	df 4f       	sbci	r29, 0xFF	; 255
    4cd4:	88 83       	st	Y, r24
    4cd6:	c0 5a       	subi	r28, 0xA0	; 160
    4cd8:	d0 40       	sbci	r29, 0x00	; 0
    4cda:	c7 56       	subi	r28, 0x67	; 103
    4cdc:	df 4f       	sbci	r29, 0xFF	; 255
    4cde:	58 81       	ld	r21, Y
    4ce0:	c9 59       	subi	r28, 0x99	; 153
    4ce2:	d0 40       	sbci	r29, 0x00	; 0
    4ce4:	59 83       	std	Y+1, r21	; 0x01
    4ce6:	c6 56       	subi	r28, 0x66	; 102
    4ce8:	df 4f       	sbci	r29, 0xFF	; 255
    4cea:	68 81       	ld	r22, Y
    4cec:	ca 59       	subi	r28, 0x9A	; 154
    4cee:	d0 40       	sbci	r29, 0x00	; 0
    4cf0:	6a 83       	std	Y+2, r22	; 0x02
    4cf2:	c5 56       	subi	r28, 0x65	; 101
    4cf4:	df 4f       	sbci	r29, 0xFF	; 255
    4cf6:	78 81       	ld	r23, Y
    4cf8:	cb 59       	subi	r28, 0x9B	; 155
    4cfa:	d0 40       	sbci	r29, 0x00	; 0
    4cfc:	7b 83       	std	Y+3, r23	; 0x03
    4cfe:	c4 56       	subi	r28, 0x64	; 100
    4d00:	df 4f       	sbci	r29, 0xFF	; 255
    4d02:	88 81       	ld	r24, Y
    4d04:	cc 59       	subi	r28, 0x9C	; 156
    4d06:	d0 40       	sbci	r29, 0x00	; 0
    4d08:	8c 83       	std	Y+4, r24	; 0x04
    4d0a:	c3 56       	subi	r28, 0x63	; 99
    4d0c:	df 4f       	sbci	r29, 0xFF	; 255
    4d0e:	98 81       	ld	r25, Y
    4d10:	cd 59       	subi	r28, 0x9D	; 157
    4d12:	d0 40       	sbci	r29, 0x00	; 0
    4d14:	9d 83       	std	Y+5, r25	; 0x05
    4d16:	c2 56       	subi	r28, 0x62	; 98
    4d18:	df 4f       	sbci	r29, 0xFF	; 255
    4d1a:	08 81       	ld	r16, Y
    4d1c:	ce 59       	subi	r28, 0x9E	; 158
    4d1e:	d0 40       	sbci	r29, 0x00	; 0
    4d20:	0e 83       	std	Y+6, r16	; 0x06
    4d22:	c1 56       	subi	r28, 0x61	; 97
    4d24:	df 4f       	sbci	r29, 0xFF	; 255
    4d26:	18 81       	ld	r17, Y
    4d28:	cf 59       	subi	r28, 0x9F	; 159
    4d2a:	d0 40       	sbci	r29, 0x00	; 0
    4d2c:	1f 83       	std	Y+7, r17	; 0x07
    4d2e:	c0 56       	subi	r28, 0x60	; 96
    4d30:	df 4f       	sbci	r29, 0xFF	; 255
    4d32:	28 81       	ld	r18, Y
    4d34:	c0 5a       	subi	r28, 0xA0	; 160
    4d36:	d0 40       	sbci	r29, 0x00	; 0
    4d38:	28 87       	std	Y+8, r18	; 0x08
	  desiredTime+=(microSecond);
    4d3a:	89 a5       	ldd	r24, Y+41	; 0x29
    4d3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d3e:	8c 01       	movw	r16, r24
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	40 e0       	ldi	r20, 0x00	; 0
    4d46:	50 e0       	ldi	r21, 0x00	; 0
    4d48:	60 e0       	ldi	r22, 0x00	; 0
    4d4a:	70 e0       	ldi	r23, 0x00	; 0
    4d4c:	0b a7       	std	Y+43, r16	; 0x2b
    4d4e:	1c a7       	std	Y+44, r17	; 0x2c
    4d50:	2d a7       	std	Y+45, r18	; 0x2d
    4d52:	3e a7       	std	Y+46, r19	; 0x2e
    4d54:	4f a7       	std	Y+47, r20	; 0x2f
    4d56:	58 ab       	std	Y+48, r21	; 0x30
    4d58:	69 ab       	std	Y+49, r22	; 0x31
    4d5a:	7a ab       	std	Y+50, r23	; 0x32
    4d5c:	19 81       	ldd	r17, Y+1	; 0x01
    4d5e:	cc 54       	subi	r28, 0x4C	; 76
    4d60:	df 4f       	sbci	r29, 0xFF	; 255
    4d62:	18 83       	st	Y, r17
    4d64:	c4 5b       	subi	r28, 0xB4	; 180
    4d66:	d0 40       	sbci	r29, 0x00	; 0
    4d68:	2a 81       	ldd	r18, Y+2	; 0x02
    4d6a:	cb 54       	subi	r28, 0x4B	; 75
    4d6c:	df 4f       	sbci	r29, 0xFF	; 255
    4d6e:	28 83       	st	Y, r18
    4d70:	c5 5b       	subi	r28, 0xB5	; 181
    4d72:	d0 40       	sbci	r29, 0x00	; 0
    4d74:	3b 81       	ldd	r19, Y+3	; 0x03
    4d76:	ca 54       	subi	r28, 0x4A	; 74
    4d78:	df 4f       	sbci	r29, 0xFF	; 255
    4d7a:	38 83       	st	Y, r19
    4d7c:	c6 5b       	subi	r28, 0xB6	; 182
    4d7e:	d0 40       	sbci	r29, 0x00	; 0
    4d80:	4c 81       	ldd	r20, Y+4	; 0x04
    4d82:	c9 54       	subi	r28, 0x49	; 73
    4d84:	df 4f       	sbci	r29, 0xFF	; 255
    4d86:	48 83       	st	Y, r20
    4d88:	c7 5b       	subi	r28, 0xB7	; 183
    4d8a:	d0 40       	sbci	r29, 0x00	; 0
    4d8c:	5d 81       	ldd	r21, Y+5	; 0x05
    4d8e:	c8 54       	subi	r28, 0x48	; 72
    4d90:	df 4f       	sbci	r29, 0xFF	; 255
    4d92:	58 83       	st	Y, r21
    4d94:	c8 5b       	subi	r28, 0xB8	; 184
    4d96:	d0 40       	sbci	r29, 0x00	; 0
    4d98:	6e 81       	ldd	r22, Y+6	; 0x06
    4d9a:	c7 54       	subi	r28, 0x47	; 71
    4d9c:	df 4f       	sbci	r29, 0xFF	; 255
    4d9e:	68 83       	st	Y, r22
    4da0:	c9 5b       	subi	r28, 0xB9	; 185
    4da2:	d0 40       	sbci	r29, 0x00	; 0
    4da4:	7f 81       	ldd	r23, Y+7	; 0x07
    4da6:	c6 54       	subi	r28, 0x46	; 70
    4da8:	df 4f       	sbci	r29, 0xFF	; 255
    4daa:	78 83       	st	Y, r23
    4dac:	ca 5b       	subi	r28, 0xBA	; 186
    4dae:	d0 40       	sbci	r29, 0x00	; 0
    4db0:	88 85       	ldd	r24, Y+8	; 0x08
    4db2:	c5 54       	subi	r28, 0x45	; 69
    4db4:	df 4f       	sbci	r29, 0xFF	; 255
    4db6:	88 83       	st	Y, r24
    4db8:	cb 5b       	subi	r28, 0xBB	; 187
    4dba:	d0 40       	sbci	r29, 0x00	; 0
    4dbc:	cc 54       	subi	r28, 0x4C	; 76
    4dbe:	df 4f       	sbci	r29, 0xFF	; 255
    4dc0:	98 81       	ld	r25, Y
    4dc2:	c4 5b       	subi	r28, 0xB4	; 180
    4dc4:	d0 40       	sbci	r29, 0x00	; 0
    4dc6:	0b a5       	ldd	r16, Y+43	; 0x2b
    4dc8:	90 0f       	add	r25, r16
    4dca:	c4 54       	subi	r28, 0x44	; 68
    4dcc:	df 4f       	sbci	r29, 0xFF	; 255
    4dce:	98 83       	st	Y, r25
    4dd0:	cc 5b       	subi	r28, 0xBC	; 188
    4dd2:	d0 40       	sbci	r29, 0x00	; 0
    4dd4:	11 e0       	ldi	r17, 0x01	; 1
    4dd6:	cc 53       	subi	r28, 0x3C	; 60
    4dd8:	df 4f       	sbci	r29, 0xFF	; 255
    4dda:	18 83       	st	Y, r17
    4ddc:	c4 5c       	subi	r28, 0xC4	; 196
    4dde:	d0 40       	sbci	r29, 0x00	; 0
    4de0:	c4 54       	subi	r28, 0x44	; 68
    4de2:	df 4f       	sbci	r29, 0xFF	; 255
    4de4:	28 81       	ld	r18, Y
    4de6:	cc 5b       	subi	r28, 0xBC	; 188
    4de8:	d0 40       	sbci	r29, 0x00	; 0
    4dea:	cc 54       	subi	r28, 0x4C	; 76
    4dec:	df 4f       	sbci	r29, 0xFF	; 255
    4dee:	38 81       	ld	r19, Y
    4df0:	c4 5b       	subi	r28, 0xB4	; 180
    4df2:	d0 40       	sbci	r29, 0x00	; 0
    4df4:	23 17       	cp	r18, r19
    4df6:	28 f0       	brcs	.+10     	; 0x4e02 <MTMR_u8Timer0NormalModeTimeMapping+0x117c>
    4df8:	cc 53       	subi	r28, 0x3C	; 60
    4dfa:	df 4f       	sbci	r29, 0xFF	; 255
    4dfc:	18 82       	st	Y, r1
    4dfe:	c4 5c       	subi	r28, 0xC4	; 196
    4e00:	d0 40       	sbci	r29, 0x00	; 0
    4e02:	cb 54       	subi	r28, 0x4B	; 75
    4e04:	df 4f       	sbci	r29, 0xFF	; 255
    4e06:	48 81       	ld	r20, Y
    4e08:	c5 5b       	subi	r28, 0xB5	; 181
    4e0a:	d0 40       	sbci	r29, 0x00	; 0
    4e0c:	5c a5       	ldd	r21, Y+44	; 0x2c
    4e0e:	45 0f       	add	r20, r21
    4e10:	c3 54       	subi	r28, 0x43	; 67
    4e12:	df 4f       	sbci	r29, 0xFF	; 255
    4e14:	48 83       	st	Y, r20
    4e16:	cd 5b       	subi	r28, 0xBD	; 189
    4e18:	d0 40       	sbci	r29, 0x00	; 0
    4e1a:	61 e0       	ldi	r22, 0x01	; 1
    4e1c:	cb 53       	subi	r28, 0x3B	; 59
    4e1e:	df 4f       	sbci	r29, 0xFF	; 255
    4e20:	68 83       	st	Y, r22
    4e22:	c5 5c       	subi	r28, 0xC5	; 197
    4e24:	d0 40       	sbci	r29, 0x00	; 0
    4e26:	c3 54       	subi	r28, 0x43	; 67
    4e28:	df 4f       	sbci	r29, 0xFF	; 255
    4e2a:	78 81       	ld	r23, Y
    4e2c:	cd 5b       	subi	r28, 0xBD	; 189
    4e2e:	d0 40       	sbci	r29, 0x00	; 0
    4e30:	cb 54       	subi	r28, 0x4B	; 75
    4e32:	df 4f       	sbci	r29, 0xFF	; 255
    4e34:	88 81       	ld	r24, Y
    4e36:	c5 5b       	subi	r28, 0xB5	; 181
    4e38:	d0 40       	sbci	r29, 0x00	; 0
    4e3a:	78 17       	cp	r23, r24
    4e3c:	28 f0       	brcs	.+10     	; 0x4e48 <MTMR_u8Timer0NormalModeTimeMapping+0x11c2>
    4e3e:	cb 53       	subi	r28, 0x3B	; 59
    4e40:	df 4f       	sbci	r29, 0xFF	; 255
    4e42:	18 82       	st	Y, r1
    4e44:	c5 5c       	subi	r28, 0xC5	; 197
    4e46:	d0 40       	sbci	r29, 0x00	; 0
    4e48:	cc 53       	subi	r28, 0x3C	; 60
    4e4a:	df 4f       	sbci	r29, 0xFF	; 255
    4e4c:	98 81       	ld	r25, Y
    4e4e:	c4 5c       	subi	r28, 0xC4	; 196
    4e50:	d0 40       	sbci	r29, 0x00	; 0
    4e52:	c3 54       	subi	r28, 0x43	; 67
    4e54:	df 4f       	sbci	r29, 0xFF	; 255
    4e56:	08 81       	ld	r16, Y
    4e58:	cd 5b       	subi	r28, 0xBD	; 189
    4e5a:	d0 40       	sbci	r29, 0x00	; 0
    4e5c:	90 0f       	add	r25, r16
    4e5e:	ca 53       	subi	r28, 0x3A	; 58
    4e60:	df 4f       	sbci	r29, 0xFF	; 255
    4e62:	98 83       	st	Y, r25
    4e64:	c6 5c       	subi	r28, 0xC6	; 198
    4e66:	d0 40       	sbci	r29, 0x00	; 0
    4e68:	11 e0       	ldi	r17, 0x01	; 1
    4e6a:	c9 53       	subi	r28, 0x39	; 57
    4e6c:	df 4f       	sbci	r29, 0xFF	; 255
    4e6e:	18 83       	st	Y, r17
    4e70:	c7 5c       	subi	r28, 0xC7	; 199
    4e72:	d0 40       	sbci	r29, 0x00	; 0
    4e74:	ca 53       	subi	r28, 0x3A	; 58
    4e76:	df 4f       	sbci	r29, 0xFF	; 255
    4e78:	28 81       	ld	r18, Y
    4e7a:	c6 5c       	subi	r28, 0xC6	; 198
    4e7c:	d0 40       	sbci	r29, 0x00	; 0
    4e7e:	c3 54       	subi	r28, 0x43	; 67
    4e80:	df 4f       	sbci	r29, 0xFF	; 255
    4e82:	38 81       	ld	r19, Y
    4e84:	cd 5b       	subi	r28, 0xBD	; 189
    4e86:	d0 40       	sbci	r29, 0x00	; 0
    4e88:	23 17       	cp	r18, r19
    4e8a:	28 f0       	brcs	.+10     	; 0x4e96 <MTMR_u8Timer0NormalModeTimeMapping+0x1210>
    4e8c:	c9 53       	subi	r28, 0x39	; 57
    4e8e:	df 4f       	sbci	r29, 0xFF	; 255
    4e90:	18 82       	st	Y, r1
    4e92:	c7 5c       	subi	r28, 0xC7	; 199
    4e94:	d0 40       	sbci	r29, 0x00	; 0
    4e96:	cb 53       	subi	r28, 0x3B	; 59
    4e98:	df 4f       	sbci	r29, 0xFF	; 255
    4e9a:	48 81       	ld	r20, Y
    4e9c:	c5 5c       	subi	r28, 0xC5	; 197
    4e9e:	d0 40       	sbci	r29, 0x00	; 0
    4ea0:	c9 53       	subi	r28, 0x39	; 57
    4ea2:	df 4f       	sbci	r29, 0xFF	; 255
    4ea4:	58 81       	ld	r21, Y
    4ea6:	c7 5c       	subi	r28, 0xC7	; 199
    4ea8:	d0 40       	sbci	r29, 0x00	; 0
    4eaa:	45 2b       	or	r20, r21
    4eac:	cb 53       	subi	r28, 0x3B	; 59
    4eae:	df 4f       	sbci	r29, 0xFF	; 255
    4eb0:	48 83       	st	Y, r20
    4eb2:	c5 5c       	subi	r28, 0xC5	; 197
    4eb4:	d0 40       	sbci	r29, 0x00	; 0
    4eb6:	ca 53       	subi	r28, 0x3A	; 58
    4eb8:	df 4f       	sbci	r29, 0xFF	; 255
    4eba:	68 81       	ld	r22, Y
    4ebc:	c6 5c       	subi	r28, 0xC6	; 198
    4ebe:	d0 40       	sbci	r29, 0x00	; 0
    4ec0:	c3 54       	subi	r28, 0x43	; 67
    4ec2:	df 4f       	sbci	r29, 0xFF	; 255
    4ec4:	68 83       	st	Y, r22
    4ec6:	cd 5b       	subi	r28, 0xBD	; 189
    4ec8:	d0 40       	sbci	r29, 0x00	; 0
    4eca:	ca 54       	subi	r28, 0x4A	; 74
    4ecc:	df 4f       	sbci	r29, 0xFF	; 255
    4ece:	78 81       	ld	r23, Y
    4ed0:	c6 5b       	subi	r28, 0xB6	; 182
    4ed2:	d0 40       	sbci	r29, 0x00	; 0
    4ed4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ed6:	78 0f       	add	r23, r24
    4ed8:	c2 54       	subi	r28, 0x42	; 66
    4eda:	df 4f       	sbci	r29, 0xFF	; 255
    4edc:	78 83       	st	Y, r23
    4ede:	ce 5b       	subi	r28, 0xBE	; 190
    4ee0:	d0 40       	sbci	r29, 0x00	; 0
    4ee2:	91 e0       	ldi	r25, 0x01	; 1
    4ee4:	c8 53       	subi	r28, 0x38	; 56
    4ee6:	df 4f       	sbci	r29, 0xFF	; 255
    4ee8:	98 83       	st	Y, r25
    4eea:	c8 5c       	subi	r28, 0xC8	; 200
    4eec:	d0 40       	sbci	r29, 0x00	; 0
    4eee:	c2 54       	subi	r28, 0x42	; 66
    4ef0:	df 4f       	sbci	r29, 0xFF	; 255
    4ef2:	08 81       	ld	r16, Y
    4ef4:	ce 5b       	subi	r28, 0xBE	; 190
    4ef6:	d0 40       	sbci	r29, 0x00	; 0
    4ef8:	ca 54       	subi	r28, 0x4A	; 74
    4efa:	df 4f       	sbci	r29, 0xFF	; 255
    4efc:	18 81       	ld	r17, Y
    4efe:	c6 5b       	subi	r28, 0xB6	; 182
    4f00:	d0 40       	sbci	r29, 0x00	; 0
    4f02:	01 17       	cp	r16, r17
    4f04:	28 f0       	brcs	.+10     	; 0x4f10 <MTMR_u8Timer0NormalModeTimeMapping+0x128a>
    4f06:	c8 53       	subi	r28, 0x38	; 56
    4f08:	df 4f       	sbci	r29, 0xFF	; 255
    4f0a:	18 82       	st	Y, r1
    4f0c:	c8 5c       	subi	r28, 0xC8	; 200
    4f0e:	d0 40       	sbci	r29, 0x00	; 0
    4f10:	cb 53       	subi	r28, 0x3B	; 59
    4f12:	df 4f       	sbci	r29, 0xFF	; 255
    4f14:	28 81       	ld	r18, Y
    4f16:	c5 5c       	subi	r28, 0xC5	; 197
    4f18:	d0 40       	sbci	r29, 0x00	; 0
    4f1a:	c2 54       	subi	r28, 0x42	; 66
    4f1c:	df 4f       	sbci	r29, 0xFF	; 255
    4f1e:	38 81       	ld	r19, Y
    4f20:	ce 5b       	subi	r28, 0xBE	; 190
    4f22:	d0 40       	sbci	r29, 0x00	; 0
    4f24:	23 0f       	add	r18, r19
    4f26:	c7 53       	subi	r28, 0x37	; 55
    4f28:	df 4f       	sbci	r29, 0xFF	; 255
    4f2a:	28 83       	st	Y, r18
    4f2c:	c9 5c       	subi	r28, 0xC9	; 201
    4f2e:	d0 40       	sbci	r29, 0x00	; 0
    4f30:	41 e0       	ldi	r20, 0x01	; 1
    4f32:	c6 53       	subi	r28, 0x36	; 54
    4f34:	df 4f       	sbci	r29, 0xFF	; 255
    4f36:	48 83       	st	Y, r20
    4f38:	ca 5c       	subi	r28, 0xCA	; 202
    4f3a:	d0 40       	sbci	r29, 0x00	; 0
    4f3c:	c7 53       	subi	r28, 0x37	; 55
    4f3e:	df 4f       	sbci	r29, 0xFF	; 255
    4f40:	58 81       	ld	r21, Y
    4f42:	c9 5c       	subi	r28, 0xC9	; 201
    4f44:	d0 40       	sbci	r29, 0x00	; 0
    4f46:	c2 54       	subi	r28, 0x42	; 66
    4f48:	df 4f       	sbci	r29, 0xFF	; 255
    4f4a:	68 81       	ld	r22, Y
    4f4c:	ce 5b       	subi	r28, 0xBE	; 190
    4f4e:	d0 40       	sbci	r29, 0x00	; 0
    4f50:	56 17       	cp	r21, r22
    4f52:	28 f0       	brcs	.+10     	; 0x4f5e <MTMR_u8Timer0NormalModeTimeMapping+0x12d8>
    4f54:	c6 53       	subi	r28, 0x36	; 54
    4f56:	df 4f       	sbci	r29, 0xFF	; 255
    4f58:	18 82       	st	Y, r1
    4f5a:	ca 5c       	subi	r28, 0xCA	; 202
    4f5c:	d0 40       	sbci	r29, 0x00	; 0
    4f5e:	c8 53       	subi	r28, 0x38	; 56
    4f60:	df 4f       	sbci	r29, 0xFF	; 255
    4f62:	78 81       	ld	r23, Y
    4f64:	c8 5c       	subi	r28, 0xC8	; 200
    4f66:	d0 40       	sbci	r29, 0x00	; 0
    4f68:	c6 53       	subi	r28, 0x36	; 54
    4f6a:	df 4f       	sbci	r29, 0xFF	; 255
    4f6c:	88 81       	ld	r24, Y
    4f6e:	ca 5c       	subi	r28, 0xCA	; 202
    4f70:	d0 40       	sbci	r29, 0x00	; 0
    4f72:	78 2b       	or	r23, r24
    4f74:	c8 53       	subi	r28, 0x38	; 56
    4f76:	df 4f       	sbci	r29, 0xFF	; 255
    4f78:	78 83       	st	Y, r23
    4f7a:	c8 5c       	subi	r28, 0xC8	; 200
    4f7c:	d0 40       	sbci	r29, 0x00	; 0
    4f7e:	c7 53       	subi	r28, 0x37	; 55
    4f80:	df 4f       	sbci	r29, 0xFF	; 255
    4f82:	98 81       	ld	r25, Y
    4f84:	c9 5c       	subi	r28, 0xC9	; 201
    4f86:	d0 40       	sbci	r29, 0x00	; 0
    4f88:	c2 54       	subi	r28, 0x42	; 66
    4f8a:	df 4f       	sbci	r29, 0xFF	; 255
    4f8c:	98 83       	st	Y, r25
    4f8e:	ce 5b       	subi	r28, 0xBE	; 190
    4f90:	d0 40       	sbci	r29, 0x00	; 0
    4f92:	c9 54       	subi	r28, 0x49	; 73
    4f94:	df 4f       	sbci	r29, 0xFF	; 255
    4f96:	08 81       	ld	r16, Y
    4f98:	c7 5b       	subi	r28, 0xB7	; 183
    4f9a:	d0 40       	sbci	r29, 0x00	; 0
    4f9c:	1e a5       	ldd	r17, Y+46	; 0x2e
    4f9e:	01 0f       	add	r16, r17
    4fa0:	c1 54       	subi	r28, 0x41	; 65
    4fa2:	df 4f       	sbci	r29, 0xFF	; 255
    4fa4:	08 83       	st	Y, r16
    4fa6:	cf 5b       	subi	r28, 0xBF	; 191
    4fa8:	d0 40       	sbci	r29, 0x00	; 0
    4faa:	21 e0       	ldi	r18, 0x01	; 1
    4fac:	c5 53       	subi	r28, 0x35	; 53
    4fae:	df 4f       	sbci	r29, 0xFF	; 255
    4fb0:	28 83       	st	Y, r18
    4fb2:	cb 5c       	subi	r28, 0xCB	; 203
    4fb4:	d0 40       	sbci	r29, 0x00	; 0
    4fb6:	c1 54       	subi	r28, 0x41	; 65
    4fb8:	df 4f       	sbci	r29, 0xFF	; 255
    4fba:	38 81       	ld	r19, Y
    4fbc:	cf 5b       	subi	r28, 0xBF	; 191
    4fbe:	d0 40       	sbci	r29, 0x00	; 0
    4fc0:	c9 54       	subi	r28, 0x49	; 73
    4fc2:	df 4f       	sbci	r29, 0xFF	; 255
    4fc4:	48 81       	ld	r20, Y
    4fc6:	c7 5b       	subi	r28, 0xB7	; 183
    4fc8:	d0 40       	sbci	r29, 0x00	; 0
    4fca:	34 17       	cp	r19, r20
    4fcc:	28 f0       	brcs	.+10     	; 0x4fd8 <MTMR_u8Timer0NormalModeTimeMapping+0x1352>
    4fce:	c5 53       	subi	r28, 0x35	; 53
    4fd0:	df 4f       	sbci	r29, 0xFF	; 255
    4fd2:	18 82       	st	Y, r1
    4fd4:	cb 5c       	subi	r28, 0xCB	; 203
    4fd6:	d0 40       	sbci	r29, 0x00	; 0
    4fd8:	c8 53       	subi	r28, 0x38	; 56
    4fda:	df 4f       	sbci	r29, 0xFF	; 255
    4fdc:	58 81       	ld	r21, Y
    4fde:	c8 5c       	subi	r28, 0xC8	; 200
    4fe0:	d0 40       	sbci	r29, 0x00	; 0
    4fe2:	c1 54       	subi	r28, 0x41	; 65
    4fe4:	df 4f       	sbci	r29, 0xFF	; 255
    4fe6:	68 81       	ld	r22, Y
    4fe8:	cf 5b       	subi	r28, 0xBF	; 191
    4fea:	d0 40       	sbci	r29, 0x00	; 0
    4fec:	56 0f       	add	r21, r22
    4fee:	c4 53       	subi	r28, 0x34	; 52
    4ff0:	df 4f       	sbci	r29, 0xFF	; 255
    4ff2:	58 83       	st	Y, r21
    4ff4:	cc 5c       	subi	r28, 0xCC	; 204
    4ff6:	d0 40       	sbci	r29, 0x00	; 0
    4ff8:	71 e0       	ldi	r23, 0x01	; 1
    4ffa:	c3 53       	subi	r28, 0x33	; 51
    4ffc:	df 4f       	sbci	r29, 0xFF	; 255
    4ffe:	78 83       	st	Y, r23
    5000:	cd 5c       	subi	r28, 0xCD	; 205
    5002:	d0 40       	sbci	r29, 0x00	; 0
    5004:	c4 53       	subi	r28, 0x34	; 52
    5006:	df 4f       	sbci	r29, 0xFF	; 255
    5008:	88 81       	ld	r24, Y
    500a:	cc 5c       	subi	r28, 0xCC	; 204
    500c:	d0 40       	sbci	r29, 0x00	; 0
    500e:	c1 54       	subi	r28, 0x41	; 65
    5010:	df 4f       	sbci	r29, 0xFF	; 255
    5012:	98 81       	ld	r25, Y
    5014:	cf 5b       	subi	r28, 0xBF	; 191
    5016:	d0 40       	sbci	r29, 0x00	; 0
    5018:	89 17       	cp	r24, r25
    501a:	28 f0       	brcs	.+10     	; 0x5026 <MTMR_u8Timer0NormalModeTimeMapping+0x13a0>
    501c:	c3 53       	subi	r28, 0x33	; 51
    501e:	df 4f       	sbci	r29, 0xFF	; 255
    5020:	18 82       	st	Y, r1
    5022:	cd 5c       	subi	r28, 0xCD	; 205
    5024:	d0 40       	sbci	r29, 0x00	; 0
    5026:	c5 53       	subi	r28, 0x35	; 53
    5028:	df 4f       	sbci	r29, 0xFF	; 255
    502a:	08 81       	ld	r16, Y
    502c:	cb 5c       	subi	r28, 0xCB	; 203
    502e:	d0 40       	sbci	r29, 0x00	; 0
    5030:	c3 53       	subi	r28, 0x33	; 51
    5032:	df 4f       	sbci	r29, 0xFF	; 255
    5034:	18 81       	ld	r17, Y
    5036:	cd 5c       	subi	r28, 0xCD	; 205
    5038:	d0 40       	sbci	r29, 0x00	; 0
    503a:	01 2b       	or	r16, r17
    503c:	c5 53       	subi	r28, 0x35	; 53
    503e:	df 4f       	sbci	r29, 0xFF	; 255
    5040:	08 83       	st	Y, r16
    5042:	cb 5c       	subi	r28, 0xCB	; 203
    5044:	d0 40       	sbci	r29, 0x00	; 0
    5046:	c4 53       	subi	r28, 0x34	; 52
    5048:	df 4f       	sbci	r29, 0xFF	; 255
    504a:	28 81       	ld	r18, Y
    504c:	cc 5c       	subi	r28, 0xCC	; 204
    504e:	d0 40       	sbci	r29, 0x00	; 0
    5050:	c1 54       	subi	r28, 0x41	; 65
    5052:	df 4f       	sbci	r29, 0xFF	; 255
    5054:	28 83       	st	Y, r18
    5056:	cf 5b       	subi	r28, 0xBF	; 191
    5058:	d0 40       	sbci	r29, 0x00	; 0
    505a:	c8 54       	subi	r28, 0x48	; 72
    505c:	df 4f       	sbci	r29, 0xFF	; 255
    505e:	38 81       	ld	r19, Y
    5060:	c8 5b       	subi	r28, 0xB8	; 184
    5062:	d0 40       	sbci	r29, 0x00	; 0
    5064:	4f a5       	ldd	r20, Y+47	; 0x2f
    5066:	34 0f       	add	r19, r20
    5068:	c0 54       	subi	r28, 0x40	; 64
    506a:	df 4f       	sbci	r29, 0xFF	; 255
    506c:	38 83       	st	Y, r19
    506e:	c0 5c       	subi	r28, 0xC0	; 192
    5070:	d0 40       	sbci	r29, 0x00	; 0
    5072:	51 e0       	ldi	r21, 0x01	; 1
    5074:	c2 53       	subi	r28, 0x32	; 50
    5076:	df 4f       	sbci	r29, 0xFF	; 255
    5078:	58 83       	st	Y, r21
    507a:	ce 5c       	subi	r28, 0xCE	; 206
    507c:	d0 40       	sbci	r29, 0x00	; 0
    507e:	c0 54       	subi	r28, 0x40	; 64
    5080:	df 4f       	sbci	r29, 0xFF	; 255
    5082:	68 81       	ld	r22, Y
    5084:	c0 5c       	subi	r28, 0xC0	; 192
    5086:	d0 40       	sbci	r29, 0x00	; 0
    5088:	c8 54       	subi	r28, 0x48	; 72
    508a:	df 4f       	sbci	r29, 0xFF	; 255
    508c:	78 81       	ld	r23, Y
    508e:	c8 5b       	subi	r28, 0xB8	; 184
    5090:	d0 40       	sbci	r29, 0x00	; 0
    5092:	67 17       	cp	r22, r23
    5094:	28 f0       	brcs	.+10     	; 0x50a0 <MTMR_u8Timer0NormalModeTimeMapping+0x141a>
    5096:	c2 53       	subi	r28, 0x32	; 50
    5098:	df 4f       	sbci	r29, 0xFF	; 255
    509a:	18 82       	st	Y, r1
    509c:	ce 5c       	subi	r28, 0xCE	; 206
    509e:	d0 40       	sbci	r29, 0x00	; 0
    50a0:	c5 53       	subi	r28, 0x35	; 53
    50a2:	df 4f       	sbci	r29, 0xFF	; 255
    50a4:	88 81       	ld	r24, Y
    50a6:	cb 5c       	subi	r28, 0xCB	; 203
    50a8:	d0 40       	sbci	r29, 0x00	; 0
    50aa:	c0 54       	subi	r28, 0x40	; 64
    50ac:	df 4f       	sbci	r29, 0xFF	; 255
    50ae:	98 81       	ld	r25, Y
    50b0:	c0 5c       	subi	r28, 0xC0	; 192
    50b2:	d0 40       	sbci	r29, 0x00	; 0
    50b4:	89 0f       	add	r24, r25
    50b6:	c1 53       	subi	r28, 0x31	; 49
    50b8:	df 4f       	sbci	r29, 0xFF	; 255
    50ba:	88 83       	st	Y, r24
    50bc:	cf 5c       	subi	r28, 0xCF	; 207
    50be:	d0 40       	sbci	r29, 0x00	; 0
    50c0:	01 e0       	ldi	r16, 0x01	; 1
    50c2:	c0 53       	subi	r28, 0x30	; 48
    50c4:	df 4f       	sbci	r29, 0xFF	; 255
    50c6:	08 83       	st	Y, r16
    50c8:	c0 5d       	subi	r28, 0xD0	; 208
    50ca:	d0 40       	sbci	r29, 0x00	; 0
    50cc:	c1 53       	subi	r28, 0x31	; 49
    50ce:	df 4f       	sbci	r29, 0xFF	; 255
    50d0:	18 81       	ld	r17, Y
    50d2:	cf 5c       	subi	r28, 0xCF	; 207
    50d4:	d0 40       	sbci	r29, 0x00	; 0
    50d6:	c0 54       	subi	r28, 0x40	; 64
    50d8:	df 4f       	sbci	r29, 0xFF	; 255
    50da:	28 81       	ld	r18, Y
    50dc:	c0 5c       	subi	r28, 0xC0	; 192
    50de:	d0 40       	sbci	r29, 0x00	; 0
    50e0:	12 17       	cp	r17, r18
    50e2:	28 f0       	brcs	.+10     	; 0x50ee <MTMR_u8Timer0NormalModeTimeMapping+0x1468>
    50e4:	c0 53       	subi	r28, 0x30	; 48
    50e6:	df 4f       	sbci	r29, 0xFF	; 255
    50e8:	18 82       	st	Y, r1
    50ea:	c0 5d       	subi	r28, 0xD0	; 208
    50ec:	d0 40       	sbci	r29, 0x00	; 0
    50ee:	c2 53       	subi	r28, 0x32	; 50
    50f0:	df 4f       	sbci	r29, 0xFF	; 255
    50f2:	38 81       	ld	r19, Y
    50f4:	ce 5c       	subi	r28, 0xCE	; 206
    50f6:	d0 40       	sbci	r29, 0x00	; 0
    50f8:	c0 53       	subi	r28, 0x30	; 48
    50fa:	df 4f       	sbci	r29, 0xFF	; 255
    50fc:	48 81       	ld	r20, Y
    50fe:	c0 5d       	subi	r28, 0xD0	; 208
    5100:	d0 40       	sbci	r29, 0x00	; 0
    5102:	34 2b       	or	r19, r20
    5104:	c2 53       	subi	r28, 0x32	; 50
    5106:	df 4f       	sbci	r29, 0xFF	; 255
    5108:	38 83       	st	Y, r19
    510a:	ce 5c       	subi	r28, 0xCE	; 206
    510c:	d0 40       	sbci	r29, 0x00	; 0
    510e:	c1 53       	subi	r28, 0x31	; 49
    5110:	df 4f       	sbci	r29, 0xFF	; 255
    5112:	58 81       	ld	r21, Y
    5114:	cf 5c       	subi	r28, 0xCF	; 207
    5116:	d0 40       	sbci	r29, 0x00	; 0
    5118:	c0 54       	subi	r28, 0x40	; 64
    511a:	df 4f       	sbci	r29, 0xFF	; 255
    511c:	58 83       	st	Y, r21
    511e:	c0 5c       	subi	r28, 0xC0	; 192
    5120:	d0 40       	sbci	r29, 0x00	; 0
    5122:	c7 54       	subi	r28, 0x47	; 71
    5124:	df 4f       	sbci	r29, 0xFF	; 255
    5126:	68 81       	ld	r22, Y
    5128:	c9 5b       	subi	r28, 0xB9	; 185
    512a:	d0 40       	sbci	r29, 0x00	; 0
    512c:	78 a9       	ldd	r23, Y+48	; 0x30
    512e:	67 0f       	add	r22, r23
    5130:	cf 53       	subi	r28, 0x3F	; 63
    5132:	df 4f       	sbci	r29, 0xFF	; 255
    5134:	68 83       	st	Y, r22
    5136:	c1 5c       	subi	r28, 0xC1	; 193
    5138:	d0 40       	sbci	r29, 0x00	; 0
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	cf 52       	subi	r28, 0x2F	; 47
    513e:	df 4f       	sbci	r29, 0xFF	; 255
    5140:	88 83       	st	Y, r24
    5142:	c1 5d       	subi	r28, 0xD1	; 209
    5144:	d0 40       	sbci	r29, 0x00	; 0
    5146:	cf 53       	subi	r28, 0x3F	; 63
    5148:	df 4f       	sbci	r29, 0xFF	; 255
    514a:	98 81       	ld	r25, Y
    514c:	c1 5c       	subi	r28, 0xC1	; 193
    514e:	d0 40       	sbci	r29, 0x00	; 0
    5150:	c7 54       	subi	r28, 0x47	; 71
    5152:	df 4f       	sbci	r29, 0xFF	; 255
    5154:	08 81       	ld	r16, Y
    5156:	c9 5b       	subi	r28, 0xB9	; 185
    5158:	d0 40       	sbci	r29, 0x00	; 0
    515a:	90 17       	cp	r25, r16
    515c:	28 f0       	brcs	.+10     	; 0x5168 <MTMR_u8Timer0NormalModeTimeMapping+0x14e2>
    515e:	cf 52       	subi	r28, 0x2F	; 47
    5160:	df 4f       	sbci	r29, 0xFF	; 255
    5162:	18 82       	st	Y, r1
    5164:	c1 5d       	subi	r28, 0xD1	; 209
    5166:	d0 40       	sbci	r29, 0x00	; 0
    5168:	c2 53       	subi	r28, 0x32	; 50
    516a:	df 4f       	sbci	r29, 0xFF	; 255
    516c:	18 81       	ld	r17, Y
    516e:	ce 5c       	subi	r28, 0xCE	; 206
    5170:	d0 40       	sbci	r29, 0x00	; 0
    5172:	cf 53       	subi	r28, 0x3F	; 63
    5174:	df 4f       	sbci	r29, 0xFF	; 255
    5176:	28 81       	ld	r18, Y
    5178:	c1 5c       	subi	r28, 0xC1	; 193
    517a:	d0 40       	sbci	r29, 0x00	; 0
    517c:	12 0f       	add	r17, r18
    517e:	ce 52       	subi	r28, 0x2E	; 46
    5180:	df 4f       	sbci	r29, 0xFF	; 255
    5182:	18 83       	st	Y, r17
    5184:	c2 5d       	subi	r28, 0xD2	; 210
    5186:	d0 40       	sbci	r29, 0x00	; 0
    5188:	31 e0       	ldi	r19, 0x01	; 1
    518a:	cd 52       	subi	r28, 0x2D	; 45
    518c:	df 4f       	sbci	r29, 0xFF	; 255
    518e:	38 83       	st	Y, r19
    5190:	c3 5d       	subi	r28, 0xD3	; 211
    5192:	d0 40       	sbci	r29, 0x00	; 0
    5194:	ce 52       	subi	r28, 0x2E	; 46
    5196:	df 4f       	sbci	r29, 0xFF	; 255
    5198:	48 81       	ld	r20, Y
    519a:	c2 5d       	subi	r28, 0xD2	; 210
    519c:	d0 40       	sbci	r29, 0x00	; 0
    519e:	cf 53       	subi	r28, 0x3F	; 63
    51a0:	df 4f       	sbci	r29, 0xFF	; 255
    51a2:	58 81       	ld	r21, Y
    51a4:	c1 5c       	subi	r28, 0xC1	; 193
    51a6:	d0 40       	sbci	r29, 0x00	; 0
    51a8:	45 17       	cp	r20, r21
    51aa:	28 f0       	brcs	.+10     	; 0x51b6 <MTMR_u8Timer0NormalModeTimeMapping+0x1530>
    51ac:	cd 52       	subi	r28, 0x2D	; 45
    51ae:	df 4f       	sbci	r29, 0xFF	; 255
    51b0:	18 82       	st	Y, r1
    51b2:	c3 5d       	subi	r28, 0xD3	; 211
    51b4:	d0 40       	sbci	r29, 0x00	; 0
    51b6:	cf 52       	subi	r28, 0x2F	; 47
    51b8:	df 4f       	sbci	r29, 0xFF	; 255
    51ba:	68 81       	ld	r22, Y
    51bc:	c1 5d       	subi	r28, 0xD1	; 209
    51be:	d0 40       	sbci	r29, 0x00	; 0
    51c0:	cd 52       	subi	r28, 0x2D	; 45
    51c2:	df 4f       	sbci	r29, 0xFF	; 255
    51c4:	78 81       	ld	r23, Y
    51c6:	c3 5d       	subi	r28, 0xD3	; 211
    51c8:	d0 40       	sbci	r29, 0x00	; 0
    51ca:	67 2b       	or	r22, r23
    51cc:	cf 52       	subi	r28, 0x2F	; 47
    51ce:	df 4f       	sbci	r29, 0xFF	; 255
    51d0:	68 83       	st	Y, r22
    51d2:	c1 5d       	subi	r28, 0xD1	; 209
    51d4:	d0 40       	sbci	r29, 0x00	; 0
    51d6:	ce 52       	subi	r28, 0x2E	; 46
    51d8:	df 4f       	sbci	r29, 0xFF	; 255
    51da:	88 81       	ld	r24, Y
    51dc:	c2 5d       	subi	r28, 0xD2	; 210
    51de:	d0 40       	sbci	r29, 0x00	; 0
    51e0:	cf 53       	subi	r28, 0x3F	; 63
    51e2:	df 4f       	sbci	r29, 0xFF	; 255
    51e4:	88 83       	st	Y, r24
    51e6:	c1 5c       	subi	r28, 0xC1	; 193
    51e8:	d0 40       	sbci	r29, 0x00	; 0
    51ea:	c6 54       	subi	r28, 0x46	; 70
    51ec:	df 4f       	sbci	r29, 0xFF	; 255
    51ee:	98 81       	ld	r25, Y
    51f0:	ca 5b       	subi	r28, 0xBA	; 186
    51f2:	d0 40       	sbci	r29, 0x00	; 0
    51f4:	09 a9       	ldd	r16, Y+49	; 0x31
    51f6:	90 0f       	add	r25, r16
    51f8:	ce 53       	subi	r28, 0x3E	; 62
    51fa:	df 4f       	sbci	r29, 0xFF	; 255
    51fc:	98 83       	st	Y, r25
    51fe:	c2 5c       	subi	r28, 0xC2	; 194
    5200:	d0 40       	sbci	r29, 0x00	; 0
    5202:	11 e0       	ldi	r17, 0x01	; 1
    5204:	cc 52       	subi	r28, 0x2C	; 44
    5206:	df 4f       	sbci	r29, 0xFF	; 255
    5208:	18 83       	st	Y, r17
    520a:	c4 5d       	subi	r28, 0xD4	; 212
    520c:	d0 40       	sbci	r29, 0x00	; 0
    520e:	ce 53       	subi	r28, 0x3E	; 62
    5210:	df 4f       	sbci	r29, 0xFF	; 255
    5212:	28 81       	ld	r18, Y
    5214:	c2 5c       	subi	r28, 0xC2	; 194
    5216:	d0 40       	sbci	r29, 0x00	; 0
    5218:	c6 54       	subi	r28, 0x46	; 70
    521a:	df 4f       	sbci	r29, 0xFF	; 255
    521c:	38 81       	ld	r19, Y
    521e:	ca 5b       	subi	r28, 0xBA	; 186
    5220:	d0 40       	sbci	r29, 0x00	; 0
    5222:	23 17       	cp	r18, r19
    5224:	28 f0       	brcs	.+10     	; 0x5230 <MTMR_u8Timer0NormalModeTimeMapping+0x15aa>
    5226:	cc 52       	subi	r28, 0x2C	; 44
    5228:	df 4f       	sbci	r29, 0xFF	; 255
    522a:	18 82       	st	Y, r1
    522c:	c4 5d       	subi	r28, 0xD4	; 212
    522e:	d0 40       	sbci	r29, 0x00	; 0
    5230:	cf 52       	subi	r28, 0x2F	; 47
    5232:	df 4f       	sbci	r29, 0xFF	; 255
    5234:	48 81       	ld	r20, Y
    5236:	c1 5d       	subi	r28, 0xD1	; 209
    5238:	d0 40       	sbci	r29, 0x00	; 0
    523a:	ce 53       	subi	r28, 0x3E	; 62
    523c:	df 4f       	sbci	r29, 0xFF	; 255
    523e:	58 81       	ld	r21, Y
    5240:	c2 5c       	subi	r28, 0xC2	; 194
    5242:	d0 40       	sbci	r29, 0x00	; 0
    5244:	45 0f       	add	r20, r21
    5246:	cb 52       	subi	r28, 0x2B	; 43
    5248:	df 4f       	sbci	r29, 0xFF	; 255
    524a:	48 83       	st	Y, r20
    524c:	c5 5d       	subi	r28, 0xD5	; 213
    524e:	d0 40       	sbci	r29, 0x00	; 0
    5250:	61 e0       	ldi	r22, 0x01	; 1
    5252:	ca 52       	subi	r28, 0x2A	; 42
    5254:	df 4f       	sbci	r29, 0xFF	; 255
    5256:	68 83       	st	Y, r22
    5258:	c6 5d       	subi	r28, 0xD6	; 214
    525a:	d0 40       	sbci	r29, 0x00	; 0
    525c:	cb 52       	subi	r28, 0x2B	; 43
    525e:	df 4f       	sbci	r29, 0xFF	; 255
    5260:	78 81       	ld	r23, Y
    5262:	c5 5d       	subi	r28, 0xD5	; 213
    5264:	d0 40       	sbci	r29, 0x00	; 0
    5266:	ce 53       	subi	r28, 0x3E	; 62
    5268:	df 4f       	sbci	r29, 0xFF	; 255
    526a:	88 81       	ld	r24, Y
    526c:	c2 5c       	subi	r28, 0xC2	; 194
    526e:	d0 40       	sbci	r29, 0x00	; 0
    5270:	78 17       	cp	r23, r24
    5272:	28 f0       	brcs	.+10     	; 0x527e <MTMR_u8Timer0NormalModeTimeMapping+0x15f8>
    5274:	ca 52       	subi	r28, 0x2A	; 42
    5276:	df 4f       	sbci	r29, 0xFF	; 255
    5278:	18 82       	st	Y, r1
    527a:	c6 5d       	subi	r28, 0xD6	; 214
    527c:	d0 40       	sbci	r29, 0x00	; 0
    527e:	cc 52       	subi	r28, 0x2C	; 44
    5280:	df 4f       	sbci	r29, 0xFF	; 255
    5282:	98 81       	ld	r25, Y
    5284:	c4 5d       	subi	r28, 0xD4	; 212
    5286:	d0 40       	sbci	r29, 0x00	; 0
    5288:	ca 52       	subi	r28, 0x2A	; 42
    528a:	df 4f       	sbci	r29, 0xFF	; 255
    528c:	08 81       	ld	r16, Y
    528e:	c6 5d       	subi	r28, 0xD6	; 214
    5290:	d0 40       	sbci	r29, 0x00	; 0
    5292:	90 2b       	or	r25, r16
    5294:	cc 52       	subi	r28, 0x2C	; 44
    5296:	df 4f       	sbci	r29, 0xFF	; 255
    5298:	98 83       	st	Y, r25
    529a:	c4 5d       	subi	r28, 0xD4	; 212
    529c:	d0 40       	sbci	r29, 0x00	; 0
    529e:	cb 52       	subi	r28, 0x2B	; 43
    52a0:	df 4f       	sbci	r29, 0xFF	; 255
    52a2:	18 81       	ld	r17, Y
    52a4:	c5 5d       	subi	r28, 0xD5	; 213
    52a6:	d0 40       	sbci	r29, 0x00	; 0
    52a8:	ce 53       	subi	r28, 0x3E	; 62
    52aa:	df 4f       	sbci	r29, 0xFF	; 255
    52ac:	18 83       	st	Y, r17
    52ae:	c2 5c       	subi	r28, 0xC2	; 194
    52b0:	d0 40       	sbci	r29, 0x00	; 0
    52b2:	c5 54       	subi	r28, 0x45	; 69
    52b4:	df 4f       	sbci	r29, 0xFF	; 255
    52b6:	28 81       	ld	r18, Y
    52b8:	cb 5b       	subi	r28, 0xBB	; 187
    52ba:	d0 40       	sbci	r29, 0x00	; 0
    52bc:	3a a9       	ldd	r19, Y+50	; 0x32
    52be:	23 0f       	add	r18, r19
    52c0:	cd 53       	subi	r28, 0x3D	; 61
    52c2:	df 4f       	sbci	r29, 0xFF	; 255
    52c4:	28 83       	st	Y, r18
    52c6:	c3 5c       	subi	r28, 0xC3	; 195
    52c8:	d0 40       	sbci	r29, 0x00	; 0
    52ca:	cc 52       	subi	r28, 0x2C	; 44
    52cc:	df 4f       	sbci	r29, 0xFF	; 255
    52ce:	88 81       	ld	r24, Y
    52d0:	c4 5d       	subi	r28, 0xD4	; 212
    52d2:	d0 40       	sbci	r29, 0x00	; 0
    52d4:	cd 53       	subi	r28, 0x3D	; 61
    52d6:	df 4f       	sbci	r29, 0xFF	; 255
    52d8:	48 81       	ld	r20, Y
    52da:	c3 5c       	subi	r28, 0xC3	; 195
    52dc:	d0 40       	sbci	r29, 0x00	; 0
    52de:	84 0f       	add	r24, r20
    52e0:	cd 53       	subi	r28, 0x3D	; 61
    52e2:	df 4f       	sbci	r29, 0xFF	; 255
    52e4:	88 83       	st	Y, r24
    52e6:	c3 5c       	subi	r28, 0xC3	; 195
    52e8:	d0 40       	sbci	r29, 0x00	; 0
    52ea:	c4 54       	subi	r28, 0x44	; 68
    52ec:	df 4f       	sbci	r29, 0xFF	; 255
    52ee:	58 81       	ld	r21, Y
    52f0:	cc 5b       	subi	r28, 0xBC	; 188
    52f2:	d0 40       	sbci	r29, 0x00	; 0
    52f4:	59 83       	std	Y+1, r21	; 0x01
    52f6:	c3 54       	subi	r28, 0x43	; 67
    52f8:	df 4f       	sbci	r29, 0xFF	; 255
    52fa:	68 81       	ld	r22, Y
    52fc:	cd 5b       	subi	r28, 0xBD	; 189
    52fe:	d0 40       	sbci	r29, 0x00	; 0
    5300:	6a 83       	std	Y+2, r22	; 0x02
    5302:	c2 54       	subi	r28, 0x42	; 66
    5304:	df 4f       	sbci	r29, 0xFF	; 255
    5306:	78 81       	ld	r23, Y
    5308:	ce 5b       	subi	r28, 0xBE	; 190
    530a:	d0 40       	sbci	r29, 0x00	; 0
    530c:	7b 83       	std	Y+3, r23	; 0x03
    530e:	c1 54       	subi	r28, 0x41	; 65
    5310:	df 4f       	sbci	r29, 0xFF	; 255
    5312:	88 81       	ld	r24, Y
    5314:	cf 5b       	subi	r28, 0xBF	; 191
    5316:	d0 40       	sbci	r29, 0x00	; 0
    5318:	8c 83       	std	Y+4, r24	; 0x04
    531a:	c0 54       	subi	r28, 0x40	; 64
    531c:	df 4f       	sbci	r29, 0xFF	; 255
    531e:	98 81       	ld	r25, Y
    5320:	c0 5c       	subi	r28, 0xC0	; 192
    5322:	d0 40       	sbci	r29, 0x00	; 0
    5324:	9d 83       	std	Y+5, r25	; 0x05
    5326:	cf 53       	subi	r28, 0x3F	; 63
    5328:	df 4f       	sbci	r29, 0xFF	; 255
    532a:	08 81       	ld	r16, Y
    532c:	c1 5c       	subi	r28, 0xC1	; 193
    532e:	d0 40       	sbci	r29, 0x00	; 0
    5330:	0e 83       	std	Y+6, r16	; 0x06
    5332:	ce 53       	subi	r28, 0x3E	; 62
    5334:	df 4f       	sbci	r29, 0xFF	; 255
    5336:	18 81       	ld	r17, Y
    5338:	c2 5c       	subi	r28, 0xC2	; 194
    533a:	d0 40       	sbci	r29, 0x00	; 0
    533c:	1f 83       	std	Y+7, r17	; 0x07
    533e:	cd 53       	subi	r28, 0x3D	; 61
    5340:	df 4f       	sbci	r29, 0xFF	; 255
    5342:	28 81       	ld	r18, Y
    5344:	c3 5c       	subi	r28, 0xC3	; 195
    5346:	d0 40       	sbci	r29, 0x00	; 0
    5348:	28 87       	std	Y+8, r18	; 0x08
	  numberOfOverlflow=desiredTime/256;
    534a:	a9 80       	ldd	r10, Y+1	; 0x01
    534c:	ba 80       	ldd	r11, Y+2	; 0x02
    534e:	cb 80       	ldd	r12, Y+3	; 0x03
    5350:	dc 80       	ldd	r13, Y+4	; 0x04
    5352:	ed 80       	ldd	r14, Y+5	; 0x05
    5354:	fe 80       	ldd	r15, Y+6	; 0x06
    5356:	0f 81       	ldd	r16, Y+7	; 0x07
    5358:	18 85       	ldd	r17, Y+8	; 0x08
    535a:	2a 2d       	mov	r18, r10
    535c:	3b 2d       	mov	r19, r11
    535e:	4c 2d       	mov	r20, r12
    5360:	5d 2d       	mov	r21, r13
    5362:	6e 2d       	mov	r22, r14
    5364:	7f 2d       	mov	r23, r15
    5366:	80 2f       	mov	r24, r16
    5368:	91 2f       	mov	r25, r17
    536a:	08 e0       	ldi	r16, 0x08	; 8
    536c:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    5370:	a2 2e       	mov	r10, r18
    5372:	b3 2e       	mov	r11, r19
    5374:	c4 2e       	mov	r12, r20
    5376:	d5 2e       	mov	r13, r21
    5378:	e6 2e       	mov	r14, r22
    537a:	f7 2e       	mov	r15, r23
    537c:	08 2f       	mov	r16, r24
    537e:	19 2f       	mov	r17, r25
    5380:	a9 86       	std	Y+9, r10	; 0x09
    5382:	ba 86       	std	Y+10, r11	; 0x0a
    5384:	cb 86       	std	Y+11, r12	; 0x0b
    5386:	dc 86       	std	Y+12, r13	; 0x0c
    5388:	ed 86       	std	Y+13, r14	; 0x0d
    538a:	fe 86       	std	Y+14, r15	; 0x0e
    538c:	0f 87       	std	Y+15, r16	; 0x0f
    538e:	18 8b       	std	Y+16, r17	; 0x10
	  preloadValue=256-(desiredTime %(timeOfOverflow));
    5390:	a9 80       	ldd	r10, Y+1	; 0x01
    5392:	ba 80       	ldd	r11, Y+2	; 0x02
    5394:	cb 80       	ldd	r12, Y+3	; 0x03
    5396:	dc 80       	ldd	r13, Y+4	; 0x04
    5398:	ed 80       	ldd	r14, Y+5	; 0x05
    539a:	fe 80       	ldd	r15, Y+6	; 0x06
    539c:	0f 81       	ldd	r16, Y+7	; 0x07
    539e:	18 85       	ldd	r17, Y+8	; 0x08
    53a0:	2a 2d       	mov	r18, r10
    53a2:	3b 2d       	mov	r19, r11
    53a4:	4c 2d       	mov	r20, r12
    53a6:	5d 2d       	mov	r21, r13
    53a8:	6e 2d       	mov	r22, r14
    53aa:	7f 2d       	mov	r23, r15
    53ac:	80 2f       	mov	r24, r16
    53ae:	91 2f       	mov	r25, r17
    53b0:	a9 88       	ldd	r10, Y+17	; 0x11
    53b2:	ba 88       	ldd	r11, Y+18	; 0x12
    53b4:	cb 88       	ldd	r12, Y+19	; 0x13
    53b6:	dc 88       	ldd	r13, Y+20	; 0x14
    53b8:	ed 88       	ldd	r14, Y+21	; 0x15
    53ba:	fe 88       	ldd	r15, Y+22	; 0x16
    53bc:	0f 89       	ldd	r16, Y+23	; 0x17
    53be:	18 8d       	ldd	r17, Y+24	; 0x18
    53c0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__umoddi3>
    53c4:	a2 2e       	mov	r10, r18
    53c6:	b3 2e       	mov	r11, r19
    53c8:	c4 2e       	mov	r12, r20
    53ca:	d5 2e       	mov	r13, r21
    53cc:	e6 2e       	mov	r14, r22
    53ce:	f7 2e       	mov	r15, r23
    53d0:	08 2f       	mov	r16, r24
    53d2:	19 2f       	mov	r17, r25
    53d4:	2a 2d       	mov	r18, r10
    53d6:	3b 2d       	mov	r19, r11
    53d8:	4c 2d       	mov	r20, r12
    53da:	5d 2d       	mov	r21, r13
    53dc:	6e 2d       	mov	r22, r14
    53de:	7f 2d       	mov	r23, r15
    53e0:	80 2f       	mov	r24, r16
    53e2:	91 2f       	mov	r25, r17
    53e4:	80 e0       	ldi	r24, 0x00	; 0
    53e6:	91 e0       	ldi	r25, 0x01	; 1
    53e8:	a0 e0       	ldi	r26, 0x00	; 0
    53ea:	b0 e0       	ldi	r27, 0x00	; 0
    53ec:	82 1b       	sub	r24, r18
    53ee:	93 0b       	sbc	r25, r19
    53f0:	a4 0b       	sbc	r26, r20
    53f2:	b5 0b       	sbc	r27, r21
    53f4:	80 93 d2 02 	sts	0x02D2, r24
    53f8:	90 93 d3 02 	sts	0x02D3, r25
    53fc:	a0 93 d4 02 	sts	0x02D4, r26
    5400:	b0 93 d5 02 	sts	0x02D5, r27
	  totalOverflowNumbers=numberOfOverlflow+1;
    5404:	89 85       	ldd	r24, Y+9	; 0x09
    5406:	9a 85       	ldd	r25, Y+10	; 0x0a
    5408:	ab 85       	ldd	r26, Y+11	; 0x0b
    540a:	bc 85       	ldd	r27, Y+12	; 0x0c
    540c:	01 96       	adiw	r24, 0x01	; 1
    540e:	a1 1d       	adc	r26, r1
    5410:	b1 1d       	adc	r27, r1
    5412:	80 93 ce 02 	sts	0x02CE, r24
    5416:	90 93 cf 02 	sts	0x02CF, r25
    541a:	a0 93 d0 02 	sts	0x02D0, r26
    541e:	b0 93 d1 02 	sts	0x02D1, r27
	  MTMR_u8_TCNT0_REG = preloadValue;
    5422:	e2 e5       	ldi	r30, 0x52	; 82
    5424:	f0 e0       	ldi	r31, 0x00	; 0
    5426:	80 91 d2 02 	lds	r24, 0x02D2
    542a:	90 91 d3 02 	lds	r25, 0x02D3
    542e:	a0 91 d4 02 	lds	r26, 0x02D4
    5432:	b0 91 d5 02 	lds	r27, 0x02D5
    5436:	80 83       	st	Z, r24
	  MTMR_u8_TCCR0_REG |= MTMR_PRESCALER_VALUE;
    5438:	a3 e5       	ldi	r26, 0x53	; 83
    543a:	b0 e0       	ldi	r27, 0x00	; 0
    543c:	e3 e5       	ldi	r30, 0x53	; 83
    543e:	f0 e0       	ldi	r31, 0x00	; 0
    5440:	80 81       	ld	r24, Z
    5442:	82 60       	ori	r24, 0x02	; 2
    5444:	8c 93       	st	X, r24
	}
	return Local_u8ErrorState;
    5446:	89 a1       	ldd	r24, Y+33	; 0x21
}
    5448:	ca 52       	subi	r28, 0x2A	; 42
    544a:	df 4f       	sbci	r29, 0xFF	; 255
    544c:	0f b6       	in	r0, 0x3f	; 63
    544e:	f8 94       	cli
    5450:	de bf       	out	0x3e, r29	; 62
    5452:	0f be       	out	0x3f, r0	; 63
    5454:	cd bf       	out	0x3d, r28	; 61
    5456:	cf 91       	pop	r28
    5458:	df 91       	pop	r29
    545a:	1f 91       	pop	r17
    545c:	0f 91       	pop	r16
    545e:	ff 90       	pop	r15
    5460:	ef 90       	pop	r14
    5462:	df 90       	pop	r13
    5464:	cf 90       	pop	r12
    5466:	bf 90       	pop	r11
    5468:	af 90       	pop	r10
    546a:	08 95       	ret

0000546c <MTMR_u8Timer0SetCallBack>:
		desiredTimeCTC+=(microSecond);
	}
	return Local_u8ErrorState;
}
*/
u8 MTMR_u8Timer0SetCallBack(u8 Copy_u8MTMRIndex , void(*Copy_PF)(void)){
    546c:	df 93       	push	r29
    546e:	cf 93       	push	r28
    5470:	00 d0       	rcall	.+0      	; 0x5472 <MTMR_u8Timer0SetCallBack+0x6>
    5472:	00 d0       	rcall	.+0      	; 0x5474 <MTMR_u8Timer0SetCallBack+0x8>
    5474:	cd b7       	in	r28, 0x3d	; 61
    5476:	de b7       	in	r29, 0x3e	; 62
    5478:	8a 83       	std	Y+2, r24	; 0x02
    547a:	7c 83       	std	Y+4, r23	; 0x04
    547c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    547e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PF != STD_TYPES_NULL){
    5480:	8b 81       	ldd	r24, Y+3	; 0x03
    5482:	9c 81       	ldd	r25, Y+4	; 0x04
    5484:	00 97       	sbiw	r24, 0x00	; 0
    5486:	71 f0       	breq	.+28     	; 0x54a4 <MTMR_u8Timer0SetCallBack+0x38>
		Local_u8ErrorState = STD_TYPES_OK;
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	89 83       	std	Y+1, r24	; 0x01
		MTMR_APF[Copy_u8MTMRIndex] = Copy_PF;
    548c:	8a 81       	ldd	r24, Y+2	; 0x02
    548e:	88 2f       	mov	r24, r24
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	88 0f       	add	r24, r24
    5494:	99 1f       	adc	r25, r25
    5496:	fc 01       	movw	r30, r24
    5498:	ea 53       	subi	r30, 0x3A	; 58
    549a:	fd 4f       	sbci	r31, 0xFD	; 253
    549c:	8b 81       	ldd	r24, Y+3	; 0x03
    549e:	9c 81       	ldd	r25, Y+4	; 0x04
    54a0:	91 83       	std	Z+1, r25	; 0x01
    54a2:	80 83       	st	Z, r24
	}
	return Local_u8ErrorState;
    54a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    54a6:	0f 90       	pop	r0
    54a8:	0f 90       	pop	r0
    54aa:	0f 90       	pop	r0
    54ac:	0f 90       	pop	r0
    54ae:	cf 91       	pop	r28
    54b0:	df 91       	pop	r29
    54b2:	08 95       	ret

000054b4 <__vector_11>:
}
*/
/* ISR For timer0 normal mode*/

void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    54b4:	1f 92       	push	r1
    54b6:	0f 92       	push	r0
    54b8:	0f b6       	in	r0, 0x3f	; 63
    54ba:	0f 92       	push	r0
    54bc:	11 24       	eor	r1, r1
    54be:	2f 93       	push	r18
    54c0:	3f 93       	push	r19
    54c2:	4f 93       	push	r20
    54c4:	5f 93       	push	r21
    54c6:	6f 93       	push	r22
    54c8:	7f 93       	push	r23
    54ca:	8f 93       	push	r24
    54cc:	9f 93       	push	r25
    54ce:	af 93       	push	r26
    54d0:	bf 93       	push	r27
    54d2:	ef 93       	push	r30
    54d4:	ff 93       	push	r31
    54d6:	df 93       	push	r29
    54d8:	cf 93       	push	r28
    54da:	cd b7       	in	r28, 0x3d	; 61
    54dc:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0;
	Local_u16Counter++;
    54de:	80 91 d6 02 	lds	r24, 0x02D6
    54e2:	90 91 d7 02 	lds	r25, 0x02D7
    54e6:	01 96       	adiw	r24, 0x01	; 1
    54e8:	90 93 d7 02 	sts	0x02D7, r25
    54ec:	80 93 d6 02 	sts	0x02D6, r24
	if(Local_u16Counter == totalOverflowNumbers && MTMR_APF[0] != STD_TYPES_NULL){
    54f0:	80 91 d6 02 	lds	r24, 0x02D6
    54f4:	90 91 d7 02 	lds	r25, 0x02D7
    54f8:	9c 01       	movw	r18, r24
    54fa:	40 e0       	ldi	r20, 0x00	; 0
    54fc:	50 e0       	ldi	r21, 0x00	; 0
    54fe:	80 91 ce 02 	lds	r24, 0x02CE
    5502:	90 91 cf 02 	lds	r25, 0x02CF
    5506:	a0 91 d0 02 	lds	r26, 0x02D0
    550a:	b0 91 d1 02 	lds	r27, 0x02D1
    550e:	28 17       	cp	r18, r24
    5510:	39 07       	cpc	r19, r25
    5512:	4a 07       	cpc	r20, r26
    5514:	5b 07       	cpc	r21, r27
    5516:	d1 f4       	brne	.+52     	; 0x554c <__vector_11+0x98>
    5518:	80 91 c6 02 	lds	r24, 0x02C6
    551c:	90 91 c7 02 	lds	r25, 0x02C7
    5520:	00 97       	sbiw	r24, 0x00	; 0
    5522:	a1 f0       	breq	.+40     	; 0x554c <__vector_11+0x98>
		/* set preload value*/
		MTMR_u8_TCNT0_REG = preloadValue;
    5524:	e2 e5       	ldi	r30, 0x52	; 82
    5526:	f0 e0       	ldi	r31, 0x00	; 0
    5528:	80 91 d2 02 	lds	r24, 0x02D2
    552c:	90 91 d3 02 	lds	r25, 0x02D3
    5530:	a0 91 d4 02 	lds	r26, 0x02D4
    5534:	b0 91 d5 02 	lds	r27, 0x02D5
    5538:	80 83       	st	Z, r24
		/* call the function*/
		MTMR_APF[0]();
    553a:	e0 91 c6 02 	lds	r30, 0x02C6
    553e:	f0 91 c7 02 	lds	r31, 0x02C7
    5542:	09 95       	icall
		/* counter = 0 */
		Local_u16Counter = 0;
    5544:	10 92 d7 02 	sts	0x02D7, r1
    5548:	10 92 d6 02 	sts	0x02D6, r1
	}
}
    554c:	cf 91       	pop	r28
    554e:	df 91       	pop	r29
    5550:	ff 91       	pop	r31
    5552:	ef 91       	pop	r30
    5554:	bf 91       	pop	r27
    5556:	af 91       	pop	r26
    5558:	9f 91       	pop	r25
    555a:	8f 91       	pop	r24
    555c:	7f 91       	pop	r23
    555e:	6f 91       	pop	r22
    5560:	5f 91       	pop	r21
    5562:	4f 91       	pop	r20
    5564:	3f 91       	pop	r19
    5566:	2f 91       	pop	r18
    5568:	0f 90       	pop	r0
    556a:	0f be       	out	0x3f, r0	; 63
    556c:	0f 90       	pop	r0
    556e:	1f 90       	pop	r1
    5570:	18 95       	reti

00005572 <MTWI_MasterInit>:
#include"Bit_Math.h"

#include"MTWI_private.h"
#include"MTWI_interface.h"

void MTWI_MasterInit(u8 Copy_u8Frequency){
    5572:	df 93       	push	r29
    5574:	cf 93       	push	r28
    5576:	00 d0       	rcall	.+0      	; 0x5578 <MTWI_MasterInit+0x6>
    5578:	0f 92       	push	r0
    557a:	cd b7       	in	r28, 0x3d	; 61
    557c:	de b7       	in	r29, 0x3e	; 62
    557e:	89 83       	std	Y+1, r24	; 0x01
	/*Clear the prescaler */
	CLR_BIT(MTWI_u8_TWSR_REG , 1);
    5580:	a1 e2       	ldi	r26, 0x21	; 33
    5582:	b0 e0       	ldi	r27, 0x00	; 0
    5584:	e1 e2       	ldi	r30, 0x21	; 33
    5586:	f0 e0       	ldi	r31, 0x00	; 0
    5588:	80 81       	ld	r24, Z
    558a:	8d 7f       	andi	r24, 0xFD	; 253
    558c:	8c 93       	st	X, r24
	CLR_BIT(MTWI_u8_TWSR_REG , 0);
    558e:	a1 e2       	ldi	r26, 0x21	; 33
    5590:	b0 e0       	ldi	r27, 0x00	; 0
    5592:	e1 e2       	ldi	r30, 0x21	; 33
    5594:	f0 e0       	ldi	r31, 0x00	; 0
    5596:	80 81       	ld	r24, Z
    5598:	8e 7f       	andi	r24, 0xFE	; 254
    559a:	8c 93       	st	X, r24
	/*Set the frequency*/
	switch(Copy_u8Frequency){
    559c:	89 81       	ldd	r24, Y+1	; 0x01
    559e:	28 2f       	mov	r18, r24
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	3b 83       	std	Y+3, r19	; 0x03
    55a4:	2a 83       	std	Y+2, r18	; 0x02
    55a6:	8a 81       	ldd	r24, Y+2	; 0x02
    55a8:	9b 81       	ldd	r25, Y+3	; 0x03
    55aa:	82 30       	cpi	r24, 0x02	; 2
    55ac:	91 05       	cpc	r25, r1
    55ae:	d9 f0       	breq	.+54     	; 0x55e6 <MTWI_MasterInit+0x74>
    55b0:	2a 81       	ldd	r18, Y+2	; 0x02
    55b2:	3b 81       	ldd	r19, Y+3	; 0x03
    55b4:	23 30       	cpi	r18, 0x03	; 3
    55b6:	31 05       	cpc	r19, r1
    55b8:	34 f4       	brge	.+12     	; 0x55c6 <MTWI_MasterInit+0x54>
    55ba:	8a 81       	ldd	r24, Y+2	; 0x02
    55bc:	9b 81       	ldd	r25, Y+3	; 0x03
    55be:	81 30       	cpi	r24, 0x01	; 1
    55c0:	91 05       	cpc	r25, r1
    55c2:	61 f0       	breq	.+24     	; 0x55dc <MTWI_MasterInit+0x6a>
    55c4:	1e c0       	rjmp	.+60     	; 0x5602 <MTWI_MasterInit+0x90>
    55c6:	2a 81       	ldd	r18, Y+2	; 0x02
    55c8:	3b 81       	ldd	r19, Y+3	; 0x03
    55ca:	23 30       	cpi	r18, 0x03	; 3
    55cc:	31 05       	cpc	r19, r1
    55ce:	81 f0       	breq	.+32     	; 0x55f0 <MTWI_MasterInit+0x7e>
    55d0:	8a 81       	ldd	r24, Y+2	; 0x02
    55d2:	9b 81       	ldd	r25, Y+3	; 0x03
    55d4:	84 30       	cpi	r24, 0x04	; 4
    55d6:	91 05       	cpc	r25, r1
    55d8:	81 f0       	breq	.+32     	; 0x55fa <MTWI_MasterInit+0x88>
    55da:	13 c0       	rjmp	.+38     	; 0x5602 <MTWI_MasterInit+0x90>
		case FREQ_100K :{
			MTWI_u8_TWBR_REG = 32;
    55dc:	e0 e2       	ldi	r30, 0x20	; 32
    55de:	f0 e0       	ldi	r31, 0x00	; 0
    55e0:	80 e2       	ldi	r24, 0x20	; 32
    55e2:	80 83       	st	Z, r24
    55e4:	0e c0       	rjmp	.+28     	; 0x5602 <MTWI_MasterInit+0x90>
			break;
		}
		case FREQ_200K :{
			MTWI_u8_TWBR_REG = 12;
    55e6:	e0 e2       	ldi	r30, 0x20	; 32
    55e8:	f0 e0       	ldi	r31, 0x00	; 0
    55ea:	8c e0       	ldi	r24, 0x0C	; 12
    55ec:	80 83       	st	Z, r24
    55ee:	09 c0       	rjmp	.+18     	; 0x5602 <MTWI_MasterInit+0x90>
			break;
		}
		case FREQ_300K :{
			MTWI_u8_TWBR_REG = 6;
    55f0:	e0 e2       	ldi	r30, 0x20	; 32
    55f2:	f0 e0       	ldi	r31, 0x00	; 0
    55f4:	86 e0       	ldi	r24, 0x06	; 6
    55f6:	80 83       	st	Z, r24
    55f8:	04 c0       	rjmp	.+8      	; 0x5602 <MTWI_MasterInit+0x90>
			break;
		}
		case FREQ_400K :{
			MTWI_u8_TWBR_REG = 2;
    55fa:	e0 e2       	ldi	r30, 0x20	; 32
    55fc:	f0 e0       	ldi	r31, 0x00	; 0
    55fe:	82 e0       	ldi	r24, 0x02	; 2
    5600:	80 83       	st	Z, r24
			break;
		}
	}
	/*Enable the Ack*/
	SET_BIT(MTWI_u8_TWCR_REG , 6);
    5602:	a6 e5       	ldi	r26, 0x56	; 86
    5604:	b0 e0       	ldi	r27, 0x00	; 0
    5606:	e6 e5       	ldi	r30, 0x56	; 86
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	80 81       	ld	r24, Z
    560c:	80 64       	ori	r24, 0x40	; 64
    560e:	8c 93       	st	X, r24
	/*Enable the TWI*/
	SET_BIT(MTWI_u8_TWCR_REG , 2);
    5610:	a6 e5       	ldi	r26, 0x56	; 86
    5612:	b0 e0       	ldi	r27, 0x00	; 0
    5614:	e6 e5       	ldi	r30, 0x56	; 86
    5616:	f0 e0       	ldi	r31, 0x00	; 0
    5618:	80 81       	ld	r24, Z
    561a:	84 60       	ori	r24, 0x04	; 4
    561c:	8c 93       	st	X, r24
}
    561e:	0f 90       	pop	r0
    5620:	0f 90       	pop	r0
    5622:	0f 90       	pop	r0
    5624:	cf 91       	pop	r28
    5626:	df 91       	pop	r29
    5628:	08 95       	ret

0000562a <MTWI_SlaveInit>:

void MTWI_SlaveInit(u8 Copy_u8SlaveAddress){
    562a:	df 93       	push	r29
    562c:	cf 93       	push	r28
    562e:	0f 92       	push	r0
    5630:	cd b7       	in	r28, 0x3d	; 61
    5632:	de b7       	in	r29, 0x3e	; 62
    5634:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Slave Address (7 bits)*/
	MTWI_u8_TWAR_REG = (Copy_u8SlaveAddress<<1);
    5636:	e2 e2       	ldi	r30, 0x22	; 34
    5638:	f0 e0       	ldi	r31, 0x00	; 0
    563a:	89 81       	ldd	r24, Y+1	; 0x01
    563c:	88 0f       	add	r24, r24
    563e:	80 83       	st	Z, r24
	/*Enable the Ack*/
	SET_BIT(MTWI_u8_TWCR_REG , 6);
    5640:	a6 e5       	ldi	r26, 0x56	; 86
    5642:	b0 e0       	ldi	r27, 0x00	; 0
    5644:	e6 e5       	ldi	r30, 0x56	; 86
    5646:	f0 e0       	ldi	r31, 0x00	; 0
    5648:	80 81       	ld	r24, Z
    564a:	80 64       	ori	r24, 0x40	; 64
    564c:	8c 93       	st	X, r24
	/*Enable the TWI*/
	SET_BIT(MTWI_u8_TWCR_REG , 2);
    564e:	a6 e5       	ldi	r26, 0x56	; 86
    5650:	b0 e0       	ldi	r27, 0x00	; 0
    5652:	e6 e5       	ldi	r30, 0x56	; 86
    5654:	f0 e0       	ldi	r31, 0x00	; 0
    5656:	80 81       	ld	r24, Z
    5658:	84 60       	ori	r24, 0x04	; 4
    565a:	8c 93       	st	X, r24
}
    565c:	0f 90       	pop	r0
    565e:	cf 91       	pop	r28
    5660:	df 91       	pop	r29
    5662:	08 95       	ret

00005664 <MTWI_SendStartCondition>:

TWI_ErrorState MTWI_SendStartCondition(void){
    5664:	df 93       	push	r29
    5666:	cf 93       	push	r28
    5668:	00 d0       	rcall	.+0      	; 0x566a <MTWI_SendStartCondition+0x6>
    566a:	cd b7       	in	r28, 0x3d	; 61
    566c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Status;
	TWI_ErrorState Local_ErrorState = TWI_OK;
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	89 83       	std	Y+1, r24	; 0x01
	/*send start condition*/
	SET_BIT(MTWI_u8_TWCR_REG , 5);
    5672:	a6 e5       	ldi	r26, 0x56	; 86
    5674:	b0 e0       	ldi	r27, 0x00	; 0
    5676:	e6 e5       	ldi	r30, 0x56	; 86
    5678:	f0 e0       	ldi	r31, 0x00	; 0
    567a:	80 81       	ld	r24, Z
    567c:	80 62       	ori	r24, 0x20	; 32
    567e:	8c 93       	st	X, r24
	/*CLR FLAG */
	SET_BIT(MTWI_u8_TWCR_REG , 7);
    5680:	a6 e5       	ldi	r26, 0x56	; 86
    5682:	b0 e0       	ldi	r27, 0x00	; 0
    5684:	e6 e5       	ldi	r30, 0x56	; 86
    5686:	f0 e0       	ldi	r31, 0x00	; 0
    5688:	80 81       	ld	r24, Z
    568a:	80 68       	ori	r24, 0x80	; 128
    568c:	8c 93       	st	X, r24
	Local_u8Status = status();
    568e:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <status>
    5692:	8a 83       	std	Y+2, r24	; 0x02
	if((Local_u8Status & GET_STATUS) != START_CONDITION_STATUS ){
    5694:	8a 81       	ldd	r24, Y+2	; 0x02
    5696:	88 2f       	mov	r24, r24
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	88 7f       	andi	r24, 0xF8	; 248
    569c:	90 70       	andi	r25, 0x00	; 0
    569e:	88 30       	cpi	r24, 0x08	; 8
    56a0:	91 05       	cpc	r25, r1
    56a2:	11 f0       	breq	.+4      	; 0x56a8 <MTWI_SendStartCondition+0x44>
		Local_ErrorState = TWI_StartCondition_ERROR;
    56a4:	82 e0       	ldi	r24, 0x02	; 2
    56a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    56a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    56aa:	0f 90       	pop	r0
    56ac:	0f 90       	pop	r0
    56ae:	cf 91       	pop	r28
    56b0:	df 91       	pop	r29
    56b2:	08 95       	ret

000056b4 <MTWI_SendRepeatedStartCondition>:

TWI_ErrorState MTWI_SendRepeatedStartCondition(void){
    56b4:	df 93       	push	r29
    56b6:	cf 93       	push	r28
    56b8:	00 d0       	rcall	.+0      	; 0x56ba <MTWI_SendRepeatedStartCondition+0x6>
    56ba:	cd b7       	in	r28, 0x3d	; 61
    56bc:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Status;
	TWI_ErrorState Local_ErrorState = TWI_OK;
    56be:	81 e0       	ldi	r24, 0x01	; 1
    56c0:	89 83       	std	Y+1, r24	; 0x01
	/*send start condition*/
	SET_BIT(MTWI_u8_TWCR_REG , 5);
    56c2:	a6 e5       	ldi	r26, 0x56	; 86
    56c4:	b0 e0       	ldi	r27, 0x00	; 0
    56c6:	e6 e5       	ldi	r30, 0x56	; 86
    56c8:	f0 e0       	ldi	r31, 0x00	; 0
    56ca:	80 81       	ld	r24, Z
    56cc:	80 62       	ori	r24, 0x20	; 32
    56ce:	8c 93       	st	X, r24
	/*CLR FLAG */
	SET_BIT(MTWI_u8_TWCR_REG , 7);
    56d0:	a6 e5       	ldi	r26, 0x56	; 86
    56d2:	b0 e0       	ldi	r27, 0x00	; 0
    56d4:	e6 e5       	ldi	r30, 0x56	; 86
    56d6:	f0 e0       	ldi	r31, 0x00	; 0
    56d8:	80 81       	ld	r24, Z
    56da:	80 68       	ori	r24, 0x80	; 128
    56dc:	8c 93       	st	X, r24
	Local_u8Status = status();
    56de:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <status>
    56e2:	8a 83       	std	Y+2, r24	; 0x02
	if((Local_u8Status & GET_STATUS) != REPEATED_START_CONDITION_STATUS ){
    56e4:	8a 81       	ldd	r24, Y+2	; 0x02
    56e6:	88 2f       	mov	r24, r24
    56e8:	90 e0       	ldi	r25, 0x00	; 0
    56ea:	88 7f       	andi	r24, 0xF8	; 248
    56ec:	90 70       	andi	r25, 0x00	; 0
    56ee:	80 31       	cpi	r24, 0x10	; 16
    56f0:	91 05       	cpc	r25, r1
    56f2:	11 f0       	breq	.+4      	; 0x56f8 <MTWI_SendRepeatedStartCondition+0x44>
		Local_ErrorState = TWI_RepeatedStartCondioton_ERROR;
    56f4:	83 e0       	ldi	r24, 0x03	; 3
    56f6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    56f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    56fa:	0f 90       	pop	r0
    56fc:	0f 90       	pop	r0
    56fe:	cf 91       	pop	r28
    5700:	df 91       	pop	r29
    5702:	08 95       	ret

00005704 <MTWI_SendSlaveAddressWithWrite>:

TWI_ErrorState MTWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress){
    5704:	df 93       	push	r29
    5706:	cf 93       	push	r28
    5708:	00 d0       	rcall	.+0      	; 0x570a <MTWI_SendSlaveAddressWithWrite+0x6>
    570a:	0f 92       	push	r0
    570c:	cd b7       	in	r28, 0x3d	; 61
    570e:	de b7       	in	r29, 0x3e	; 62
    5710:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Status;
	TWI_ErrorState Local_ErrorState = TWI_OK;
    5712:	81 e0       	ldi	r24, 0x01	; 1
    5714:	89 83       	std	Y+1, r24	; 0x01
	/*Send the slave address*/
	MTWI_u8_TWDR_REG = (Copy_u8SlaveAddress << 1);
    5716:	e3 e2       	ldi	r30, 0x23	; 35
    5718:	f0 e0       	ldi	r31, 0x00	; 0
    571a:	8b 81       	ldd	r24, Y+3	; 0x03
    571c:	88 0f       	add	r24, r24
    571e:	80 83       	st	Z, r24
	/*Write Mode*/
	CLR_BIT(MTWI_u8_TWDR_REG , 0);
    5720:	a3 e2       	ldi	r26, 0x23	; 35
    5722:	b0 e0       	ldi	r27, 0x00	; 0
    5724:	e3 e2       	ldi	r30, 0x23	; 35
    5726:	f0 e0       	ldi	r31, 0x00	; 0
    5728:	80 81       	ld	r24, Z
    572a:	8e 7f       	andi	r24, 0xFE	; 254
    572c:	8c 93       	st	X, r24
	/*CLR the Start Condition*/
	CLR_BIT(MTWI_u8_TWCR_REG , 5);
    572e:	a6 e5       	ldi	r26, 0x56	; 86
    5730:	b0 e0       	ldi	r27, 0x00	; 0
    5732:	e6 e5       	ldi	r30, 0x56	; 86
    5734:	f0 e0       	ldi	r31, 0x00	; 0
    5736:	80 81       	ld	r24, Z
    5738:	8f 7d       	andi	r24, 0xDF	; 223
    573a:	8c 93       	st	X, r24
	/*CLR the flag*/
	SET_BIT(MTWI_u8_TWCR_REG , 7);
    573c:	a6 e5       	ldi	r26, 0x56	; 86
    573e:	b0 e0       	ldi	r27, 0x00	; 0
    5740:	e6 e5       	ldi	r30, 0x56	; 86
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	80 81       	ld	r24, Z
    5746:	80 68       	ori	r24, 0x80	; 128
    5748:	8c 93       	st	X, r24
	Local_u8Status = status();
    574a:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <status>
    574e:	8a 83       	std	Y+2, r24	; 0x02
	if((Local_u8Status & GET_STATUS) != SEND_SLAVE_ADDRESS_WRITE_STATUS){
    5750:	8a 81       	ldd	r24, Y+2	; 0x02
    5752:	88 2f       	mov	r24, r24
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	88 7f       	andi	r24, 0xF8	; 248
    5758:	90 70       	andi	r25, 0x00	; 0
    575a:	88 31       	cpi	r24, 0x18	; 24
    575c:	91 05       	cpc	r25, r1
    575e:	11 f0       	breq	.+4      	; 0x5764 <MTWI_SendSlaveAddressWithWrite+0x60>
		Local_ErrorState = TWI_Send_SLAVE_W_ERROR;
    5760:	84 e0       	ldi	r24, 0x04	; 4
    5762:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    5764:	89 81       	ldd	r24, Y+1	; 0x01
}
    5766:	0f 90       	pop	r0
    5768:	0f 90       	pop	r0
    576a:	0f 90       	pop	r0
    576c:	cf 91       	pop	r28
    576e:	df 91       	pop	r29
    5770:	08 95       	ret

00005772 <MTWI_SendSlaveAddressWithRead>:

TWI_ErrorState MTWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress){
    5772:	df 93       	push	r29
    5774:	cf 93       	push	r28
    5776:	00 d0       	rcall	.+0      	; 0x5778 <MTWI_SendSlaveAddressWithRead+0x6>
    5778:	0f 92       	push	r0
    577a:	cd b7       	in	r28, 0x3d	; 61
    577c:	de b7       	in	r29, 0x3e	; 62
    577e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Status;
	TWI_ErrorState Local_ErrorState = TWI_OK;
    5780:	81 e0       	ldi	r24, 0x01	; 1
    5782:	89 83       	std	Y+1, r24	; 0x01
	/*Send the slave address*/
	MTWI_u8_TWDR_REG = (Copy_u8SlaveAddress << 1);
    5784:	e3 e2       	ldi	r30, 0x23	; 35
    5786:	f0 e0       	ldi	r31, 0x00	; 0
    5788:	8b 81       	ldd	r24, Y+3	; 0x03
    578a:	88 0f       	add	r24, r24
    578c:	80 83       	st	Z, r24
	/*Read Mode*/
	SET_BIT(MTWI_u8_TWDR_REG , 0);
    578e:	a3 e2       	ldi	r26, 0x23	; 35
    5790:	b0 e0       	ldi	r27, 0x00	; 0
    5792:	e3 e2       	ldi	r30, 0x23	; 35
    5794:	f0 e0       	ldi	r31, 0x00	; 0
    5796:	80 81       	ld	r24, Z
    5798:	81 60       	ori	r24, 0x01	; 1
    579a:	8c 93       	st	X, r24
	/*CLR the Start Condition*/
	CLR_BIT(MTWI_u8_TWCR_REG , 5);
    579c:	a6 e5       	ldi	r26, 0x56	; 86
    579e:	b0 e0       	ldi	r27, 0x00	; 0
    57a0:	e6 e5       	ldi	r30, 0x56	; 86
    57a2:	f0 e0       	ldi	r31, 0x00	; 0
    57a4:	80 81       	ld	r24, Z
    57a6:	8f 7d       	andi	r24, 0xDF	; 223
    57a8:	8c 93       	st	X, r24
	/*CLR the flag*/
	SET_BIT(MTWI_u8_TWCR_REG , 7);
    57aa:	a6 e5       	ldi	r26, 0x56	; 86
    57ac:	b0 e0       	ldi	r27, 0x00	; 0
    57ae:	e6 e5       	ldi	r30, 0x56	; 86
    57b0:	f0 e0       	ldi	r31, 0x00	; 0
    57b2:	80 81       	ld	r24, Z
    57b4:	80 68       	ori	r24, 0x80	; 128
    57b6:	8c 93       	st	X, r24
	Local_u8Status = status();
    57b8:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <status>
    57bc:	8a 83       	std	Y+2, r24	; 0x02
	if((Local_u8Status & GET_STATUS) != SEND_SLAVE_ADDRESS_READ_STATUS){
    57be:	8a 81       	ldd	r24, Y+2	; 0x02
    57c0:	88 2f       	mov	r24, r24
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	88 7f       	andi	r24, 0xF8	; 248
    57c6:	90 70       	andi	r25, 0x00	; 0
    57c8:	80 34       	cpi	r24, 0x40	; 64
    57ca:	91 05       	cpc	r25, r1
    57cc:	11 f0       	breq	.+4      	; 0x57d2 <MTWI_SendSlaveAddressWithRead+0x60>
		Local_ErrorState = TWI_Send_SLAVE_R_ERROR;
    57ce:	85 e0       	ldi	r24, 0x05	; 5
    57d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    57d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    57d4:	0f 90       	pop	r0
    57d6:	0f 90       	pop	r0
    57d8:	0f 90       	pop	r0
    57da:	cf 91       	pop	r28
    57dc:	df 91       	pop	r29
    57de:	08 95       	ret

000057e0 <MTWI_SendDataByte>:

TWI_ErrorState MTWI_SendDataByte(u8 Copy_u8Data){
    57e0:	df 93       	push	r29
    57e2:	cf 93       	push	r28
    57e4:	00 d0       	rcall	.+0      	; 0x57e6 <MTWI_SendDataByte+0x6>
    57e6:	0f 92       	push	r0
    57e8:	cd b7       	in	r28, 0x3d	; 61
    57ea:	de b7       	in	r29, 0x3e	; 62
    57ec:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Status;
	TWI_ErrorState Local_ErrorState = TWI_OK;
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	89 83       	std	Y+1, r24	; 0x01
	MTWI_u8_TWDR_REG = Copy_u8Data;
    57f2:	e3 e2       	ldi	r30, 0x23	; 35
    57f4:	f0 e0       	ldi	r31, 0x00	; 0
    57f6:	8b 81       	ldd	r24, Y+3	; 0x03
    57f8:	80 83       	st	Z, r24
	/*CLR Flag*/
	SET_BIT(MTWI_u8_TWCR_REG , 7);
    57fa:	a6 e5       	ldi	r26, 0x56	; 86
    57fc:	b0 e0       	ldi	r27, 0x00	; 0
    57fe:	e6 e5       	ldi	r30, 0x56	; 86
    5800:	f0 e0       	ldi	r31, 0x00	; 0
    5802:	80 81       	ld	r24, Z
    5804:	80 68       	ori	r24, 0x80	; 128
    5806:	8c 93       	st	X, r24
	Local_u8Status = status();
    5808:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <status>
    580c:	8a 83       	std	Y+2, r24	; 0x02
	if((Local_u8Status & GET_STATUS) != WRITE_BYTE_STATUS){
    580e:	8a 81       	ldd	r24, Y+2	; 0x02
    5810:	88 2f       	mov	r24, r24
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	88 7f       	andi	r24, 0xF8	; 248
    5816:	90 70       	andi	r25, 0x00	; 0
    5818:	88 32       	cpi	r24, 0x28	; 40
    581a:	91 05       	cpc	r25, r1
    581c:	11 f0       	breq	.+4      	; 0x5822 <MTWI_SendDataByte+0x42>
		Local_ErrorState = TWI_Send_DATA_ERROR;
    581e:	86 e0       	ldi	r24, 0x06	; 6
    5820:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    5822:	89 81       	ldd	r24, Y+1	; 0x01
}
    5824:	0f 90       	pop	r0
    5826:	0f 90       	pop	r0
    5828:	0f 90       	pop	r0
    582a:	cf 91       	pop	r28
    582c:	df 91       	pop	r29
    582e:	08 95       	ret

00005830 <MTWI_RecieveDataByte>:


TWI_ErrorState MTWI_RecieveDataByte(u8* Copy_pu8RecievedData){
    5830:	df 93       	push	r29
    5832:	cf 93       	push	r28
    5834:	00 d0       	rcall	.+0      	; 0x5836 <MTWI_RecieveDataByte+0x6>
    5836:	00 d0       	rcall	.+0      	; 0x5838 <MTWI_RecieveDataByte+0x8>
    5838:	cd b7       	in	r28, 0x3d	; 61
    583a:	de b7       	in	r29, 0x3e	; 62
    583c:	9c 83       	std	Y+4, r25	; 0x04
    583e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Status;
	TWI_ErrorState Local_ErrorState = TWI_OK;
    5840:	81 e0       	ldi	r24, 0x01	; 1
    5842:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8RecievedData != STD_TYPES_NULL){
    5844:	8b 81       	ldd	r24, Y+3	; 0x03
    5846:	9c 81       	ldd	r25, Y+4	; 0x04
    5848:	00 97       	sbiw	r24, 0x00	; 0
    584a:	e1 f0       	breq	.+56     	; 0x5884 <MTWI_RecieveDataByte+0x54>
		/*CLR the flag*/
		SET_BIT(MTWI_u8_TWCR_REG , 7);
    584c:	a6 e5       	ldi	r26, 0x56	; 86
    584e:	b0 e0       	ldi	r27, 0x00	; 0
    5850:	e6 e5       	ldi	r30, 0x56	; 86
    5852:	f0 e0       	ldi	r31, 0x00	; 0
    5854:	80 81       	ld	r24, Z
    5856:	80 68       	ori	r24, 0x80	; 128
    5858:	8c 93       	st	X, r24
		Local_u8Status = status();
    585a:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <status>
    585e:	8a 83       	std	Y+2, r24	; 0x02
		if((Local_u8Status & GET_STATUS) != RECEIVE_BYTE_STATUS){
    5860:	8a 81       	ldd	r24, Y+2	; 0x02
    5862:	88 2f       	mov	r24, r24
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	88 7f       	andi	r24, 0xF8	; 248
    5868:	90 70       	andi	r25, 0x00	; 0
    586a:	80 35       	cpi	r24, 0x50	; 80
    586c:	91 05       	cpc	r25, r1
    586e:	19 f0       	breq	.+6      	; 0x5876 <MTWI_RecieveDataByte+0x46>
			Local_ErrorState = TWI_Recieve_DATA_ERROR;
    5870:	88 e0       	ldi	r24, 0x08	; 8
    5872:	89 83       	std	Y+1, r24	; 0x01
    5874:	09 c0       	rjmp	.+18     	; 0x5888 <MTWI_RecieveDataByte+0x58>
		}
		else{
			*Copy_pu8RecievedData = MTWI_u8_TWDR_REG;
    5876:	e3 e2       	ldi	r30, 0x23	; 35
    5878:	f0 e0       	ldi	r31, 0x00	; 0
    587a:	80 81       	ld	r24, Z
    587c:	eb 81       	ldd	r30, Y+3	; 0x03
    587e:	fc 81       	ldd	r31, Y+4	; 0x04
    5880:	80 83       	st	Z, r24
    5882:	02 c0       	rjmp	.+4      	; 0x5888 <MTWI_RecieveDataByte+0x58>
		}
	}
	else{
		Local_ErrorState = TWI_NULL_POINTER;
    5884:	87 e0       	ldi	r24, 0x07	; 7
    5886:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    5888:	89 81       	ldd	r24, Y+1	; 0x01
}
    588a:	0f 90       	pop	r0
    588c:	0f 90       	pop	r0
    588e:	0f 90       	pop	r0
    5890:	0f 90       	pop	r0
    5892:	cf 91       	pop	r28
    5894:	df 91       	pop	r29
    5896:	08 95       	ret

00005898 <MTWI_SendStopCondition>:


void MTWI_SendStopCondition(void){
    5898:	df 93       	push	r29
    589a:	cf 93       	push	r28
    589c:	cd b7       	in	r28, 0x3d	; 61
    589e:	de b7       	in	r29, 0x3e	; 62
	/*Send Stop Condition*/
	SET_BIT(MTWI_u8_TWCR_REG , 4);
    58a0:	a6 e5       	ldi	r26, 0x56	; 86
    58a2:	b0 e0       	ldi	r27, 0x00	; 0
    58a4:	e6 e5       	ldi	r30, 0x56	; 86
    58a6:	f0 e0       	ldi	r31, 0x00	; 0
    58a8:	80 81       	ld	r24, Z
    58aa:	80 61       	ori	r24, 0x10	; 16
    58ac:	8c 93       	st	X, r24
	/*CLR Flag*/
	SET_BIT(MTWI_u8_TWCR_REG , 7);
    58ae:	a6 e5       	ldi	r26, 0x56	; 86
    58b0:	b0 e0       	ldi	r27, 0x00	; 0
    58b2:	e6 e5       	ldi	r30, 0x56	; 86
    58b4:	f0 e0       	ldi	r31, 0x00	; 0
    58b6:	80 81       	ld	r24, Z
    58b8:	80 68       	ori	r24, 0x80	; 128
    58ba:	8c 93       	st	X, r24
}
    58bc:	cf 91       	pop	r28
    58be:	df 91       	pop	r29
    58c0:	08 95       	ret

000058c2 <status>:

static u8 status(void){
    58c2:	df 93       	push	r29
    58c4:	cf 93       	push	r28
    58c6:	cd b7       	in	r28, 0x3d	; 61
    58c8:	de b7       	in	r29, 0x3e	; 62
	/*Wait the flag*/
	while(!(GET_BIT(MTWI_u8_TWCR_REG , 7)));
    58ca:	e6 e5       	ldi	r30, 0x56	; 86
    58cc:	f0 e0       	ldi	r31, 0x00	; 0
    58ce:	80 81       	ld	r24, Z
    58d0:	88 23       	and	r24, r24
    58d2:	dc f7       	brge	.-10     	; 0x58ca <status+0x8>
	return MTWI_u8_TWSR_REG;
    58d4:	e1 e2       	ldi	r30, 0x21	; 33
    58d6:	f0 e0       	ldi	r31, 0x00	; 0
    58d8:	80 81       	ld	r24, Z
}
    58da:	cf 91       	pop	r28
    58dc:	df 91       	pop	r29
    58de:	08 95       	ret

000058e0 <main>:
#define HOURS_24          2

/* Global variables to set the clock*/
u8 onesSeconds = 5  , tensSeconds = 5 , onesMinutes =2 , tensMinutes = 3 ;
u8 onesHours = 1 , tensHours = 1, time;
int main(void){
    58e0:	df 93       	push	r29
    58e2:	cf 93       	push	r28
    58e4:	cd b7       	in	r28, 0x3d	; 61
    58e6:	de b7       	in	r29, 0x3e	; 62
    58e8:	63 97       	sbiw	r28, 0x13	; 19
    58ea:	0f b6       	in	r0, 0x3f	; 63
    58ec:	f8 94       	cli
    58ee:	de bf       	out	0x3e, r29	; 62
    58f0:	0f be       	out	0x3f, r0	; 63
    58f2:	cd bf       	out	0x3d, r28	; 61
	/* Enable the global interrupt */
	SET_BIT(SREG_REG,7);
    58f4:	af e5       	ldi	r26, 0x5F	; 95
    58f6:	b0 e0       	ldi	r27, 0x00	; 0
    58f8:	ef e5       	ldi	r30, 0x5F	; 95
    58fa:	f0 e0       	ldi	r31, 0x00	; 0
    58fc:	80 81       	ld	r24, Z
    58fe:	80 68       	ori	r24, 0x80	; 128
    5900:	8c 93       	st	X, r24
	/* Init Function*/
	MDIO_u8INIT();
    5902:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <MDIO_u8INIT>
	HLCD_voidINIT();
    5906:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <HLCD_voidINIT>
	HEEPROM_voidInit(FREQ_400K);
    590a:	84 e0       	ldi	r24, 0x04	; 4
    590c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <HEEPROM_voidInit>

     while(1){
	  u8 loginTest = 0 , returnedValue ;
    5910:	1b 8a       	std	Y+19, r1	; 0x13
	  static u8 systemResetFlag = 0 , breakFlag = 0 , systemBreak = 0;
	  HEEPROM_u8ReadByte(&systemResetFlag,1);
    5912:	8a ed       	ldi	r24, 0xDA	; 218
    5914:	92 e0       	ldi	r25, 0x02	; 2
    5916:	61 e0       	ldi	r22, 0x01	; 1
    5918:	70 e0       	ldi	r23, 0x00	; 0
    591a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <HEEPROM_u8ReadByte>
	  /*Check if this is the first time or system is reseted*/
	  if(systemResetFlag != 1){
    591e:	80 91 da 02 	lds	r24, 0x02DA
    5922:	81 30       	cpi	r24, 0x01	; 1
    5924:	11 f0       	breq	.+4      	; 0x592a <main+0x4a>
	  	System_Reset();
    5926:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <System_Reset>
	  }

	  HLCD_u8ClearDisplay();
    592a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
	  HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_0);
    592e:	81 e0       	ldi	r24, 0x01	; 1
    5930:	60 e0       	ldi	r22, 0x00	; 0
    5932:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	  /*Getting the password from the user and check it*/
	  HLCD_u8SendString("Enter your pass",0);
    5936:	8d ef       	ldi	r24, 0xFD	; 253
    5938:	90 e0       	ldi	r25, 0x00	; 0
    593a:	60 e0       	ldi	r22, 0x00	; 0
    593c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
	  loginTest = Login_System();
    5940:	0e 94 c1 19 	call	0x3382	; 0x3382 <Login_System>
    5944:	8b 8b       	std	Y+19, r24	; 0x13
	  HLCD_u8ClearDisplay();
    5946:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
	  if(!loginTest){ //Falied Login
    594a:	8b 89       	ldd	r24, Y+19	; 0x13
    594c:	88 23       	and	r24, r24
    594e:	09 f0       	breq	.+2      	; 0x5952 <main+0x72>
    5950:	81 c0       	rjmp	.+258    	; 0x5a54 <main+0x174>
		  HLCD_u8SendString("no more trials",0);
    5952:	8d e0       	ldi	r24, 0x0D	; 13
    5954:	91 e0       	ldi	r25, 0x01	; 1
    5956:	60 e0       	ldi	r22, 0x00	; 0
    5958:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
		  HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    595c:	82 e0       	ldi	r24, 0x02	; 2
    595e:	60 e0       	ldi	r22, 0x00	; 0
    5960:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		  HLCD_u8SendString("wait 3 seconds",0);
    5964:	8c e1       	ldi	r24, 0x1C	; 28
    5966:	91 e0       	ldi	r25, 0x01	; 1
    5968:	60 e0       	ldi	r22, 0x00	; 0
    596a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    596e:	80 e0       	ldi	r24, 0x00	; 0
    5970:	90 e8       	ldi	r25, 0x80	; 128
    5972:	ab e3       	ldi	r26, 0x3B	; 59
    5974:	b5 e4       	ldi	r27, 0x45	; 69
    5976:	8b 87       	std	Y+11, r24	; 0x0b
    5978:	9c 87       	std	Y+12, r25	; 0x0c
    597a:	ad 87       	std	Y+13, r26	; 0x0d
    597c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    597e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5980:	7c 85       	ldd	r23, Y+12	; 0x0c
    5982:	8d 85       	ldd	r24, Y+13	; 0x0d
    5984:	9e 85       	ldd	r25, Y+14	; 0x0e
    5986:	20 e0       	ldi	r18, 0x00	; 0
    5988:	30 e0       	ldi	r19, 0x00	; 0
    598a:	4a ef       	ldi	r20, 0xFA	; 250
    598c:	54 e4       	ldi	r21, 0x44	; 68
    598e:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    5992:	dc 01       	movw	r26, r24
    5994:	cb 01       	movw	r24, r22
    5996:	8f 83       	std	Y+7, r24	; 0x07
    5998:	98 87       	std	Y+8, r25	; 0x08
    599a:	a9 87       	std	Y+9, r26	; 0x09
    599c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    599e:	6f 81       	ldd	r22, Y+7	; 0x07
    59a0:	78 85       	ldd	r23, Y+8	; 0x08
    59a2:	89 85       	ldd	r24, Y+9	; 0x09
    59a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    59a6:	20 e0       	ldi	r18, 0x00	; 0
    59a8:	30 e0       	ldi	r19, 0x00	; 0
    59aa:	40 e8       	ldi	r20, 0x80	; 128
    59ac:	5f e3       	ldi	r21, 0x3F	; 63
    59ae:	0e 94 93 0b 	call	0x1726	; 0x1726 <__ltsf2>
    59b2:	88 23       	and	r24, r24
    59b4:	2c f4       	brge	.+10     	; 0x59c0 <main+0xe0>
		__ticks = 1;
    59b6:	81 e0       	ldi	r24, 0x01	; 1
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	9e 83       	std	Y+6, r25	; 0x06
    59bc:	8d 83       	std	Y+5, r24	; 0x05
    59be:	3f c0       	rjmp	.+126    	; 0x5a3e <main+0x15e>
	else if (__tmp > 65535)
    59c0:	6f 81       	ldd	r22, Y+7	; 0x07
    59c2:	78 85       	ldd	r23, Y+8	; 0x08
    59c4:	89 85       	ldd	r24, Y+9	; 0x09
    59c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    59c8:	20 e0       	ldi	r18, 0x00	; 0
    59ca:	3f ef       	ldi	r19, 0xFF	; 255
    59cc:	4f e7       	ldi	r20, 0x7F	; 127
    59ce:	57 e4       	ldi	r21, 0x47	; 71
    59d0:	0e 94 33 0b 	call	0x1666	; 0x1666 <__gtsf2>
    59d4:	18 16       	cp	r1, r24
    59d6:	4c f5       	brge	.+82     	; 0x5a2a <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    59da:	7c 85       	ldd	r23, Y+12	; 0x0c
    59dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    59de:	9e 85       	ldd	r25, Y+14	; 0x0e
    59e0:	20 e0       	ldi	r18, 0x00	; 0
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	40 e2       	ldi	r20, 0x20	; 32
    59e6:	51 e4       	ldi	r21, 0x41	; 65
    59e8:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
    59ec:	dc 01       	movw	r26, r24
    59ee:	cb 01       	movw	r24, r22
    59f0:	bc 01       	movw	r22, r24
    59f2:	cd 01       	movw	r24, r26
    59f4:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    59f8:	dc 01       	movw	r26, r24
    59fa:	cb 01       	movw	r24, r22
    59fc:	9e 83       	std	Y+6, r25	; 0x06
    59fe:	8d 83       	std	Y+5, r24	; 0x05
    5a00:	0f c0       	rjmp	.+30     	; 0x5a20 <main+0x140>
    5a02:	88 ec       	ldi	r24, 0xC8	; 200
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	9c 83       	std	Y+4, r25	; 0x04
    5a08:	8b 83       	std	Y+3, r24	; 0x03
    5a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    5a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    5a0e:	01 97       	sbiw	r24, 0x01	; 1
    5a10:	f1 f7       	brne	.-4      	; 0x5a0e <main+0x12e>
    5a12:	9c 83       	std	Y+4, r25	; 0x04
    5a14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a16:	8d 81       	ldd	r24, Y+5	; 0x05
    5a18:	9e 81       	ldd	r25, Y+6	; 0x06
    5a1a:	01 97       	sbiw	r24, 0x01	; 1
    5a1c:	9e 83       	std	Y+6, r25	; 0x06
    5a1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a20:	8d 81       	ldd	r24, Y+5	; 0x05
    5a22:	9e 81       	ldd	r25, Y+6	; 0x06
    5a24:	00 97       	sbiw	r24, 0x00	; 0
    5a26:	69 f7       	brne	.-38     	; 0x5a02 <main+0x122>
    5a28:	73 cf       	rjmp	.-282    	; 0x5910 <main+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    5a2c:	78 85       	ldd	r23, Y+8	; 0x08
    5a2e:	89 85       	ldd	r24, Y+9	; 0x09
    5a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a32:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5a36:	dc 01       	movw	r26, r24
    5a38:	cb 01       	movw	r24, r22
    5a3a:	9e 83       	std	Y+6, r25	; 0x06
    5a3c:	8d 83       	std	Y+5, r24	; 0x05
    5a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a40:	9e 81       	ldd	r25, Y+6	; 0x06
    5a42:	9a 83       	std	Y+2, r25	; 0x02
    5a44:	89 83       	std	Y+1, r24	; 0x01
    5a46:	89 81       	ldd	r24, Y+1	; 0x01
    5a48:	9a 81       	ldd	r25, Y+2	; 0x02
    5a4a:	01 97       	sbiw	r24, 0x01	; 1
    5a4c:	f1 f7       	brne	.-4      	; 0x5a4a <main+0x16a>
    5a4e:	9a 83       	std	Y+2, r25	; 0x02
    5a50:	89 83       	std	Y+1, r24	; 0x01
    5a52:	5e cf       	rjmp	.-324    	; 0x5910 <main+0x30>
		  _delay_ms(3000);
	  }
	  else{
		  while(1){
		  HLCD_u8ClearDisplay();
    5a54:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
		  HLCD_u8SendString("1-Clock",0);
    5a58:	8b e2       	ldi	r24, 0x2B	; 43
    5a5a:	91 e0       	ldi	r25, 0x01	; 1
    5a5c:	60 e0       	ldi	r22, 0x00	; 0
    5a5e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
		  HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    5a62:	82 e0       	ldi	r24, 0x02	; 2
    5a64:	60 e0       	ldi	r22, 0x00	; 0
    5a66:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		  HLCD_u8SendString("2-settings",0);
    5a6a:	83 e3       	ldi	r24, 0x33	; 51
    5a6c:	91 e0       	ldi	r25, 0x01	; 1
    5a6e:	60 e0       	ldi	r22, 0x00	; 0
    5a70:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
		  returnedValue = Get_Pressed();
    5a74:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5a78:	8a 8b       	std	Y+18, r24	; 0x12
		  if(returnedValue == '1'){
    5a7a:	8a 89       	ldd	r24, Y+18	; 0x12
    5a7c:	81 33       	cpi	r24, 0x31	; 49
    5a7e:	09 f0       	breq	.+2      	; 0x5a82 <main+0x1a2>
    5a80:	bc c0       	rjmp	.+376    	; 0x5bfa <main+0x31a>
			  while(1){
			  HLCD_u8ClearDisplay();
    5a82:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
			  HLCD_u8SendString("1- 12 Hours",0);
    5a86:	8e e3       	ldi	r24, 0x3E	; 62
    5a88:	91 e0       	ldi	r25, 0x01	; 1
    5a8a:	60 e0       	ldi	r22, 0x00	; 0
    5a8c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
			  HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    5a90:	82 e0       	ldi	r24, 0x02	; 2
    5a92:	60 e0       	ldi	r22, 0x00	; 0
    5a94:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			  HLCD_u8SendString("2- 24 Hours",0);
    5a98:	8a e4       	ldi	r24, 0x4A	; 74
    5a9a:	91 e0       	ldi	r25, 0x01	; 1
    5a9c:	60 e0       	ldi	r22, 0x00	; 0
    5a9e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
			  /*Get the user option*/
			  returnedValue = Get_Pressed();
    5aa2:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5aa6:	8a 8b       	std	Y+18, r24	; 0x12
			    if(returnedValue == '1'){
    5aa8:	8a 89       	ldd	r24, Y+18	; 0x12
    5aaa:	81 33       	cpi	r24, 0x31	; 49
    5aac:	09 f0       	breq	.+2      	; 0x5ab0 <main+0x1d0>
    5aae:	6b c0       	rjmp	.+214    	; 0x5b86 <main+0x2a6>
			    	/*Clock mode*/
			    	while(1){
			    	u8 test;
			    	HLCD_u8ClearDisplay();
    5ab0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
			    	HLCD_u8SendString("1- AM   2- PM",0);
    5ab4:	86 e5       	ldi	r24, 0x56	; 86
    5ab6:	91 e0       	ldi	r25, 0x01	; 1
    5ab8:	60 e0       	ldi	r22, 0x00	; 0
    5aba:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
			    	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    5abe:	82 e0       	ldi	r24, 0x02	; 2
    5ac0:	60 e0       	ldi	r22, 0x00	; 0
    5ac2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			    	/*Get the user Option*/
			    	returnedValue = Get_Pressed();
    5ac6:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5aca:	8a 8b       	std	Y+18, r24	; 0x12
			    	HLCD_u8ClearDisplay();
    5acc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
			    	HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_0);
    5ad0:	81 e0       	ldi	r24, 0x01	; 1
    5ad2:	60 e0       	ldi	r22, 0x00	; 0
    5ad4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			    	HLCD_u8SendString("hrs",1);
    5ad8:	84 e6       	ldi	r24, 0x64	; 100
    5ada:	91 e0       	ldi	r25, 0x01	; 1
    5adc:	61 e0       	ldi	r22, 0x01	; 1
    5ade:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
			    	HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_4);
    5ae2:	81 e0       	ldi	r24, 0x01	; 1
    5ae4:	64 e0       	ldi	r22, 0x04	; 4
    5ae6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			    	HLCD_u8SendString("mins",5);
    5aea:	88 e6       	ldi	r24, 0x68	; 104
    5aec:	91 e0       	ldi	r25, 0x01	; 1
    5aee:	65 e0       	ldi	r22, 0x05	; 5
    5af0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
			    	HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_9);
    5af4:	81 e0       	ldi	r24, 0x01	; 1
    5af6:	69 e0       	ldi	r22, 0x09	; 9
    5af8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			    	HLCD_u8SendString("secs",10);
    5afc:	8d e6       	ldi	r24, 0x6D	; 109
    5afe:	91 e0       	ldi	r25, 0x01	; 1
    5b00:	6a e0       	ldi	r22, 0x0A	; 10
    5b02:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
			    	/*Set Clock in 12 Hours mode*/
			    	Set_Clock(HOURS_12);
    5b06:	81 e0       	ldi	r24, 0x01	; 1
    5b08:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <Set_Clock>
			    	HLCD_u8ClearDisplay();
    5b0c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
			    	if(returnedValue == '1'){
    5b10:	8a 89       	ldd	r24, Y+18	; 0x12
    5b12:	81 33       	cpi	r24, 0x31	; 49
    5b14:	d1 f4       	brne	.+52     	; 0x5b4a <main+0x26a>
			    		time = AM;
    5b16:	81 e0       	ldi	r24, 0x01	; 1
    5b18:	80 93 e0 02 	sts	0x02E0, r24
			    		Start_Clock_12Hours(time);
    5b1c:	80 91 e0 02 	lds	r24, 0x02E0
    5b20:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <Start_Clock_12Hours>
			    		while(1){
			    			/*Check if the user want to return*/
			    		test = Get_Pressed();
    5b24:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5b28:	89 8b       	std	Y+17, r24	; 0x11
			    		if(test == 'C'){
    5b2a:	89 89       	ldd	r24, Y+17	; 0x11
    5b2c:	83 34       	cpi	r24, 0x43	; 67
    5b2e:	d1 f7       	brne	.-12     	; 0x5b24 <main+0x244>
			    			breakFlag = 1;
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	80 93 d9 02 	sts	0x02D9, r24
			    			MTMR_u8StopTimer();
    5b36:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MTMR_u8StopTimer>
			    			break;
			    		}
			    	  }
			    		if(breakFlag){
    5b3a:	80 91 d9 02 	lds	r24, 0x02D9
    5b3e:	88 23       	and	r24, r24
    5b40:	09 f4       	brne	.+2      	; 0x5b44 <main+0x264>
    5b42:	b6 cf       	rjmp	.-148    	; 0x5ab0 <main+0x1d0>
			    			breakFlag = 0;
    5b44:	10 92 d9 02 	sts	0x02D9, r1
    5b48:	9c cf       	rjmp	.-200    	; 0x5a82 <main+0x1a2>
			    			break;
			    		}
			    	}
			    	else if(returnedValue == '2') {
    5b4a:	8a 89       	ldd	r24, Y+18	; 0x12
    5b4c:	82 33       	cpi	r24, 0x32	; 50
    5b4e:	09 f0       	breq	.+2      	; 0x5b52 <main+0x272>
    5b50:	af cf       	rjmp	.-162    	; 0x5ab0 <main+0x1d0>
			    		time = PM;
    5b52:	82 e0       	ldi	r24, 0x02	; 2
    5b54:	80 93 e0 02 	sts	0x02E0, r24
			    		Start_Clock_12Hours(time);
    5b58:	80 91 e0 02 	lds	r24, 0x02E0
    5b5c:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <Start_Clock_12Hours>
			    		while(1){
			    			/*Check if the user want to return*/
			    		test = Get_Pressed();
    5b60:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5b64:	89 8b       	std	Y+17, r24	; 0x11
			    		if(test == 'C'){
    5b66:	89 89       	ldd	r24, Y+17	; 0x11
    5b68:	83 34       	cpi	r24, 0x43	; 67
    5b6a:	d1 f7       	brne	.-12     	; 0x5b60 <main+0x280>
			    			breakFlag = 1;
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	80 93 d9 02 	sts	0x02D9, r24
			    			MTMR_u8StopTimer();
    5b72:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MTMR_u8StopTimer>
			    			break;
			    		}
			    	  }
			    		if(breakFlag){
    5b76:	80 91 d9 02 	lds	r24, 0x02D9
    5b7a:	88 23       	and	r24, r24
    5b7c:	09 f4       	brne	.+2      	; 0x5b80 <main+0x2a0>
    5b7e:	98 cf       	rjmp	.-208    	; 0x5ab0 <main+0x1d0>
			    			/*return to the main options*/
			    			breakFlag = 0;
    5b80:	10 92 d9 02 	sts	0x02D9, r1
    5b84:	7e cf       	rjmp	.-260    	; 0x5a82 <main+0x1a2>
			    			break;
			    		}
			    	}
			    }
			  }
			  else if(returnedValue == 'C') break;
    5b86:	8a 89       	ldd	r24, Y+18	; 0x12
    5b88:	83 34       	cpi	r24, 0x43	; 67
    5b8a:	09 f4       	brne	.+2      	; 0x5b8e <main+0x2ae>
    5b8c:	63 cf       	rjmp	.-314    	; 0x5a54 <main+0x174>
			  else{
				  /*Clock in 24 Hours Mode*/
				  while(1){
				  u8 test;
				  HLCD_u8ClearDisplay();
    5b8e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
				  HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_0);
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	60 e0       	ldi	r22, 0x00	; 0
    5b96:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
				  HLCD_u8SendString("hrs",1);
    5b9a:	84 e6       	ldi	r24, 0x64	; 100
    5b9c:	91 e0       	ldi	r25, 0x01	; 1
    5b9e:	61 e0       	ldi	r22, 0x01	; 1
    5ba0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
				  HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_4);
    5ba4:	81 e0       	ldi	r24, 0x01	; 1
    5ba6:	64 e0       	ldi	r22, 0x04	; 4
    5ba8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
				  HLCD_u8SendString("mins",5);
    5bac:	88 e6       	ldi	r24, 0x68	; 104
    5bae:	91 e0       	ldi	r25, 0x01	; 1
    5bb0:	65 e0       	ldi	r22, 0x05	; 5
    5bb2:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
				  HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_9);
    5bb6:	81 e0       	ldi	r24, 0x01	; 1
    5bb8:	69 e0       	ldi	r22, 0x09	; 9
    5bba:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
				  HLCD_u8SendString("secs",10);
    5bbe:	8d e6       	ldi	r24, 0x6D	; 109
    5bc0:	91 e0       	ldi	r25, 0x01	; 1
    5bc2:	6a e0       	ldi	r22, 0x0A	; 10
    5bc4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
				  /*Set Clock in 24 Hours Mode*/
				  Set_Clock(HOURS_24);
    5bc8:	82 e0       	ldi	r24, 0x02	; 2
    5bca:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <Set_Clock>
				  HLCD_u8ClearDisplay();
    5bce:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
				  /*Start Timing and the clock*/
				  Start_Clock_24Hours();
    5bd2:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <Start_Clock_24Hours>

				  while(1){
					  /* Check if the user wants to return*/
					  test = Get_Pressed();
    5bd6:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5bda:	88 8b       	std	Y+16, r24	; 0x10
					  if(test == 'C'){
    5bdc:	88 89       	ldd	r24, Y+16	; 0x10
    5bde:	83 34       	cpi	r24, 0x43	; 67
    5be0:	d1 f7       	brne	.-12     	; 0x5bd6 <main+0x2f6>
					  	breakFlag = 1;
    5be2:	81 e0       	ldi	r24, 0x01	; 1
    5be4:	80 93 d9 02 	sts	0x02D9, r24
					  	MTMR_u8StopTimer();
    5be8:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <MTMR_u8StopTimer>
					  	break;
					  }
				  }
				  if(breakFlag){
    5bec:	80 91 d9 02 	lds	r24, 0x02D9
    5bf0:	88 23       	and	r24, r24
    5bf2:	69 f2       	breq	.-102    	; 0x5b8e <main+0x2ae>
					  /*if the user wants to return to the main menu*/
				  	breakFlag = 0;
    5bf4:	10 92 d9 02 	sts	0x02D9, r1
    5bf8:	44 cf       	rjmp	.-376    	; 0x5a82 <main+0x1a2>
				  }
			  }
			 }
		  }
		 }
		else if(returnedValue == 'C') break;
    5bfa:	8a 89       	ldd	r24, Y+18	; 0x12
    5bfc:	83 34       	cpi	r24, 0x43	; 67
    5bfe:	09 f4       	brne	.+2      	; 0x5c02 <main+0x322>
    5c00:	87 ce       	rjmp	.-754    	; 0x5910 <main+0x30>
		else if(returnedValue == '2'){
    5c02:	8a 89       	ldd	r24, Y+18	; 0x12
    5c04:	82 33       	cpi	r24, 0x32	; 50
    5c06:	09 f0       	breq	.+2      	; 0x5c0a <main+0x32a>
    5c08:	25 cf       	rjmp	.-438    	; 0x5a54 <main+0x174>
			/*Setting mode*/
			  while(1){
			  u8 flag = 0;
    5c0a:	1f 86       	std	Y+15, r1	; 0x0f
			  HLCD_u8ClearDisplay();
    5c0c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
			  HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_0);
    5c10:	81 e0       	ldi	r24, 0x01	; 1
    5c12:	60 e0       	ldi	r22, 0x00	; 0
    5c14:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			  HLCD_u8SendString("1- Change pass",0);
    5c18:	82 e7       	ldi	r24, 0x72	; 114
    5c1a:	91 e0       	ldi	r25, 0x01	; 1
    5c1c:	60 e0       	ldi	r22, 0x00	; 0
    5c1e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
			  HLCD_u8SetCursor(HLCD_u8_LINE_2 , HLCD_u8_Position_0);
    5c22:	82 e0       	ldi	r24, 0x02	; 2
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			  HLCD_u8SendString("2- Reset System",0);
    5c2a:	81 e8       	ldi	r24, 0x81	; 129
    5c2c:	91 e0       	ldi	r25, 0x01	; 1
    5c2e:	60 e0       	ldi	r22, 0x00	; 0
    5c30:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
			  returnedValue = Get_Pressed();
    5c34:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5c38:	8a 8b       	std	Y+18, r24	; 0x12
			  if(returnedValue == '1'){
    5c3a:	8a 89       	ldd	r24, Y+18	; 0x12
    5c3c:	81 33       	cpi	r24, 0x31	; 49
    5c3e:	91 f4       	brne	.+36     	; 0x5c64 <main+0x384>
				  /*Changing the old password*/
				  HLCD_u8ClearDisplay();
    5c40:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
				  flag = Modify_Password();
    5c44:	0e 94 28 1b 	call	0x3650	; 0x3650 <Modify_Password>
    5c48:	8f 87       	std	Y+15, r24	; 0x0f
				  if(flag){
    5c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c4c:	88 23       	and	r24, r24
    5c4e:	31 f0       	breq	.+12     	; 0x5c5c <main+0x37c>
					  /*User Entered the old password correctly*/
					  HLCD_u8ClearDisplay();
    5c50:	0e 94 d5 16 	call	0x2daa	; 0x2daa <HLCD_u8ClearDisplay>
					  systemBreak = 1;
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	80 93 d8 02 	sts	0x02D8, r24
    5c5a:	d7 cf       	rjmp	.-82     	; 0x5c0a <main+0x32a>
				  }
				  else{
					  /*User Entered the old password wrong*/
					  systemBreak = 1;
    5c5c:	81 e0       	ldi	r24, 0x01	; 1
    5c5e:	80 93 d8 02 	sts	0x02D8, r24
    5c62:	0f c0       	rjmp	.+30     	; 0x5c82 <main+0x3a2>
					  break;
				  }
			  }
			  else if(returnedValue == '2'){
    5c64:	8a 89       	ldd	r24, Y+18	; 0x12
    5c66:	82 33       	cpi	r24, 0x32	; 50
    5c68:	49 f4       	brne	.+18     	; 0x5c7c <main+0x39c>
				  /*reset the system*/
				  HEEPROM_u8WriteByte(0,1);
    5c6a:	80 e0       	ldi	r24, 0x00	; 0
    5c6c:	61 e0       	ldi	r22, 0x01	; 1
    5c6e:	70 e0       	ldi	r23, 0x00	; 0
    5c70:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <HEEPROM_u8WriteByte>
				  systemBreak = 1;
    5c74:	81 e0       	ldi	r24, 0x01	; 1
    5c76:	80 93 d8 02 	sts	0x02D8, r24
    5c7a:	03 c0       	rjmp	.+6      	; 0x5c82 <main+0x3a2>
				  break;
			  }
			  else if(returnedValue == 'C') break;
    5c7c:	8a 89       	ldd	r24, Y+18	; 0x12
    5c7e:	83 34       	cpi	r24, 0x43	; 67
    5c80:	21 f6       	brne	.-120    	; 0x5c0a <main+0x32a>
		  }
			  if(systemBreak){
    5c82:	80 91 d8 02 	lds	r24, 0x02D8
    5c86:	88 23       	and	r24, r24
    5c88:	09 f4       	brne	.+2      	; 0x5c8c <main+0x3ac>
    5c8a:	e4 ce       	rjmp	.-568    	; 0x5a54 <main+0x174>
				  /*reset the system and begin from the start*/
			    systemBreak = 0;
    5c8c:	10 92 d8 02 	sts	0x02D8, r1
    5c90:	3f ce       	rjmp	.-898    	; 0x5910 <main+0x30>

00005c92 <Get_Pressed>:
    }
	return 0;
 }


u8 Get_Pressed(void){
    5c92:	df 93       	push	r29
    5c94:	cf 93       	push	r28
    5c96:	0f 92       	push	r0
    5c98:	cd b7       	in	r28, 0x3d	; 61
    5c9a:	de b7       	in	r29, 0x3e	; 62
	u8 returnedValue;
	while(1){
		/*Get user input */
	  HKPD_u8GetKey(&returnedValue);
    5c9c:	ce 01       	movw	r24, r28
    5c9e:	01 96       	adiw	r24, 0x01	; 1
    5ca0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <HKPD_u8GetKey>
	  if(returnedValue != HKPD_u8_NO_KEY_PRESSED){
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    5ca8:	c9 f3       	breq	.-14     	; 0x5c9c <Get_Pressed+0xa>
		  HLCD_u8SendChar(returnedValue);
    5caa:	89 81       	ldd	r24, Y+1	; 0x01
    5cac:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <HLCD_u8SendChar>
		  break;
	  }
	}
	  return returnedValue;
    5cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    5cb2:	0f 90       	pop	r0
    5cb4:	cf 91       	pop	r28
    5cb6:	df 91       	pop	r29
    5cb8:	08 95       	ret

00005cba <Set_Clock>:

void Set_Clock(u8 timeSystem){
    5cba:	df 93       	push	r29
    5cbc:	cf 93       	push	r28
    5cbe:	0f 92       	push	r0
    5cc0:	cd b7       	in	r28, 0x3d	; 61
    5cc2:	de b7       	in	r29, 0x3e	; 62
    5cc4:	89 83       	std	Y+1, r24	; 0x01
	/*Set Hours*/

	/*Hours shouldn't exceed 12 or 24 according to the chosen system*/
	if(timeSystem == HOURS_12){ /*For 12Hours System*/
    5cc6:	89 81       	ldd	r24, Y+1	; 0x01
    5cc8:	81 30       	cpi	r24, 0x01	; 1
    5cca:	49 f5       	brne	.+82     	; 0x5d1e <Set_Clock+0x64>
		/*Check if the user didn't enter a wrong value */
	   do{
	   HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    5ccc:	82 e0       	ldi	r24, 0x02	; 2
    5cce:	60 e0       	ldi	r22, 0x00	; 0
    5cd0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	   tensHours = (Get_Pressed()-48);
    5cd4:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5cd8:	80 53       	subi	r24, 0x30	; 48
    5cda:	80 93 c4 02 	sts	0x02C4, r24
	   }while(tensHours > 1);
    5cde:	80 91 c4 02 	lds	r24, 0x02C4
    5ce2:	82 30       	cpi	r24, 0x02	; 2
    5ce4:	98 f7       	brcc	.-26     	; 0x5ccc <Set_Clock+0x12>

	   if(tensHours == 0){
    5ce6:	80 91 c4 02 	lds	r24, 0x02C4
    5cea:	88 23       	and	r24, r24
    5cec:	51 f4       	brne	.+20     	; 0x5d02 <Set_Clock+0x48>
	    HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_1);
    5cee:	82 e0       	ldi	r24, 0x02	; 2
    5cf0:	61 e0       	ldi	r22, 0x01	; 1
    5cf2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	    onesHours = (Get_Pressed()-48);
    5cf6:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5cfa:	80 53       	subi	r24, 0x30	; 48
    5cfc:	80 93 c3 02 	sts	0x02C3, r24
    5d00:	36 c0       	rjmp	.+108    	; 0x5d6e <Set_Clock+0xb4>
	   }
	   else{
		   /*Check if the user didn't enter a wrong value */
	   	do{
	   		HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_1);
    5d02:	82 e0       	ldi	r24, 0x02	; 2
    5d04:	61 e0       	ldi	r22, 0x01	; 1
    5d06:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	   		onesHours = (Get_Pressed()-48);
    5d0a:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5d0e:	80 53       	subi	r24, 0x30	; 48
    5d10:	80 93 c3 02 	sts	0x02C3, r24
	   	}while(onesHours > 2);
    5d14:	80 91 c3 02 	lds	r24, 0x02C3
    5d18:	83 30       	cpi	r24, 0x03	; 3
    5d1a:	98 f7       	brcc	.-26     	; 0x5d02 <Set_Clock+0x48>
    5d1c:	28 c0       	rjmp	.+80     	; 0x5d6e <Set_Clock+0xb4>
	   }
	}
	else{ /*For 24Hours System*/
		/*Check if the user didn't enter a wrong value */
		  do{
		  HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    5d1e:	82 e0       	ldi	r24, 0x02	; 2
    5d20:	60 e0       	ldi	r22, 0x00	; 0
    5d22:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		  tensHours = (Get_Pressed()-48);
    5d26:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5d2a:	80 53       	subi	r24, 0x30	; 48
    5d2c:	80 93 c4 02 	sts	0x02C4, r24
		  }while(tensHours > 2);
    5d30:	80 91 c4 02 	lds	r24, 0x02C4
    5d34:	83 30       	cpi	r24, 0x03	; 3
    5d36:	98 f7       	brcc	.-26     	; 0x5d1e <Set_Clock+0x64>

		  if(tensHours < 2){
    5d38:	80 91 c4 02 	lds	r24, 0x02C4
    5d3c:	82 30       	cpi	r24, 0x02	; 2
    5d3e:	50 f4       	brcc	.+20     	; 0x5d54 <Set_Clock+0x9a>
		   HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_1);
    5d40:	82 e0       	ldi	r24, 0x02	; 2
    5d42:	61 e0       	ldi	r22, 0x01	; 1
    5d44:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		   onesHours = (Get_Pressed()-48);
    5d48:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5d4c:	80 53       	subi	r24, 0x30	; 48
    5d4e:	80 93 c3 02 	sts	0x02C3, r24
    5d52:	0d c0       	rjmp	.+26     	; 0x5d6e <Set_Clock+0xb4>
		  }
		  else{
		  	do{
		  		HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_1);
    5d54:	82 e0       	ldi	r24, 0x02	; 2
    5d56:	61 e0       	ldi	r22, 0x01	; 1
    5d58:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		  		onesHours = (Get_Pressed()-48);
    5d5c:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5d60:	80 53       	subi	r24, 0x30	; 48
    5d62:	80 93 c3 02 	sts	0x02C3, r24
		  	}while(onesHours > 4);
    5d66:	80 91 c3 02 	lds	r24, 0x02C3
    5d6a:	85 30       	cpi	r24, 0x05	; 5
    5d6c:	98 f7       	brcc	.-26     	; 0x5d54 <Set_Clock+0x9a>
	/* Set Minutes */
	/*Minute should be <= 60*/
	/*Check if the user didn't enter a wrong value */

	do{
	 HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_4);
    5d6e:	82 e0       	ldi	r24, 0x02	; 2
    5d70:	64 e0       	ldi	r22, 0x04	; 4
    5d72:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	 tensMinutes = (Get_Pressed()-48);
    5d76:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5d7a:	80 53       	subi	r24, 0x30	; 48
    5d7c:	80 93 c2 02 	sts	0x02C2, r24
	}while(tensMinutes > 6);
    5d80:	80 91 c2 02 	lds	r24, 0x02C2
    5d84:	87 30       	cpi	r24, 0x07	; 7
    5d86:	98 f7       	brcc	.-26     	; 0x5d6e <Set_Clock+0xb4>

	if(tensMinutes <6){
    5d88:	80 91 c2 02 	lds	r24, 0x02C2
    5d8c:	86 30       	cpi	r24, 0x06	; 6
    5d8e:	50 f4       	brcc	.+20     	; 0x5da4 <Set_Clock+0xea>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_5);
    5d90:	82 e0       	ldi	r24, 0x02	; 2
    5d92:	65 e0       	ldi	r22, 0x05	; 5
    5d94:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	onesMinutes = (Get_Pressed()-48);
    5d98:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5d9c:	80 53       	subi	r24, 0x30	; 48
    5d9e:	80 93 c1 02 	sts	0x02C1, r24
    5da2:	0d c0       	rjmp	.+26     	; 0x5dbe <Set_Clock+0x104>
	}
	else{
		/*Check if the user didn't enter a wrong value */
		do{
			HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_5);
    5da4:	82 e0       	ldi	r24, 0x02	; 2
    5da6:	65 e0       	ldi	r22, 0x05	; 5
    5da8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			onesMinutes = (Get_Pressed()-48);
    5dac:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5db0:	80 53       	subi	r24, 0x30	; 48
    5db2:	80 93 c1 02 	sts	0x02C1, r24
		}while(onesMinutes != 0);
    5db6:	80 91 c1 02 	lds	r24, 0x02C1
    5dba:	88 23       	and	r24, r24
    5dbc:	99 f7       	brne	.-26     	; 0x5da4 <Set_Clock+0xea>
	/*Set Seconds*/
	/*Seconds should be <= 60*/
	/*Check if the user didn't enter a wrong value */

	do{
	 HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_9);
    5dbe:	82 e0       	ldi	r24, 0x02	; 2
    5dc0:	69 e0       	ldi	r22, 0x09	; 9
    5dc2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	 tensSeconds = (Get_Pressed()-48);
    5dc6:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5dca:	80 53       	subi	r24, 0x30	; 48
    5dcc:	80 93 c0 02 	sts	0x02C0, r24
	}while(tensSeconds > 6);
    5dd0:	80 91 c0 02 	lds	r24, 0x02C0
    5dd4:	87 30       	cpi	r24, 0x07	; 7
    5dd6:	98 f7       	brcc	.-26     	; 0x5dbe <Set_Clock+0x104>

	if(tensSeconds < 6){
    5dd8:	80 91 c0 02 	lds	r24, 0x02C0
    5ddc:	86 30       	cpi	r24, 0x06	; 6
    5dde:	50 f4       	brcc	.+20     	; 0x5df4 <Set_Clock+0x13a>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_10);
    5de0:	82 e0       	ldi	r24, 0x02	; 2
    5de2:	6a e0       	ldi	r22, 0x0A	; 10
    5de4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	onesSeconds = (Get_Pressed()-48);
    5de8:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5dec:	80 53       	subi	r24, 0x30	; 48
    5dee:	80 93 bf 02 	sts	0x02BF, r24
    5df2:	0d c0       	rjmp	.+26     	; 0x5e0e <Set_Clock+0x154>
	}
	else{
		/*Check if the user didn't enter a wrong value */
		do{
			HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_10);
    5df4:	82 e0       	ldi	r24, 0x02	; 2
    5df6:	6a e0       	ldi	r22, 0x0A	; 10
    5df8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
			onesSeconds = (Get_Pressed()-48);
    5dfc:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <Get_Pressed>
    5e00:	80 53       	subi	r24, 0x30	; 48
    5e02:	80 93 bf 02 	sts	0x02BF, r24
		}while(onesSeconds != 0);
    5e06:	80 91 bf 02 	lds	r24, 0x02BF
    5e0a:	88 23       	and	r24, r24
    5e0c:	99 f7       	brne	.-26     	; 0x5df4 <Set_Clock+0x13a>
	}
}
    5e0e:	0f 90       	pop	r0
    5e10:	cf 91       	pop	r28
    5e12:	df 91       	pop	r29
    5e14:	08 95       	ret

00005e16 <Start_Clock_12Hours>:


void Start_Clock_12Hours(u8 time){
    5e16:	0f 93       	push	r16
    5e18:	1f 93       	push	r17
    5e1a:	df 93       	push	r29
    5e1c:	cf 93       	push	r28
    5e1e:	0f 92       	push	r0
    5e20:	cd b7       	in	r28, 0x3d	; 61
    5e22:	de b7       	in	r29, 0x3e	; 62
    5e24:	89 83       	std	Y+1, r24	; 0x01
    HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_0);
    5e26:	81 e0       	ldi	r24, 0x01	; 1
    5e28:	60 e0       	ldi	r22, 0x00	; 0
    5e2a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
    HLCD_u8SendString("hrs",1);
    5e2e:	84 e6       	ldi	r24, 0x64	; 100
    5e30:	91 e0       	ldi	r25, 0x01	; 1
    5e32:	61 e0       	ldi	r22, 0x01	; 1
    5e34:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_4);
    5e38:	81 e0       	ldi	r24, 0x01	; 1
    5e3a:	64 e0       	ldi	r22, 0x04	; 4
    5e3c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
    HLCD_u8SendString("mins",5);
    5e40:	88 e6       	ldi	r24, 0x68	; 104
    5e42:	91 e0       	ldi	r25, 0x01	; 1
    5e44:	65 e0       	ldi	r22, 0x05	; 5
    5e46:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_9);
    5e4a:	81 e0       	ldi	r24, 0x01	; 1
    5e4c:	69 e0       	ldi	r22, 0x09	; 9
    5e4e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
    HLCD_u8SendString("secs",10);
    5e52:	8d e6       	ldi	r24, 0x6D	; 109
    5e54:	91 e0       	ldi	r25, 0x01	; 1
    5e56:	6a e0       	ldi	r22, 0x0A	; 10
    5e58:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_14);
    5e5c:	81 e0       	ldi	r24, 0x01	; 1
    5e5e:	6e e0       	ldi	r22, 0x0E	; 14
    5e60:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
    if(time == AM)
    5e64:	89 81       	ldd	r24, Y+1	; 0x01
    5e66:	81 30       	cpi	r24, 0x01	; 1
    5e68:	31 f4       	brne	.+12     	; 0x5e76 <Start_Clock_12Hours+0x60>
      HLCD_u8SendString("AM",14);
    5e6a:	81 e9       	ldi	r24, 0x91	; 145
    5e6c:	91 e0       	ldi	r25, 0x01	; 1
    5e6e:	6e e0       	ldi	r22, 0x0E	; 14
    5e70:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    5e74:	05 c0       	rjmp	.+10     	; 0x5e80 <Start_Clock_12Hours+0x6a>
    else
    	HLCD_u8SendString("PM",14);
    5e76:	84 e9       	ldi	r24, 0x94	; 148
    5e78:	91 e0       	ldi	r25, 0x01	; 1
    5e7a:	6e e0       	ldi	r22, 0x0E	; 14
    5e7c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    /*Start Clock and enable timer*/
	MTMR_u8Timer0Init();
    5e80:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <MTMR_u8Timer0Init>
    MTMR_u8Timer0SetCallBack(0,&Clock_12Hours);
    5e84:	26 e9       	ldi	r18, 0x96	; 150
    5e86:	3f e2       	ldi	r19, 0x2F	; 47
    5e88:	80 e0       	ldi	r24, 0x00	; 0
    5e8a:	b9 01       	movw	r22, r18
    5e8c:	0e 94 36 2a 	call	0x546c	; 0x546c <MTMR_u8Timer0SetCallBack>
    MTMR_u8Timer0NormalModeTimeMapping(0,0,1,0,0);
    5e90:	80 e0       	ldi	r24, 0x00	; 0
    5e92:	60 e0       	ldi	r22, 0x00	; 0
    5e94:	70 e0       	ldi	r23, 0x00	; 0
    5e96:	41 e0       	ldi	r20, 0x01	; 1
    5e98:	50 e0       	ldi	r21, 0x00	; 0
    5e9a:	20 e0       	ldi	r18, 0x00	; 0
    5e9c:	30 e0       	ldi	r19, 0x00	; 0
    5e9e:	00 e0       	ldi	r16, 0x00	; 0
    5ea0:	10 e0       	ldi	r17, 0x00	; 0
    5ea2:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <MTMR_u8Timer0NormalModeTimeMapping>
}
    5ea6:	0f 90       	pop	r0
    5ea8:	cf 91       	pop	r28
    5eaa:	df 91       	pop	r29
    5eac:	1f 91       	pop	r17
    5eae:	0f 91       	pop	r16
    5eb0:	08 95       	ret

00005eb2 <Start_Clock_24Hours>:


void Start_Clock_24Hours(void){
    5eb2:	0f 93       	push	r16
    5eb4:	1f 93       	push	r17
    5eb6:	df 93       	push	r29
    5eb8:	cf 93       	push	r28
    5eba:	cd b7       	in	r28, 0x3d	; 61
    5ebc:	de b7       	in	r29, 0x3e	; 62
	 HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_0);
    5ebe:	81 e0       	ldi	r24, 0x01	; 1
    5ec0:	60 e0       	ldi	r22, 0x00	; 0
    5ec2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	 HLCD_u8SendString("hrs",1);
    5ec6:	84 e6       	ldi	r24, 0x64	; 100
    5ec8:	91 e0       	ldi	r25, 0x01	; 1
    5eca:	61 e0       	ldi	r22, 0x01	; 1
    5ecc:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
	 HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_4);
    5ed0:	81 e0       	ldi	r24, 0x01	; 1
    5ed2:	64 e0       	ldi	r22, 0x04	; 4
    5ed4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	 HLCD_u8SendString("mins",5);
    5ed8:	88 e6       	ldi	r24, 0x68	; 104
    5eda:	91 e0       	ldi	r25, 0x01	; 1
    5edc:	65 e0       	ldi	r22, 0x05	; 5
    5ede:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
	 HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_9);
    5ee2:	81 e0       	ldi	r24, 0x01	; 1
    5ee4:	69 e0       	ldi	r22, 0x09	; 9
    5ee6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	 HLCD_u8SendString("secs",10);
    5eea:	8d e6       	ldi	r24, 0x6D	; 109
    5eec:	91 e0       	ldi	r25, 0x01	; 1
    5eee:	6a e0       	ldi	r22, 0x0A	; 10
    5ef0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
	 HLCD_u8SetCursor(HLCD_u8_LINE_1 , HLCD_u8_Position_14);
    5ef4:	81 e0       	ldi	r24, 0x01	; 1
    5ef6:	6e e0       	ldi	r22, 0x0E	; 14
    5ef8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	 MTMR_u8Timer0Init();
    5efc:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <MTMR_u8Timer0Init>
	 MTMR_u8Timer0SetCallBack(0,&Clock_24Hours);
    5f00:	24 e4       	ldi	r18, 0x44	; 68
    5f02:	30 e3       	ldi	r19, 0x30	; 48
    5f04:	80 e0       	ldi	r24, 0x00	; 0
    5f06:	b9 01       	movw	r22, r18
    5f08:	0e 94 36 2a 	call	0x546c	; 0x546c <MTMR_u8Timer0SetCallBack>
	 MTMR_u8Timer0NormalModeTimeMapping(0,0,1,0,0);
    5f0c:	80 e0       	ldi	r24, 0x00	; 0
    5f0e:	60 e0       	ldi	r22, 0x00	; 0
    5f10:	70 e0       	ldi	r23, 0x00	; 0
    5f12:	41 e0       	ldi	r20, 0x01	; 1
    5f14:	50 e0       	ldi	r21, 0x00	; 0
    5f16:	20 e0       	ldi	r18, 0x00	; 0
    5f18:	30 e0       	ldi	r19, 0x00	; 0
    5f1a:	00 e0       	ldi	r16, 0x00	; 0
    5f1c:	10 e0       	ldi	r17, 0x00	; 0
    5f1e:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <MTMR_u8Timer0NormalModeTimeMapping>
}
    5f22:	cf 91       	pop	r28
    5f24:	df 91       	pop	r29
    5f26:	1f 91       	pop	r17
    5f28:	0f 91       	pop	r16
    5f2a:	08 95       	ret

00005f2c <Clock_12Hours>:


void Clock_12Hours(void){
    5f2c:	df 93       	push	r29
    5f2e:	cf 93       	push	r28
    5f30:	cd b7       	in	r28, 0x3d	; 61
    5f32:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    5f34:	82 e0       	ldi	r24, 0x02	; 2
    5f36:	60 e0       	ldi	r22, 0x00	; 0
    5f38:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(tensHours);
    5f3c:	80 91 c4 02 	lds	r24, 0x02C4
    5f40:	88 2f       	mov	r24, r24
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_1);
    5f48:	82 e0       	ldi	r24, 0x02	; 2
    5f4a:	61 e0       	ldi	r22, 0x01	; 1
    5f4c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(onesHours);
    5f50:	80 91 c3 02 	lds	r24, 0x02C3
    5f54:	88 2f       	mov	r24, r24
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_4);
    5f5c:	82 e0       	ldi	r24, 0x02	; 2
    5f5e:	64 e0       	ldi	r22, 0x04	; 4
    5f60:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(tensMinutes);
    5f64:	80 91 c2 02 	lds	r24, 0x02C2
    5f68:	88 2f       	mov	r24, r24
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_5);
    5f70:	82 e0       	ldi	r24, 0x02	; 2
    5f72:	65 e0       	ldi	r22, 0x05	; 5
    5f74:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(onesMinutes);
    5f78:	80 91 c1 02 	lds	r24, 0x02C1
    5f7c:	88 2f       	mov	r24, r24
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_9);
    5f84:	82 e0       	ldi	r24, 0x02	; 2
    5f86:	69 e0       	ldi	r22, 0x09	; 9
    5f88:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(tensSeconds);
    5f8c:	80 91 c0 02 	lds	r24, 0x02C0
    5f90:	88 2f       	mov	r24, r24
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_10);
    5f98:	82 e0       	ldi	r24, 0x02	; 2
    5f9a:	6a e0       	ldi	r22, 0x0A	; 10
    5f9c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(onesSeconds);
    5fa0:	80 91 bf 02 	lds	r24, 0x02BF
    5fa4:	88 2f       	mov	r24, r24
    5fa6:	90 e0       	ldi	r25, 0x00	; 0
    5fa8:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	if(flag){
    5fac:	80 91 db 02 	lds	r24, 0x02DB
    5fb0:	88 23       	and	r24, r24
    5fb2:	a9 f0       	breq	.+42     	; 0x5fde <Clock_12Hours+0xb2>
		/*Change the AM or PM if the hours = 12 */
		flag = 0;
    5fb4:	10 92 db 02 	sts	0x02DB, r1
		HLCD_u8SetCursor(HLCD_u8_LINE_1,HLCD_u8_Position_14);
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	6e e0       	ldi	r22, 0x0E	; 14
    5fbc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
		if(time == AM){
    5fc0:	80 91 e0 02 	lds	r24, 0x02E0
    5fc4:	81 30       	cpi	r24, 0x01	; 1
    5fc6:	31 f4       	brne	.+12     	; 0x5fd4 <Clock_12Hours+0xa8>
			HLCD_u8SendString("PM",14);
    5fc8:	84 e9       	ldi	r24, 0x94	; 148
    5fca:	91 e0       	ldi	r25, 0x01	; 1
    5fcc:	6e e0       	ldi	r22, 0x0E	; 14
    5fce:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
    5fd2:	05 c0       	rjmp	.+10     	; 0x5fde <Clock_12Hours+0xb2>
		}
		else{
			HLCD_u8SendString("AM",14);
    5fd4:	81 e9       	ldi	r24, 0x91	; 145
    5fd6:	91 e0       	ldi	r25, 0x01	; 1
    5fd8:	6e e0       	ldi	r22, 0x0E	; 14
    5fda:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HLCD_u8SendString>
		}
	}
	onesSeconds++;
    5fde:	80 91 bf 02 	lds	r24, 0x02BF
    5fe2:	8f 5f       	subi	r24, 0xFF	; 255
    5fe4:	80 93 bf 02 	sts	0x02BF, r24
	/*handle the increment of seconds , minutes and hours */

	if(onesSeconds == 10){
    5fe8:	80 91 bf 02 	lds	r24, 0x02BF
    5fec:	8a 30       	cpi	r24, 0x0A	; 10
    5fee:	99 f4       	brne	.+38     	; 0x6016 <Clock_12Hours+0xea>
		onesSeconds = 0;
    5ff0:	10 92 bf 02 	sts	0x02BF, r1
		if(tensSeconds == 5){
    5ff4:	80 91 c0 02 	lds	r24, 0x02C0
    5ff8:	85 30       	cpi	r24, 0x05	; 5
    5ffa:	41 f4       	brne	.+16     	; 0x600c <Clock_12Hours+0xe0>
			onesMinutes++;
    5ffc:	80 91 c1 02 	lds	r24, 0x02C1
    6000:	8f 5f       	subi	r24, 0xFF	; 255
    6002:	80 93 c1 02 	sts	0x02C1, r24
			tensSeconds = 0;
    6006:	10 92 c0 02 	sts	0x02C0, r1
    600a:	05 c0       	rjmp	.+10     	; 0x6016 <Clock_12Hours+0xea>
		}
		else{
			tensSeconds++;
    600c:	80 91 c0 02 	lds	r24, 0x02C0
    6010:	8f 5f       	subi	r24, 0xFF	; 255
    6012:	80 93 c0 02 	sts	0x02C0, r24
		}
	}
	if(onesMinutes == 10){
    6016:	80 91 c1 02 	lds	r24, 0x02C1
    601a:	8a 30       	cpi	r24, 0x0A	; 10
    601c:	99 f4       	brne	.+38     	; 0x6044 <Clock_12Hours+0x118>
		onesMinutes = 0;
    601e:	10 92 c1 02 	sts	0x02C1, r1
		if(tensMinutes == 5){
    6022:	80 91 c2 02 	lds	r24, 0x02C2
    6026:	85 30       	cpi	r24, 0x05	; 5
    6028:	41 f4       	brne	.+16     	; 0x603a <Clock_12Hours+0x10e>
			onesHours++;
    602a:	80 91 c3 02 	lds	r24, 0x02C3
    602e:	8f 5f       	subi	r24, 0xFF	; 255
    6030:	80 93 c3 02 	sts	0x02C3, r24
			tensMinutes = 0;
    6034:	10 92 c2 02 	sts	0x02C2, r1
    6038:	05 c0       	rjmp	.+10     	; 0x6044 <Clock_12Hours+0x118>
		}
		else{
			tensMinutes++;
    603a:	80 91 c2 02 	lds	r24, 0x02C2
    603e:	8f 5f       	subi	r24, 0xFF	; 255
    6040:	80 93 c2 02 	sts	0x02C2, r24
		}
	}
	if(onesHours == 10 && tensHours == 0){
    6044:	80 91 c3 02 	lds	r24, 0x02C3
    6048:	8a 30       	cpi	r24, 0x0A	; 10
    604a:	61 f4       	brne	.+24     	; 0x6064 <Clock_12Hours+0x138>
    604c:	80 91 c4 02 	lds	r24, 0x02C4
    6050:	88 23       	and	r24, r24
    6052:	41 f4       	brne	.+16     	; 0x6064 <Clock_12Hours+0x138>
		onesHours = 0;
    6054:	10 92 c3 02 	sts	0x02C3, r1
		tensHours++;
    6058:	80 91 c4 02 	lds	r24, 0x02C4
    605c:	8f 5f       	subi	r24, 0xFF	; 255
    605e:	80 93 c4 02 	sts	0x02C4, r24
    6062:	0f c0       	rjmp	.+30     	; 0x6082 <Clock_12Hours+0x156>
	}
	else if(onesHours == 2 && tensHours == 1){
    6064:	80 91 c3 02 	lds	r24, 0x02C3
    6068:	82 30       	cpi	r24, 0x02	; 2
    606a:	59 f4       	brne	.+22     	; 0x6082 <Clock_12Hours+0x156>
    606c:	80 91 c4 02 	lds	r24, 0x02C4
    6070:	81 30       	cpi	r24, 0x01	; 1
    6072:	39 f4       	brne	.+14     	; 0x6082 <Clock_12Hours+0x156>
		tensHours = 0;
    6074:	10 92 c4 02 	sts	0x02C4, r1
		onesHours = 0;
    6078:	10 92 c3 02 	sts	0x02C3, r1
		flag = 1;
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	80 93 db 02 	sts	0x02DB, r24
	}
}
    6082:	cf 91       	pop	r28
    6084:	df 91       	pop	r29
    6086:	08 95       	ret

00006088 <Clock_24Hours>:

void Clock_24Hours(void){
    6088:	df 93       	push	r29
    608a:	cf 93       	push	r28
    608c:	cd b7       	in	r28, 0x3d	; 61
    608e:	de b7       	in	r29, 0x3e	; 62
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_0);
    6090:	82 e0       	ldi	r24, 0x02	; 2
    6092:	60 e0       	ldi	r22, 0x00	; 0
    6094:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(tensHours);
    6098:	80 91 c4 02 	lds	r24, 0x02C4
    609c:	88 2f       	mov	r24, r24
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_1);
    60a4:	82 e0       	ldi	r24, 0x02	; 2
    60a6:	61 e0       	ldi	r22, 0x01	; 1
    60a8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(onesHours);
    60ac:	80 91 c3 02 	lds	r24, 0x02C3
    60b0:	88 2f       	mov	r24, r24
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_4);
    60b8:	82 e0       	ldi	r24, 0x02	; 2
    60ba:	64 e0       	ldi	r22, 0x04	; 4
    60bc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(tensMinutes);
    60c0:	80 91 c2 02 	lds	r24, 0x02C2
    60c4:	88 2f       	mov	r24, r24
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_5);
    60cc:	82 e0       	ldi	r24, 0x02	; 2
    60ce:	65 e0       	ldi	r22, 0x05	; 5
    60d0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(onesMinutes);
    60d4:	80 91 c1 02 	lds	r24, 0x02C1
    60d8:	88 2f       	mov	r24, r24
    60da:	90 e0       	ldi	r25, 0x00	; 0
    60dc:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_9);
    60e0:	82 e0       	ldi	r24, 0x02	; 2
    60e2:	69 e0       	ldi	r22, 0x09	; 9
    60e4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(tensSeconds);
    60e8:	80 91 c0 02 	lds	r24, 0x02C0
    60ec:	88 2f       	mov	r24, r24
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	HLCD_u8SetCursor(HLCD_u8_LINE_2,HLCD_u8_Position_10);
    60f4:	82 e0       	ldi	r24, 0x02	; 2
    60f6:	6a e0       	ldi	r22, 0x0A	; 10
    60f8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HLCD_u8SetCursor>
	HLCD_u8SendNumber(onesSeconds);
    60fc:	80 91 bf 02 	lds	r24, 0x02BF
    6100:	88 2f       	mov	r24, r24
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	0e 94 55 16 	call	0x2caa	; 0x2caa <HLCD_u8SendNumber>
	onesSeconds++;
    6108:	80 91 bf 02 	lds	r24, 0x02BF
    610c:	8f 5f       	subi	r24, 0xFF	; 255
    610e:	80 93 bf 02 	sts	0x02BF, r24
	if(onesSeconds == 10){
    6112:	80 91 bf 02 	lds	r24, 0x02BF
    6116:	8a 30       	cpi	r24, 0x0A	; 10
    6118:	99 f4       	brne	.+38     	; 0x6140 <Clock_24Hours+0xb8>
		onesSeconds = 0;
    611a:	10 92 bf 02 	sts	0x02BF, r1
		if(tensSeconds == 5){
    611e:	80 91 c0 02 	lds	r24, 0x02C0
    6122:	85 30       	cpi	r24, 0x05	; 5
    6124:	41 f4       	brne	.+16     	; 0x6136 <Clock_24Hours+0xae>
			onesMinutes++;
    6126:	80 91 c1 02 	lds	r24, 0x02C1
    612a:	8f 5f       	subi	r24, 0xFF	; 255
    612c:	80 93 c1 02 	sts	0x02C1, r24
			tensSeconds = 0;
    6130:	10 92 c0 02 	sts	0x02C0, r1
    6134:	05 c0       	rjmp	.+10     	; 0x6140 <Clock_24Hours+0xb8>
		}
		else{
			tensSeconds++;
    6136:	80 91 c0 02 	lds	r24, 0x02C0
    613a:	8f 5f       	subi	r24, 0xFF	; 255
    613c:	80 93 c0 02 	sts	0x02C0, r24
		}
	}
	if(onesMinutes == 10){
    6140:	80 91 c1 02 	lds	r24, 0x02C1
    6144:	8a 30       	cpi	r24, 0x0A	; 10
    6146:	99 f4       	brne	.+38     	; 0x616e <Clock_24Hours+0xe6>
		onesMinutes = 0;
    6148:	10 92 c1 02 	sts	0x02C1, r1
		if(tensMinutes == 5){
    614c:	80 91 c2 02 	lds	r24, 0x02C2
    6150:	85 30       	cpi	r24, 0x05	; 5
    6152:	41 f4       	brne	.+16     	; 0x6164 <Clock_24Hours+0xdc>
			onesHours++;
    6154:	80 91 c3 02 	lds	r24, 0x02C3
    6158:	8f 5f       	subi	r24, 0xFF	; 255
    615a:	80 93 c3 02 	sts	0x02C3, r24
			tensMinutes = 0;
    615e:	10 92 c2 02 	sts	0x02C2, r1
    6162:	05 c0       	rjmp	.+10     	; 0x616e <Clock_24Hours+0xe6>
		}
		else{
			tensMinutes++;
    6164:	80 91 c2 02 	lds	r24, 0x02C2
    6168:	8f 5f       	subi	r24, 0xFF	; 255
    616a:	80 93 c2 02 	sts	0x02C2, r24
		}
	}
	if(onesHours == 10 && tensHours < 2){
    616e:	80 91 c3 02 	lds	r24, 0x02C3
    6172:	8a 30       	cpi	r24, 0x0A	; 10
    6174:	61 f4       	brne	.+24     	; 0x618e <Clock_24Hours+0x106>
    6176:	80 91 c4 02 	lds	r24, 0x02C4
    617a:	82 30       	cpi	r24, 0x02	; 2
    617c:	40 f4       	brcc	.+16     	; 0x618e <Clock_24Hours+0x106>
		onesHours = 0;
    617e:	10 92 c3 02 	sts	0x02C3, r1
		tensHours++;
    6182:	80 91 c4 02 	lds	r24, 0x02C4
    6186:	8f 5f       	subi	r24, 0xFF	; 255
    6188:	80 93 c4 02 	sts	0x02C4, r24
    618c:	0c c0       	rjmp	.+24     	; 0x61a6 <Clock_24Hours+0x11e>
	}
	else if(onesHours == 4 && tensHours == 2){
    618e:	80 91 c3 02 	lds	r24, 0x02C3
    6192:	84 30       	cpi	r24, 0x04	; 4
    6194:	41 f4       	brne	.+16     	; 0x61a6 <Clock_24Hours+0x11e>
    6196:	80 91 c4 02 	lds	r24, 0x02C4
    619a:	82 30       	cpi	r24, 0x02	; 2
    619c:	21 f4       	brne	.+8      	; 0x61a6 <Clock_24Hours+0x11e>
		tensHours = 0;
    619e:	10 92 c4 02 	sts	0x02C4, r1
		onesHours = 0;
    61a2:	10 92 c3 02 	sts	0x02C3, r1
	}
}
    61a6:	cf 91       	pop	r28
    61a8:	df 91       	pop	r29
    61aa:	08 95       	ret

000061ac <__mulsi3>:
    61ac:	62 9f       	mul	r22, r18
    61ae:	d0 01       	movw	r26, r0
    61b0:	73 9f       	mul	r23, r19
    61b2:	f0 01       	movw	r30, r0
    61b4:	82 9f       	mul	r24, r18
    61b6:	e0 0d       	add	r30, r0
    61b8:	f1 1d       	adc	r31, r1
    61ba:	64 9f       	mul	r22, r20
    61bc:	e0 0d       	add	r30, r0
    61be:	f1 1d       	adc	r31, r1
    61c0:	92 9f       	mul	r25, r18
    61c2:	f0 0d       	add	r31, r0
    61c4:	83 9f       	mul	r24, r19
    61c6:	f0 0d       	add	r31, r0
    61c8:	74 9f       	mul	r23, r20
    61ca:	f0 0d       	add	r31, r0
    61cc:	65 9f       	mul	r22, r21
    61ce:	f0 0d       	add	r31, r0
    61d0:	99 27       	eor	r25, r25
    61d2:	72 9f       	mul	r23, r18
    61d4:	b0 0d       	add	r27, r0
    61d6:	e1 1d       	adc	r30, r1
    61d8:	f9 1f       	adc	r31, r25
    61da:	63 9f       	mul	r22, r19
    61dc:	b0 0d       	add	r27, r0
    61de:	e1 1d       	adc	r30, r1
    61e0:	f9 1f       	adc	r31, r25
    61e2:	bd 01       	movw	r22, r26
    61e4:	cf 01       	movw	r24, r30
    61e6:	11 24       	eor	r1, r1
    61e8:	08 95       	ret

000061ea <__udivmodhi4>:
    61ea:	aa 1b       	sub	r26, r26
    61ec:	bb 1b       	sub	r27, r27
    61ee:	51 e1       	ldi	r21, 0x11	; 17
    61f0:	07 c0       	rjmp	.+14     	; 0x6200 <__udivmodhi4_ep>

000061f2 <__udivmodhi4_loop>:
    61f2:	aa 1f       	adc	r26, r26
    61f4:	bb 1f       	adc	r27, r27
    61f6:	a6 17       	cp	r26, r22
    61f8:	b7 07       	cpc	r27, r23
    61fa:	10 f0       	brcs	.+4      	; 0x6200 <__udivmodhi4_ep>
    61fc:	a6 1b       	sub	r26, r22
    61fe:	b7 0b       	sbc	r27, r23

00006200 <__udivmodhi4_ep>:
    6200:	88 1f       	adc	r24, r24
    6202:	99 1f       	adc	r25, r25
    6204:	5a 95       	dec	r21
    6206:	a9 f7       	brne	.-22     	; 0x61f2 <__udivmodhi4_loop>
    6208:	80 95       	com	r24
    620a:	90 95       	com	r25
    620c:	bc 01       	movw	r22, r24
    620e:	cd 01       	movw	r24, r26
    6210:	08 95       	ret

00006212 <__udivmodsi4>:
    6212:	a1 e2       	ldi	r26, 0x21	; 33
    6214:	1a 2e       	mov	r1, r26
    6216:	aa 1b       	sub	r26, r26
    6218:	bb 1b       	sub	r27, r27
    621a:	fd 01       	movw	r30, r26
    621c:	0d c0       	rjmp	.+26     	; 0x6238 <__udivmodsi4_ep>

0000621e <__udivmodsi4_loop>:
    621e:	aa 1f       	adc	r26, r26
    6220:	bb 1f       	adc	r27, r27
    6222:	ee 1f       	adc	r30, r30
    6224:	ff 1f       	adc	r31, r31
    6226:	a2 17       	cp	r26, r18
    6228:	b3 07       	cpc	r27, r19
    622a:	e4 07       	cpc	r30, r20
    622c:	f5 07       	cpc	r31, r21
    622e:	20 f0       	brcs	.+8      	; 0x6238 <__udivmodsi4_ep>
    6230:	a2 1b       	sub	r26, r18
    6232:	b3 0b       	sbc	r27, r19
    6234:	e4 0b       	sbc	r30, r20
    6236:	f5 0b       	sbc	r31, r21

00006238 <__udivmodsi4_ep>:
    6238:	66 1f       	adc	r22, r22
    623a:	77 1f       	adc	r23, r23
    623c:	88 1f       	adc	r24, r24
    623e:	99 1f       	adc	r25, r25
    6240:	1a 94       	dec	r1
    6242:	69 f7       	brne	.-38     	; 0x621e <__udivmodsi4_loop>
    6244:	60 95       	com	r22
    6246:	70 95       	com	r23
    6248:	80 95       	com	r24
    624a:	90 95       	com	r25
    624c:	9b 01       	movw	r18, r22
    624e:	ac 01       	movw	r20, r24
    6250:	bd 01       	movw	r22, r26
    6252:	cf 01       	movw	r24, r30
    6254:	08 95       	ret

00006256 <__prologue_saves__>:
    6256:	2f 92       	push	r2
    6258:	3f 92       	push	r3
    625a:	4f 92       	push	r4
    625c:	5f 92       	push	r5
    625e:	6f 92       	push	r6
    6260:	7f 92       	push	r7
    6262:	8f 92       	push	r8
    6264:	9f 92       	push	r9
    6266:	af 92       	push	r10
    6268:	bf 92       	push	r11
    626a:	cf 92       	push	r12
    626c:	df 92       	push	r13
    626e:	ef 92       	push	r14
    6270:	ff 92       	push	r15
    6272:	0f 93       	push	r16
    6274:	1f 93       	push	r17
    6276:	cf 93       	push	r28
    6278:	df 93       	push	r29
    627a:	cd b7       	in	r28, 0x3d	; 61
    627c:	de b7       	in	r29, 0x3e	; 62
    627e:	ca 1b       	sub	r28, r26
    6280:	db 0b       	sbc	r29, r27
    6282:	0f b6       	in	r0, 0x3f	; 63
    6284:	f8 94       	cli
    6286:	de bf       	out	0x3e, r29	; 62
    6288:	0f be       	out	0x3f, r0	; 63
    628a:	cd bf       	out	0x3d, r28	; 61
    628c:	09 94       	ijmp

0000628e <__epilogue_restores__>:
    628e:	2a 88       	ldd	r2, Y+18	; 0x12
    6290:	39 88       	ldd	r3, Y+17	; 0x11
    6292:	48 88       	ldd	r4, Y+16	; 0x10
    6294:	5f 84       	ldd	r5, Y+15	; 0x0f
    6296:	6e 84       	ldd	r6, Y+14	; 0x0e
    6298:	7d 84       	ldd	r7, Y+13	; 0x0d
    629a:	8c 84       	ldd	r8, Y+12	; 0x0c
    629c:	9b 84       	ldd	r9, Y+11	; 0x0b
    629e:	aa 84       	ldd	r10, Y+10	; 0x0a
    62a0:	b9 84       	ldd	r11, Y+9	; 0x09
    62a2:	c8 84       	ldd	r12, Y+8	; 0x08
    62a4:	df 80       	ldd	r13, Y+7	; 0x07
    62a6:	ee 80       	ldd	r14, Y+6	; 0x06
    62a8:	fd 80       	ldd	r15, Y+5	; 0x05
    62aa:	0c 81       	ldd	r16, Y+4	; 0x04
    62ac:	1b 81       	ldd	r17, Y+3	; 0x03
    62ae:	aa 81       	ldd	r26, Y+2	; 0x02
    62b0:	b9 81       	ldd	r27, Y+1	; 0x01
    62b2:	ce 0f       	add	r28, r30
    62b4:	d1 1d       	adc	r29, r1
    62b6:	0f b6       	in	r0, 0x3f	; 63
    62b8:	f8 94       	cli
    62ba:	de bf       	out	0x3e, r29	; 62
    62bc:	0f be       	out	0x3f, r0	; 63
    62be:	cd bf       	out	0x3d, r28	; 61
    62c0:	ed 01       	movw	r28, r26
    62c2:	08 95       	ret

000062c4 <_exit>:
    62c4:	f8 94       	cli

000062c6 <__stop_program>:
    62c6:	ff cf       	rjmp	.-2      	; 0x62c6 <__stop_program>
